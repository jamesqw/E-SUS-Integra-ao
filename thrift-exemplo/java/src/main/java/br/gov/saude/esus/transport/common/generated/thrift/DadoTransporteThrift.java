/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.gov.saude.esus.transport.common.generated.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * "Pacote" que encapsula os dados transmissíveis
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-16")
public class DadoTransporteThrift implements org.apache.thrift.TBase<DadoTransporteThrift, DadoTransporteThrift._Fields>, java.io.Serializable, Cloneable, Comparable<DadoTransporteThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DadoTransporteThrift");

  private static final org.apache.thrift.protocol.TField UUID_DADO_SERIALIZADO_FIELD_DESC = new org.apache.thrift.protocol.TField("uuidDadoSerializado", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIPO_DADO_SERIALIZADO_FIELD_DESC = new org.apache.thrift.protocol.TField("tipoDadoSerializado", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CNES_DADO_SERIALIZADO_FIELD_DESC = new org.apache.thrift.protocol.TField("cnesDadoSerializado", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COD_IBGE_FIELD_DESC = new org.apache.thrift.protocol.TField("codIbge", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INE_DADO_SERIALIZADO_FIELD_DESC = new org.apache.thrift.protocol.TField("ineDadoSerializado", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_LOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("numLote", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DADO_SERIALIZADO_FIELD_DESC = new org.apache.thrift.protocol.TField("dadoSerializado", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REMETENTE_FIELD_DESC = new org.apache.thrift.protocol.TField("remetente", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField ORIGINADORA_FIELD_DESC = new org.apache.thrift.protocol.TField("originadora", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField VERSAO_FIELD_DESC = new org.apache.thrift.protocol.TField("versao", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DadoTransporteThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DadoTransporteThriftTupleSchemeFactory());
  }

  private String uuidDadoSerializado; // required
  private long tipoDadoSerializado; // required
  private String cnesDadoSerializado; // required
  private String codIbge; // optional
  private String ineDadoSerializado; // optional
  private long numLote; // optional
  private ByteBuffer dadoSerializado; // required
  private DadoInstalacaoThrift remetente; // required
  private DadoInstalacaoThrift originadora; // required
  private br.gov.saude.esus.transport.common.api.configuracaodestino.VersaoThrift versao; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * UUID do dado (identificador "universal" gerado na criação do item)
     */
    UUID_DADO_SERIALIZADO((short)1, "uuidDadoSerializado"),
    /**
     * Tipo/classe do obj serializado
     */
    TIPO_DADO_SERIALIZADO((short)2, "tipoDadoSerializado"),
    /**
     * Cnes
     */
    CNES_DADO_SERIALIZADO((short)3, "cnesDadoSerializado"),
    /**
     * Código IBGE do dado serializado
     */
    COD_IBGE((short)4, "codIbge"),
    /**
     * INE
     */
    INE_DADO_SERIALIZADO((short)5, "ineDadoSerializado"),
    /**
     * Numero do lote em {@link DadoTransporteThrift#originadora}
     */
    NUM_LOTE((short)6, "numLote"),
    /**
     * Dado serializado a partir de um Thrift
     */
    DADO_SERIALIZADO((short)7, "dadoSerializado"),
    /**
     * Identifica a instalação que enviou o dado
     */
    REMETENTE((short)8, "remetente"),
    /**
     * Identifica a instalação que cadastrou/digitou
     */
    ORIGINADORA((short)9, "originadora"),
    /**
     * Versão da ficha (optional temporario pra nao quebrar outros fluxos)
     */
    VERSAO((short)10, "versao");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID_DADO_SERIALIZADO
          return UUID_DADO_SERIALIZADO;
        case 2: // TIPO_DADO_SERIALIZADO
          return TIPO_DADO_SERIALIZADO;
        case 3: // CNES_DADO_SERIALIZADO
          return CNES_DADO_SERIALIZADO;
        case 4: // COD_IBGE
          return COD_IBGE;
        case 5: // INE_DADO_SERIALIZADO
          return INE_DADO_SERIALIZADO;
        case 6: // NUM_LOTE
          return NUM_LOTE;
        case 7: // DADO_SERIALIZADO
          return DADO_SERIALIZADO;
        case 8: // REMETENTE
          return REMETENTE;
        case 9: // ORIGINADORA
          return ORIGINADORA;
        case 10: // VERSAO
          return VERSAO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIPODADOSERIALIZADO_ISSET_ID = 0;
  private static final int __NUMLOTE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COD_IBGE,_Fields.INE_DADO_SERIALIZADO,_Fields.NUM_LOTE,_Fields.VERSAO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID_DADO_SERIALIZADO, new org.apache.thrift.meta_data.FieldMetaData("uuidDadoSerializado", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIPO_DADO_SERIALIZADO, new org.apache.thrift.meta_data.FieldMetaData("tipoDadoSerializado", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CNES_DADO_SERIALIZADO, new org.apache.thrift.meta_data.FieldMetaData("cnesDadoSerializado", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COD_IBGE, new org.apache.thrift.meta_data.FieldMetaData("codIbge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INE_DADO_SERIALIZADO, new org.apache.thrift.meta_data.FieldMetaData("ineDadoSerializado", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_LOTE, new org.apache.thrift.meta_data.FieldMetaData("numLote", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DADO_SERIALIZADO, new org.apache.thrift.meta_data.FieldMetaData("dadoSerializado", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.REMETENTE, new org.apache.thrift.meta_data.FieldMetaData("remetente", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DadoInstalacaoThrift.class)));
    tmpMap.put(_Fields.ORIGINADORA, new org.apache.thrift.meta_data.FieldMetaData("originadora", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DadoInstalacaoThrift.class)));
    tmpMap.put(_Fields.VERSAO, new org.apache.thrift.meta_data.FieldMetaData("versao", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, br.gov.saude.esus.transport.common.api.configuracaodestino.VersaoThrift.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DadoTransporteThrift.class, metaDataMap);
  }

  public DadoTransporteThrift() {
  }

  public DadoTransporteThrift(
    String uuidDadoSerializado,
    long tipoDadoSerializado,
    String cnesDadoSerializado,
    ByteBuffer dadoSerializado,
    DadoInstalacaoThrift remetente,
    DadoInstalacaoThrift originadora)
  {
    this();
    this.uuidDadoSerializado = uuidDadoSerializado;
    this.tipoDadoSerializado = tipoDadoSerializado;
    setTipoDadoSerializadoIsSet(true);
    this.cnesDadoSerializado = cnesDadoSerializado;
    this.dadoSerializado = org.apache.thrift.TBaseHelper.copyBinary(dadoSerializado);
    this.remetente = remetente;
    this.originadora = originadora;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DadoTransporteThrift(DadoTransporteThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUuidDadoSerializado()) {
      this.uuidDadoSerializado = other.uuidDadoSerializado;
    }
    this.tipoDadoSerializado = other.tipoDadoSerializado;
    if (other.isSetCnesDadoSerializado()) {
      this.cnesDadoSerializado = other.cnesDadoSerializado;
    }
    if (other.isSetCodIbge()) {
      this.codIbge = other.codIbge;
    }
    if (other.isSetIneDadoSerializado()) {
      this.ineDadoSerializado = other.ineDadoSerializado;
    }
    this.numLote = other.numLote;
    if (other.isSetDadoSerializado()) {
      this.dadoSerializado = org.apache.thrift.TBaseHelper.copyBinary(other.dadoSerializado);
    }
    if (other.isSetRemetente()) {
      this.remetente = new DadoInstalacaoThrift(other.remetente);
    }
    if (other.isSetOriginadora()) {
      this.originadora = new DadoInstalacaoThrift(other.originadora);
    }
    if (other.isSetVersao()) {
      this.versao = new br.gov.saude.esus.transport.common.api.configuracaodestino.VersaoThrift(other.versao);
    }
  }

  public DadoTransporteThrift deepCopy() {
    return new DadoTransporteThrift(this);
  }

  @Override
  public void clear() {
    this.uuidDadoSerializado = null;
    setTipoDadoSerializadoIsSet(false);
    this.tipoDadoSerializado = 0;
    this.cnesDadoSerializado = null;
    this.codIbge = null;
    this.ineDadoSerializado = null;
    setNumLoteIsSet(false);
    this.numLote = 0;
    this.dadoSerializado = null;
    this.remetente = null;
    this.originadora = null;
    this.versao = null;
  }

  /**
   * UUID do dado (identificador "universal" gerado na criação do item)
   */
  public String getUuidDadoSerializado() {
    return this.uuidDadoSerializado;
  }

  /**
   * UUID do dado (identificador "universal" gerado na criação do item)
   */
  public void setUuidDadoSerializado(String uuidDadoSerializado) {
    this.uuidDadoSerializado = uuidDadoSerializado;
  }

  public void unsetUuidDadoSerializado() {
    this.uuidDadoSerializado = null;
  }

  /** Returns true if field uuidDadoSerializado is set (has been assigned a value) and false otherwise */
  public boolean isSetUuidDadoSerializado() {
    return this.uuidDadoSerializado != null;
  }

  public void setUuidDadoSerializadoIsSet(boolean value) {
    if (!value) {
      this.uuidDadoSerializado = null;
    }
  }

  /**
   * Tipo/classe do obj serializado
   */
  public long getTipoDadoSerializado() {
    return this.tipoDadoSerializado;
  }

  /**
   * Tipo/classe do obj serializado
   */
  public void setTipoDadoSerializado(long tipoDadoSerializado) {
    this.tipoDadoSerializado = tipoDadoSerializado;
    setTipoDadoSerializadoIsSet(true);
  }

  public void unsetTipoDadoSerializado() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIPODADOSERIALIZADO_ISSET_ID);
  }

  /** Returns true if field tipoDadoSerializado is set (has been assigned a value) and false otherwise */
  public boolean isSetTipoDadoSerializado() {
    return EncodingUtils.testBit(__isset_bitfield, __TIPODADOSERIALIZADO_ISSET_ID);
  }

  public void setTipoDadoSerializadoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIPODADOSERIALIZADO_ISSET_ID, value);
  }

  /**
   * Cnes
   */
  public String getCnesDadoSerializado() {
    return this.cnesDadoSerializado;
  }

  /**
   * Cnes
   */
  public void setCnesDadoSerializado(String cnesDadoSerializado) {
    this.cnesDadoSerializado = cnesDadoSerializado;
  }

  public void unsetCnesDadoSerializado() {
    this.cnesDadoSerializado = null;
  }

  /** Returns true if field cnesDadoSerializado is set (has been assigned a value) and false otherwise */
  public boolean isSetCnesDadoSerializado() {
    return this.cnesDadoSerializado != null;
  }

  public void setCnesDadoSerializadoIsSet(boolean value) {
    if (!value) {
      this.cnesDadoSerializado = null;
    }
  }

  /**
   * Código IBGE do dado serializado
   */
  public String getCodIbge() {
    return this.codIbge;
  }

  /**
   * Código IBGE do dado serializado
   */
  public void setCodIbge(String codIbge) {
    this.codIbge = codIbge;
  }

  public void unsetCodIbge() {
    this.codIbge = null;
  }

  /** Returns true if field codIbge is set (has been assigned a value) and false otherwise */
  public boolean isSetCodIbge() {
    return this.codIbge != null;
  }

  public void setCodIbgeIsSet(boolean value) {
    if (!value) {
      this.codIbge = null;
    }
  }

  /**
   * INE
   */
  public String getIneDadoSerializado() {
    return this.ineDadoSerializado;
  }

  /**
   * INE
   */
  public void setIneDadoSerializado(String ineDadoSerializado) {
    this.ineDadoSerializado = ineDadoSerializado;
  }

  public void unsetIneDadoSerializado() {
    this.ineDadoSerializado = null;
  }

  /** Returns true if field ineDadoSerializado is set (has been assigned a value) and false otherwise */
  public boolean isSetIneDadoSerializado() {
    return this.ineDadoSerializado != null;
  }

  public void setIneDadoSerializadoIsSet(boolean value) {
    if (!value) {
      this.ineDadoSerializado = null;
    }
  }

  /**
   * Numero do lote em {@link DadoTransporteThrift#originadora}
   */
  public long getNumLote() {
    return this.numLote;
  }

  /**
   * Numero do lote em {@link DadoTransporteThrift#originadora}
   */
  public void setNumLote(long numLote) {
    this.numLote = numLote;
    setNumLoteIsSet(true);
  }

  public void unsetNumLote() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMLOTE_ISSET_ID);
  }

  /** Returns true if field numLote is set (has been assigned a value) and false otherwise */
  public boolean isSetNumLote() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMLOTE_ISSET_ID);
  }

  public void setNumLoteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMLOTE_ISSET_ID, value);
  }

  /**
   * Dado serializado a partir de um Thrift
   */
  public byte[] getDadoSerializado() {
    setDadoSerializado(org.apache.thrift.TBaseHelper.rightSize(dadoSerializado));
    return dadoSerializado == null ? null : dadoSerializado.array();
  }

  public ByteBuffer bufferForDadoSerializado() {
    return org.apache.thrift.TBaseHelper.copyBinary(dadoSerializado);
  }

  /**
   * Dado serializado a partir de um Thrift
   */
  public void setDadoSerializado(byte[] dadoSerializado) {
    this.dadoSerializado = dadoSerializado == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(dadoSerializado, dadoSerializado.length));
  }

  public void setDadoSerializado(ByteBuffer dadoSerializado) {
    this.dadoSerializado = org.apache.thrift.TBaseHelper.copyBinary(dadoSerializado);
  }

  public void unsetDadoSerializado() {
    this.dadoSerializado = null;
  }

  /** Returns true if field dadoSerializado is set (has been assigned a value) and false otherwise */
  public boolean isSetDadoSerializado() {
    return this.dadoSerializado != null;
  }

  public void setDadoSerializadoIsSet(boolean value) {
    if (!value) {
      this.dadoSerializado = null;
    }
  }

  /**
   * Identifica a instalação que enviou o dado
   */
  public DadoInstalacaoThrift getRemetente() {
    return this.remetente;
  }

  /**
   * Identifica a instalação que enviou o dado
   */
  public void setRemetente(DadoInstalacaoThrift remetente) {
    this.remetente = remetente;
  }

  public void unsetRemetente() {
    this.remetente = null;
  }

  /** Returns true if field remetente is set (has been assigned a value) and false otherwise */
  public boolean isSetRemetente() {
    return this.remetente != null;
  }

  public void setRemetenteIsSet(boolean value) {
    if (!value) {
      this.remetente = null;
    }
  }

  /**
   * Identifica a instalação que cadastrou/digitou
   */
  public DadoInstalacaoThrift getOriginadora() {
    return this.originadora;
  }

  /**
   * Identifica a instalação que cadastrou/digitou
   */
  public void setOriginadora(DadoInstalacaoThrift originadora) {
    this.originadora = originadora;
  }

  public void unsetOriginadora() {
    this.originadora = null;
  }

  /** Returns true if field originadora is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginadora() {
    return this.originadora != null;
  }

  public void setOriginadoraIsSet(boolean value) {
    if (!value) {
      this.originadora = null;
    }
  }

  /**
   * Versão da ficha (optional temporario pra nao quebrar outros fluxos)
   */
  public br.gov.saude.esus.transport.common.api.configuracaodestino.VersaoThrift getVersao() {
    return this.versao;
  }

  /**
   * Versão da ficha (optional temporario pra nao quebrar outros fluxos)
   */
  public void setVersao(br.gov.saude.esus.transport.common.api.configuracaodestino.VersaoThrift versao) {
    this.versao = versao;
  }

  public void unsetVersao() {
    this.versao = null;
  }

  /** Returns true if field versao is set (has been assigned a value) and false otherwise */
  public boolean isSetVersao() {
    return this.versao != null;
  }

  public void setVersaoIsSet(boolean value) {
    if (!value) {
      this.versao = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID_DADO_SERIALIZADO:
      if (value == null) {
        unsetUuidDadoSerializado();
      } else {
        setUuidDadoSerializado((String)value);
      }
      break;

    case TIPO_DADO_SERIALIZADO:
      if (value == null) {
        unsetTipoDadoSerializado();
      } else {
        setTipoDadoSerializado((Long)value);
      }
      break;

    case CNES_DADO_SERIALIZADO:
      if (value == null) {
        unsetCnesDadoSerializado();
      } else {
        setCnesDadoSerializado((String)value);
      }
      break;

    case COD_IBGE:
      if (value == null) {
        unsetCodIbge();
      } else {
        setCodIbge((String)value);
      }
      break;

    case INE_DADO_SERIALIZADO:
      if (value == null) {
        unsetIneDadoSerializado();
      } else {
        setIneDadoSerializado((String)value);
      }
      break;

    case NUM_LOTE:
      if (value == null) {
        unsetNumLote();
      } else {
        setNumLote((Long)value);
      }
      break;

    case DADO_SERIALIZADO:
      if (value == null) {
        unsetDadoSerializado();
      } else {
        setDadoSerializado((ByteBuffer)value);
      }
      break;

    case REMETENTE:
      if (value == null) {
        unsetRemetente();
      } else {
        setRemetente((DadoInstalacaoThrift)value);
      }
      break;

    case ORIGINADORA:
      if (value == null) {
        unsetOriginadora();
      } else {
        setOriginadora((DadoInstalacaoThrift)value);
      }
      break;

    case VERSAO:
      if (value == null) {
        unsetVersao();
      } else {
        setVersao((br.gov.saude.esus.transport.common.api.configuracaodestino.VersaoThrift)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID_DADO_SERIALIZADO:
      return getUuidDadoSerializado();

    case TIPO_DADO_SERIALIZADO:
      return Long.valueOf(getTipoDadoSerializado());

    case CNES_DADO_SERIALIZADO:
      return getCnesDadoSerializado();

    case COD_IBGE:
      return getCodIbge();

    case INE_DADO_SERIALIZADO:
      return getIneDadoSerializado();

    case NUM_LOTE:
      return Long.valueOf(getNumLote());

    case DADO_SERIALIZADO:
      return getDadoSerializado();

    case REMETENTE:
      return getRemetente();

    case ORIGINADORA:
      return getOriginadora();

    case VERSAO:
      return getVersao();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID_DADO_SERIALIZADO:
      return isSetUuidDadoSerializado();
    case TIPO_DADO_SERIALIZADO:
      return isSetTipoDadoSerializado();
    case CNES_DADO_SERIALIZADO:
      return isSetCnesDadoSerializado();
    case COD_IBGE:
      return isSetCodIbge();
    case INE_DADO_SERIALIZADO:
      return isSetIneDadoSerializado();
    case NUM_LOTE:
      return isSetNumLote();
    case DADO_SERIALIZADO:
      return isSetDadoSerializado();
    case REMETENTE:
      return isSetRemetente();
    case ORIGINADORA:
      return isSetOriginadora();
    case VERSAO:
      return isSetVersao();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DadoTransporteThrift)
      return this.equals((DadoTransporteThrift)that);
    return false;
  }

  public boolean equals(DadoTransporteThrift that) {
    if (that == null)
      return false;

    boolean this_present_uuidDadoSerializado = true && this.isSetUuidDadoSerializado();
    boolean that_present_uuidDadoSerializado = true && that.isSetUuidDadoSerializado();
    if (this_present_uuidDadoSerializado || that_present_uuidDadoSerializado) {
      if (!(this_present_uuidDadoSerializado && that_present_uuidDadoSerializado))
        return false;
      if (!this.uuidDadoSerializado.equals(that.uuidDadoSerializado))
        return false;
    }

    boolean this_present_tipoDadoSerializado = true;
    boolean that_present_tipoDadoSerializado = true;
    if (this_present_tipoDadoSerializado || that_present_tipoDadoSerializado) {
      if (!(this_present_tipoDadoSerializado && that_present_tipoDadoSerializado))
        return false;
      if (this.tipoDadoSerializado != that.tipoDadoSerializado)
        return false;
    }

    boolean this_present_cnesDadoSerializado = true && this.isSetCnesDadoSerializado();
    boolean that_present_cnesDadoSerializado = true && that.isSetCnesDadoSerializado();
    if (this_present_cnesDadoSerializado || that_present_cnesDadoSerializado) {
      if (!(this_present_cnesDadoSerializado && that_present_cnesDadoSerializado))
        return false;
      if (!this.cnesDadoSerializado.equals(that.cnesDadoSerializado))
        return false;
    }

    boolean this_present_codIbge = true && this.isSetCodIbge();
    boolean that_present_codIbge = true && that.isSetCodIbge();
    if (this_present_codIbge || that_present_codIbge) {
      if (!(this_present_codIbge && that_present_codIbge))
        return false;
      if (!this.codIbge.equals(that.codIbge))
        return false;
    }

    boolean this_present_ineDadoSerializado = true && this.isSetIneDadoSerializado();
    boolean that_present_ineDadoSerializado = true && that.isSetIneDadoSerializado();
    if (this_present_ineDadoSerializado || that_present_ineDadoSerializado) {
      if (!(this_present_ineDadoSerializado && that_present_ineDadoSerializado))
        return false;
      if (!this.ineDadoSerializado.equals(that.ineDadoSerializado))
        return false;
    }

    boolean this_present_numLote = true && this.isSetNumLote();
    boolean that_present_numLote = true && that.isSetNumLote();
    if (this_present_numLote || that_present_numLote) {
      if (!(this_present_numLote && that_present_numLote))
        return false;
      if (this.numLote != that.numLote)
        return false;
    }

    boolean this_present_dadoSerializado = true && this.isSetDadoSerializado();
    boolean that_present_dadoSerializado = true && that.isSetDadoSerializado();
    if (this_present_dadoSerializado || that_present_dadoSerializado) {
      if (!(this_present_dadoSerializado && that_present_dadoSerializado))
        return false;
      if (!this.dadoSerializado.equals(that.dadoSerializado))
        return false;
    }

    boolean this_present_remetente = true && this.isSetRemetente();
    boolean that_present_remetente = true && that.isSetRemetente();
    if (this_present_remetente || that_present_remetente) {
      if (!(this_present_remetente && that_present_remetente))
        return false;
      if (!this.remetente.equals(that.remetente))
        return false;
    }

    boolean this_present_originadora = true && this.isSetOriginadora();
    boolean that_present_originadora = true && that.isSetOriginadora();
    if (this_present_originadora || that_present_originadora) {
      if (!(this_present_originadora && that_present_originadora))
        return false;
      if (!this.originadora.equals(that.originadora))
        return false;
    }

    boolean this_present_versao = true && this.isSetVersao();
    boolean that_present_versao = true && that.isSetVersao();
    if (this_present_versao || that_present_versao) {
      if (!(this_present_versao && that_present_versao))
        return false;
      if (!this.versao.equals(that.versao))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uuidDadoSerializado = true && (isSetUuidDadoSerializado());
    list.add(present_uuidDadoSerializado);
    if (present_uuidDadoSerializado)
      list.add(uuidDadoSerializado);

    boolean present_tipoDadoSerializado = true;
    list.add(present_tipoDadoSerializado);
    if (present_tipoDadoSerializado)
      list.add(tipoDadoSerializado);

    boolean present_cnesDadoSerializado = true && (isSetCnesDadoSerializado());
    list.add(present_cnesDadoSerializado);
    if (present_cnesDadoSerializado)
      list.add(cnesDadoSerializado);

    boolean present_codIbge = true && (isSetCodIbge());
    list.add(present_codIbge);
    if (present_codIbge)
      list.add(codIbge);

    boolean present_ineDadoSerializado = true && (isSetIneDadoSerializado());
    list.add(present_ineDadoSerializado);
    if (present_ineDadoSerializado)
      list.add(ineDadoSerializado);

    boolean present_numLote = true && (isSetNumLote());
    list.add(present_numLote);
    if (present_numLote)
      list.add(numLote);

    boolean present_dadoSerializado = true && (isSetDadoSerializado());
    list.add(present_dadoSerializado);
    if (present_dadoSerializado)
      list.add(dadoSerializado);

    boolean present_remetente = true && (isSetRemetente());
    list.add(present_remetente);
    if (present_remetente)
      list.add(remetente);

    boolean present_originadora = true && (isSetOriginadora());
    list.add(present_originadora);
    if (present_originadora)
      list.add(originadora);

    boolean present_versao = true && (isSetVersao());
    list.add(present_versao);
    if (present_versao)
      list.add(versao);

    return list.hashCode();
  }

  @Override
  public int compareTo(DadoTransporteThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUuidDadoSerializado()).compareTo(other.isSetUuidDadoSerializado());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuidDadoSerializado()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuidDadoSerializado, other.uuidDadoSerializado);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTipoDadoSerializado()).compareTo(other.isSetTipoDadoSerializado());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTipoDadoSerializado()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tipoDadoSerializado, other.tipoDadoSerializado);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnesDadoSerializado()).compareTo(other.isSetCnesDadoSerializado());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnesDadoSerializado()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnesDadoSerializado, other.cnesDadoSerializado);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCodIbge()).compareTo(other.isSetCodIbge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCodIbge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codIbge, other.codIbge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIneDadoSerializado()).compareTo(other.isSetIneDadoSerializado());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIneDadoSerializado()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ineDadoSerializado, other.ineDadoSerializado);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumLote()).compareTo(other.isSetNumLote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumLote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numLote, other.numLote);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDadoSerializado()).compareTo(other.isSetDadoSerializado());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDadoSerializado()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dadoSerializado, other.dadoSerializado);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemetente()).compareTo(other.isSetRemetente());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemetente()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remetente, other.remetente);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginadora()).compareTo(other.isSetOriginadora());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginadora()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originadora, other.originadora);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersao()).compareTo(other.isSetVersao());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersao()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versao, other.versao);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DadoTransporteThrift(");
    boolean first = true;

    sb.append("uuidDadoSerializado:");
    if (this.uuidDadoSerializado == null) {
      sb.append("null");
    } else {
      sb.append(this.uuidDadoSerializado);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tipoDadoSerializado:");
    sb.append(this.tipoDadoSerializado);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cnesDadoSerializado:");
    if (this.cnesDadoSerializado == null) {
      sb.append("null");
    } else {
      sb.append(this.cnesDadoSerializado);
    }
    first = false;
    if (isSetCodIbge()) {
      if (!first) sb.append(", ");
      sb.append("codIbge:");
      if (this.codIbge == null) {
        sb.append("null");
      } else {
        sb.append(this.codIbge);
      }
      first = false;
    }
    if (isSetIneDadoSerializado()) {
      if (!first) sb.append(", ");
      sb.append("ineDadoSerializado:");
      if (this.ineDadoSerializado == null) {
        sb.append("null");
      } else {
        sb.append(this.ineDadoSerializado);
      }
      first = false;
    }
    if (isSetNumLote()) {
      if (!first) sb.append(", ");
      sb.append("numLote:");
      sb.append(this.numLote);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("dadoSerializado:");
    if (this.dadoSerializado == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.dadoSerializado, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remetente:");
    if (this.remetente == null) {
      sb.append("null");
    } else {
      sb.append(this.remetente);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originadora:");
    if (this.originadora == null) {
      sb.append("null");
    } else {
      sb.append(this.originadora);
    }
    first = false;
    if (isSetVersao()) {
      if (!first) sb.append(", ");
      sb.append("versao:");
      if (this.versao == null) {
        sb.append("null");
      } else {
        sb.append(this.versao);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetUuidDadoSerializado()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuidDadoSerializado' is unset! Struct:" + toString());
    }

    if (!isSetTipoDadoSerializado()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tipoDadoSerializado' is unset! Struct:" + toString());
    }

    if (!isSetCnesDadoSerializado()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cnesDadoSerializado' is unset! Struct:" + toString());
    }

    if (!isSetDadoSerializado()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dadoSerializado' is unset! Struct:" + toString());
    }

    if (!isSetRemetente()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'remetente' is unset! Struct:" + toString());
    }

    if (!isSetOriginadora()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'originadora' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (remetente != null) {
      remetente.validate();
    }
    if (originadora != null) {
      originadora.validate();
    }
    if (versao != null) {
      versao.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DadoTransporteThriftStandardSchemeFactory implements SchemeFactory {
    public DadoTransporteThriftStandardScheme getScheme() {
      return new DadoTransporteThriftStandardScheme();
    }
  }

  private static class DadoTransporteThriftStandardScheme extends StandardScheme<DadoTransporteThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DadoTransporteThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID_DADO_SERIALIZADO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuidDadoSerializado = iprot.readString();
              struct.setUuidDadoSerializadoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIPO_DADO_SERIALIZADO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tipoDadoSerializado = iprot.readI64();
              struct.setTipoDadoSerializadoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CNES_DADO_SERIALIZADO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnesDadoSerializado = iprot.readString();
              struct.setCnesDadoSerializadoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COD_IBGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.codIbge = iprot.readString();
              struct.setCodIbgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INE_DADO_SERIALIZADO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ineDadoSerializado = iprot.readString();
              struct.setIneDadoSerializadoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM_LOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numLote = iprot.readI64();
              struct.setNumLoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DADO_SERIALIZADO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dadoSerializado = iprot.readBinary();
              struct.setDadoSerializadoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REMETENTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.remetente = new DadoInstalacaoThrift();
              struct.remetente.read(iprot);
              struct.setRemetenteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORIGINADORA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.originadora = new DadoInstalacaoThrift();
              struct.originadora.read(iprot);
              struct.setOriginadoraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VERSAO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.versao = new br.gov.saude.esus.transport.common.api.configuracaodestino.VersaoThrift();
              struct.versao.read(iprot);
              struct.setVersaoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DadoTransporteThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuidDadoSerializado != null) {
        oprot.writeFieldBegin(UUID_DADO_SERIALIZADO_FIELD_DESC);
        oprot.writeString(struct.uuidDadoSerializado);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIPO_DADO_SERIALIZADO_FIELD_DESC);
      oprot.writeI64(struct.tipoDadoSerializado);
      oprot.writeFieldEnd();
      if (struct.cnesDadoSerializado != null) {
        oprot.writeFieldBegin(CNES_DADO_SERIALIZADO_FIELD_DESC);
        oprot.writeString(struct.cnesDadoSerializado);
        oprot.writeFieldEnd();
      }
      if (struct.codIbge != null) {
        if (struct.isSetCodIbge()) {
          oprot.writeFieldBegin(COD_IBGE_FIELD_DESC);
          oprot.writeString(struct.codIbge);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ineDadoSerializado != null) {
        if (struct.isSetIneDadoSerializado()) {
          oprot.writeFieldBegin(INE_DADO_SERIALIZADO_FIELD_DESC);
          oprot.writeString(struct.ineDadoSerializado);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNumLote()) {
        oprot.writeFieldBegin(NUM_LOTE_FIELD_DESC);
        oprot.writeI64(struct.numLote);
        oprot.writeFieldEnd();
      }
      if (struct.dadoSerializado != null) {
        oprot.writeFieldBegin(DADO_SERIALIZADO_FIELD_DESC);
        oprot.writeBinary(struct.dadoSerializado);
        oprot.writeFieldEnd();
      }
      if (struct.remetente != null) {
        oprot.writeFieldBegin(REMETENTE_FIELD_DESC);
        struct.remetente.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.originadora != null) {
        oprot.writeFieldBegin(ORIGINADORA_FIELD_DESC);
        struct.originadora.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.versao != null) {
        if (struct.isSetVersao()) {
          oprot.writeFieldBegin(VERSAO_FIELD_DESC);
          struct.versao.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DadoTransporteThriftTupleSchemeFactory implements SchemeFactory {
    public DadoTransporteThriftTupleScheme getScheme() {
      return new DadoTransporteThriftTupleScheme();
    }
  }

  private static class DadoTransporteThriftTupleScheme extends TupleScheme<DadoTransporteThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DadoTransporteThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.uuidDadoSerializado);
      oprot.writeI64(struct.tipoDadoSerializado);
      oprot.writeString(struct.cnesDadoSerializado);
      oprot.writeBinary(struct.dadoSerializado);
      struct.remetente.write(oprot);
      struct.originadora.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetCodIbge()) {
        optionals.set(0);
      }
      if (struct.isSetIneDadoSerializado()) {
        optionals.set(1);
      }
      if (struct.isSetNumLote()) {
        optionals.set(2);
      }
      if (struct.isSetVersao()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCodIbge()) {
        oprot.writeString(struct.codIbge);
      }
      if (struct.isSetIneDadoSerializado()) {
        oprot.writeString(struct.ineDadoSerializado);
      }
      if (struct.isSetNumLote()) {
        oprot.writeI64(struct.numLote);
      }
      if (struct.isSetVersao()) {
        struct.versao.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DadoTransporteThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uuidDadoSerializado = iprot.readString();
      struct.setUuidDadoSerializadoIsSet(true);
      struct.tipoDadoSerializado = iprot.readI64();
      struct.setTipoDadoSerializadoIsSet(true);
      struct.cnesDadoSerializado = iprot.readString();
      struct.setCnesDadoSerializadoIsSet(true);
      struct.dadoSerializado = iprot.readBinary();
      struct.setDadoSerializadoIsSet(true);
      struct.remetente = new DadoInstalacaoThrift();
      struct.remetente.read(iprot);
      struct.setRemetenteIsSet(true);
      struct.originadora = new DadoInstalacaoThrift();
      struct.originadora.read(iprot);
      struct.setOriginadoraIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.codIbge = iprot.readString();
        struct.setCodIbgeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ineDadoSerializado = iprot.readString();
        struct.setIneDadoSerializadoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.numLote = iprot.readI64();
        struct.setNumLoteIsSet(true);
      }
      if (incoming.get(3)) {
        struct.versao = new br.gov.saude.esus.transport.common.api.configuracaodestino.VersaoThrift();
        struct.versao.read(iprot);
        struct.setVersaoIsSet(true);
      }
    }
  }

}

