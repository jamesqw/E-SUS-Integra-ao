(**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *)

unit br.gov.saude.esusab.ras.complementarzika;

interface

uses
  Classes,
  SysUtils,
  Generics.Collections,
  Thrift,
  Thrift.Utils,
  Thrift.Collections,
  Thrift.Protocol,
  Thrift.Transport,
  br.gov.saude.esusab.ras.common;

const
  cbr_gov_saude_esusab_ras_complementarzika_Option_AnsiStr_Binary = False;
  cbr_gov_saude_esusab_ras_complementarzika_Option_Register_Types = False;
  cbr_gov_saude_esusab_ras_complementarzika_Option_ConstPrefix    = False;
  cbr_gov_saude_esusab_ras_complementarzika_Option_Events         = False;
  cbr_gov_saude_esusab_ras_complementarzika_Option_XmlDoc         = False;

type
  IFichaComplementarZikaMicrocefaliaThrift = interface;

  IFichaComplementarZikaMicrocefaliaThrift = interface(IBase)
    function GetHeaderTransport: IUnicaLotacaoHeaderThrift;
    procedure SetHeaderTransport( const Value: IUnicaLotacaoHeaderThrift);
    function GetUuidFicha: string;
    procedure SetUuidFicha( const Value: string);
    function GetTpCdsOrigem: Integer;
    procedure SetTpCdsOrigem( const Value: Integer);
    function GetTurno: Int64;
    procedure SetTurno( const Value: Int64);
    function GetCnsCidadao: string;
    procedure SetCnsCidadao( const Value: string);
    function GetCnsResponsavelFamiliar: string;
    procedure SetCnsResponsavelFamiliar( const Value: string);
    function GetDataRealizacaoTesteOlhinho: Int64;
    procedure SetDataRealizacaoTesteOlhinho( const Value: Int64);
    function GetCoResultadoTesteOlhinho: Int64;
    procedure SetCoResultadoTesteOlhinho( const Value: Int64);
    function GetDataRealizacaoExameFundoOlho: Int64;
    procedure SetDataRealizacaoExameFundoOlho( const Value: Int64);
    function GetCoResultadoExameFundoOlho: Int64;
    procedure SetCoResultadoExameFundoOlho( const Value: Int64);
    function GetDataRealizacaoTesteOrelhinha: Int64;
    procedure SetDataRealizacaoTesteOrelhinha( const Value: Int64);
    function GetCoResultadoTesteOrelhinha: Int64;
    procedure SetCoResultadoTesteOrelhinha( const Value: Int64);
    function GetDataRealizacaoUSTransfontanela: Int64;
    procedure SetDataRealizacaoUSTransfontanela( const Value: Int64);
    function GetCoResultadoUsTransfontanela: Int64;
    procedure SetCoResultadoUsTransfontanela( const Value: Int64);
    function GetDataRealizacaoTomografiaComputadorizada: Int64;
    procedure SetDataRealizacaoTomografiaComputadorizada( const Value: Int64);
    function GetCoResultadoTomografiaComputadorizada: Int64;
    procedure SetCoResultadoTomografiaComputadorizada( const Value: Int64);
    function GetDataRealizacaoRessonanciaMagnetica: Int64;
    procedure SetDataRealizacaoRessonanciaMagnetica( const Value: Int64);
    function GetCoResultadoRessonanciaMagnetica: Int64;
    procedure SetCoResultadoRessonanciaMagnetica( const Value: Int64);

    property HeaderTransport: IUnicaLotacaoHeaderThrift read GetHeaderTransport write SetHeaderTransport;
    property UuidFicha: string read GetUuidFicha write SetUuidFicha;
    property TpCdsOrigem: Integer read GetTpCdsOrigem write SetTpCdsOrigem;
    property Turno: Int64 read GetTurno write SetTurno;
    property CnsCidadao: string read GetCnsCidadao write SetCnsCidadao;
    property CnsResponsavelFamiliar: string read GetCnsResponsavelFamiliar write SetCnsResponsavelFamiliar;
    property DataRealizacaoTesteOlhinho: Int64 read GetDataRealizacaoTesteOlhinho write SetDataRealizacaoTesteOlhinho;
    property CoResultadoTesteOlhinho: Int64 read GetCoResultadoTesteOlhinho write SetCoResultadoTesteOlhinho;
    property DataRealizacaoExameFundoOlho: Int64 read GetDataRealizacaoExameFundoOlho write SetDataRealizacaoExameFundoOlho;
    property CoResultadoExameFundoOlho: Int64 read GetCoResultadoExameFundoOlho write SetCoResultadoExameFundoOlho;
    property DataRealizacaoTesteOrelhinha: Int64 read GetDataRealizacaoTesteOrelhinha write SetDataRealizacaoTesteOrelhinha;
    property CoResultadoTesteOrelhinha: Int64 read GetCoResultadoTesteOrelhinha write SetCoResultadoTesteOrelhinha;
    property DataRealizacaoUSTransfontanela: Int64 read GetDataRealizacaoUSTransfontanela write SetDataRealizacaoUSTransfontanela;
    property CoResultadoUsTransfontanela: Int64 read GetCoResultadoUsTransfontanela write SetCoResultadoUsTransfontanela;
    property DataRealizacaoTomografiaComputadorizada: Int64 read GetDataRealizacaoTomografiaComputadorizada write SetDataRealizacaoTomografiaComputadorizada;
    property CoResultadoTomografiaComputadorizada: Int64 read GetCoResultadoTomografiaComputadorizada write SetCoResultadoTomografiaComputadorizada;
    property DataRealizacaoRessonanciaMagnetica: Int64 read GetDataRealizacaoRessonanciaMagnetica write SetDataRealizacaoRessonanciaMagnetica;
    property CoResultadoRessonanciaMagnetica: Int64 read GetCoResultadoRessonanciaMagnetica write SetCoResultadoRessonanciaMagnetica;

    function Get__isset_HeaderTransport: Boolean;
    function Get__isset_TpCdsOrigem: Boolean;
    function Get__isset_Turno: Boolean;
    function Get__isset_CnsCidadao: Boolean;
    function Get__isset_CnsResponsavelFamiliar: Boolean;
    function Get__isset_DataRealizacaoTesteOlhinho: Boolean;
    function Get__isset_CoResultadoTesteOlhinho: Boolean;
    function Get__isset_DataRealizacaoExameFundoOlho: Boolean;
    function Get__isset_CoResultadoExameFundoOlho: Boolean;
    function Get__isset_DataRealizacaoTesteOrelhinha: Boolean;
    function Get__isset_CoResultadoTesteOrelhinha: Boolean;
    function Get__isset_DataRealizacaoUSTransfontanela: Boolean;
    function Get__isset_CoResultadoUsTransfontanela: Boolean;
    function Get__isset_DataRealizacaoTomografiaComputadorizada: Boolean;
    function Get__isset_CoResultadoTomografiaComputadorizada: Boolean;
    function Get__isset_DataRealizacaoRessonanciaMagnetica: Boolean;
    function Get__isset_CoResultadoRessonanciaMagnetica: Boolean;

    property __isset_HeaderTransport: Boolean read Get__isset_HeaderTransport;
    property __isset_TpCdsOrigem: Boolean read Get__isset_TpCdsOrigem;
    property __isset_Turno: Boolean read Get__isset_Turno;
    property __isset_CnsCidadao: Boolean read Get__isset_CnsCidadao;
    property __isset_CnsResponsavelFamiliar: Boolean read Get__isset_CnsResponsavelFamiliar;
    property __isset_DataRealizacaoTesteOlhinho: Boolean read Get__isset_DataRealizacaoTesteOlhinho;
    property __isset_CoResultadoTesteOlhinho: Boolean read Get__isset_CoResultadoTesteOlhinho;
    property __isset_DataRealizacaoExameFundoOlho: Boolean read Get__isset_DataRealizacaoExameFundoOlho;
    property __isset_CoResultadoExameFundoOlho: Boolean read Get__isset_CoResultadoExameFundoOlho;
    property __isset_DataRealizacaoTesteOrelhinha: Boolean read Get__isset_DataRealizacaoTesteOrelhinha;
    property __isset_CoResultadoTesteOrelhinha: Boolean read Get__isset_CoResultadoTesteOrelhinha;
    property __isset_DataRealizacaoUSTransfontanela: Boolean read Get__isset_DataRealizacaoUSTransfontanela;
    property __isset_CoResultadoUsTransfontanela: Boolean read Get__isset_CoResultadoUsTransfontanela;
    property __isset_DataRealizacaoTomografiaComputadorizada: Boolean read Get__isset_DataRealizacaoTomografiaComputadorizada;
    property __isset_CoResultadoTomografiaComputadorizada: Boolean read Get__isset_CoResultadoTomografiaComputadorizada;
    property __isset_DataRealizacaoRessonanciaMagnetica: Boolean read Get__isset_DataRealizacaoRessonanciaMagnetica;
    property __isset_CoResultadoRessonanciaMagnetica: Boolean read Get__isset_CoResultadoRessonanciaMagnetica;
  end;

  TFichaComplementarZikaMicrocefaliaThriftImpl = class(TInterfacedObject, IBase, IFichaComplementarZikaMicrocefaliaThrift)
  private
    FHeaderTransport: IUnicaLotacaoHeaderThrift;
    FUuidFicha: string;
    FTpCdsOrigem: Integer;
    FTurno: Int64;
    FCnsCidadao: string;
    FCnsResponsavelFamiliar: string;
    FDataRealizacaoTesteOlhinho: Int64;
    FCoResultadoTesteOlhinho: Int64;
    FDataRealizacaoExameFundoOlho: Int64;
    FCoResultadoExameFundoOlho: Int64;
    FDataRealizacaoTesteOrelhinha: Int64;
    FCoResultadoTesteOrelhinha: Int64;
    FDataRealizacaoUSTransfontanela: Int64;
    FCoResultadoUsTransfontanela: Int64;
    FDataRealizacaoTomografiaComputadorizada: Int64;
    FCoResultadoTomografiaComputadorizada: Int64;
    FDataRealizacaoRessonanciaMagnetica: Int64;
    FCoResultadoRessonanciaMagnetica: Int64;
    
    F__isset_HeaderTransport: Boolean;
    F__isset_TpCdsOrigem: Boolean;
    F__isset_Turno: Boolean;
    F__isset_CnsCidadao: Boolean;
    F__isset_CnsResponsavelFamiliar: Boolean;
    F__isset_DataRealizacaoTesteOlhinho: Boolean;
    F__isset_CoResultadoTesteOlhinho: Boolean;
    F__isset_DataRealizacaoExameFundoOlho: Boolean;
    F__isset_CoResultadoExameFundoOlho: Boolean;
    F__isset_DataRealizacaoTesteOrelhinha: Boolean;
    F__isset_CoResultadoTesteOrelhinha: Boolean;
    F__isset_DataRealizacaoUSTransfontanela: Boolean;
    F__isset_CoResultadoUsTransfontanela: Boolean;
    F__isset_DataRealizacaoTomografiaComputadorizada: Boolean;
    F__isset_CoResultadoTomografiaComputadorizada: Boolean;
    F__isset_DataRealizacaoRessonanciaMagnetica: Boolean;
    F__isset_CoResultadoRessonanciaMagnetica: Boolean;
    
    function GetHeaderTransport: IUnicaLotacaoHeaderThrift;
    procedure SetHeaderTransport( const Value: IUnicaLotacaoHeaderThrift);
    function GetUuidFicha: string;
    procedure SetUuidFicha( const Value: string);
    function GetTpCdsOrigem: Integer;
    procedure SetTpCdsOrigem( const Value: Integer);
    function GetTurno: Int64;
    procedure SetTurno( const Value: Int64);
    function GetCnsCidadao: string;
    procedure SetCnsCidadao( const Value: string);
    function GetCnsResponsavelFamiliar: string;
    procedure SetCnsResponsavelFamiliar( const Value: string);
    function GetDataRealizacaoTesteOlhinho: Int64;
    procedure SetDataRealizacaoTesteOlhinho( const Value: Int64);
    function GetCoResultadoTesteOlhinho: Int64;
    procedure SetCoResultadoTesteOlhinho( const Value: Int64);
    function GetDataRealizacaoExameFundoOlho: Int64;
    procedure SetDataRealizacaoExameFundoOlho( const Value: Int64);
    function GetCoResultadoExameFundoOlho: Int64;
    procedure SetCoResultadoExameFundoOlho( const Value: Int64);
    function GetDataRealizacaoTesteOrelhinha: Int64;
    procedure SetDataRealizacaoTesteOrelhinha( const Value: Int64);
    function GetCoResultadoTesteOrelhinha: Int64;
    procedure SetCoResultadoTesteOrelhinha( const Value: Int64);
    function GetDataRealizacaoUSTransfontanela: Int64;
    procedure SetDataRealizacaoUSTransfontanela( const Value: Int64);
    function GetCoResultadoUsTransfontanela: Int64;
    procedure SetCoResultadoUsTransfontanela( const Value: Int64);
    function GetDataRealizacaoTomografiaComputadorizada: Int64;
    procedure SetDataRealizacaoTomografiaComputadorizada( const Value: Int64);
    function GetCoResultadoTomografiaComputadorizada: Int64;
    procedure SetCoResultadoTomografiaComputadorizada( const Value: Int64);
    function GetDataRealizacaoRessonanciaMagnetica: Int64;
    procedure SetDataRealizacaoRessonanciaMagnetica( const Value: Int64);
    function GetCoResultadoRessonanciaMagnetica: Int64;
    procedure SetCoResultadoRessonanciaMagnetica( const Value: Int64);

    function Get__isset_HeaderTransport: Boolean;
    function Get__isset_TpCdsOrigem: Boolean;
    function Get__isset_Turno: Boolean;
    function Get__isset_CnsCidadao: Boolean;
    function Get__isset_CnsResponsavelFamiliar: Boolean;
    function Get__isset_DataRealizacaoTesteOlhinho: Boolean;
    function Get__isset_CoResultadoTesteOlhinho: Boolean;
    function Get__isset_DataRealizacaoExameFundoOlho: Boolean;
    function Get__isset_CoResultadoExameFundoOlho: Boolean;
    function Get__isset_DataRealizacaoTesteOrelhinha: Boolean;
    function Get__isset_CoResultadoTesteOrelhinha: Boolean;
    function Get__isset_DataRealizacaoUSTransfontanela: Boolean;
    function Get__isset_CoResultadoUsTransfontanela: Boolean;
    function Get__isset_DataRealizacaoTomografiaComputadorizada: Boolean;
    function Get__isset_CoResultadoTomografiaComputadorizada: Boolean;
    function Get__isset_DataRealizacaoRessonanciaMagnetica: Boolean;
    function Get__isset_CoResultadoRessonanciaMagnetica: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property HeaderTransport: IUnicaLotacaoHeaderThrift read GetHeaderTransport write SetHeaderTransport;
    property UuidFicha: string read GetUuidFicha write SetUuidFicha;
    property TpCdsOrigem: Integer read GetTpCdsOrigem write SetTpCdsOrigem;
    property Turno: Int64 read GetTurno write SetTurno;
    property CnsCidadao: string read GetCnsCidadao write SetCnsCidadao;
    property CnsResponsavelFamiliar: string read GetCnsResponsavelFamiliar write SetCnsResponsavelFamiliar;
    property DataRealizacaoTesteOlhinho: Int64 read GetDataRealizacaoTesteOlhinho write SetDataRealizacaoTesteOlhinho;
    property CoResultadoTesteOlhinho: Int64 read GetCoResultadoTesteOlhinho write SetCoResultadoTesteOlhinho;
    property DataRealizacaoExameFundoOlho: Int64 read GetDataRealizacaoExameFundoOlho write SetDataRealizacaoExameFundoOlho;
    property CoResultadoExameFundoOlho: Int64 read GetCoResultadoExameFundoOlho write SetCoResultadoExameFundoOlho;
    property DataRealizacaoTesteOrelhinha: Int64 read GetDataRealizacaoTesteOrelhinha write SetDataRealizacaoTesteOrelhinha;
    property CoResultadoTesteOrelhinha: Int64 read GetCoResultadoTesteOrelhinha write SetCoResultadoTesteOrelhinha;
    property DataRealizacaoUSTransfontanela: Int64 read GetDataRealizacaoUSTransfontanela write SetDataRealizacaoUSTransfontanela;
    property CoResultadoUsTransfontanela: Int64 read GetCoResultadoUsTransfontanela write SetCoResultadoUsTransfontanela;
    property DataRealizacaoTomografiaComputadorizada: Int64 read GetDataRealizacaoTomografiaComputadorizada write SetDataRealizacaoTomografiaComputadorizada;
    property CoResultadoTomografiaComputadorizada: Int64 read GetCoResultadoTomografiaComputadorizada write SetCoResultadoTomografiaComputadorizada;
    property DataRealizacaoRessonanciaMagnetica: Int64 read GetDataRealizacaoRessonanciaMagnetica write SetDataRealizacaoRessonanciaMagnetica;
    property CoResultadoRessonanciaMagnetica: Int64 read GetCoResultadoRessonanciaMagnetica write SetCoResultadoRessonanciaMagnetica;

    // isset
    property __isset_HeaderTransport: Boolean read Get__isset_HeaderTransport;
    property __isset_TpCdsOrigem: Boolean read Get__isset_TpCdsOrigem;
    property __isset_Turno: Boolean read Get__isset_Turno;
    property __isset_CnsCidadao: Boolean read Get__isset_CnsCidadao;
    property __isset_CnsResponsavelFamiliar: Boolean read Get__isset_CnsResponsavelFamiliar;
    property __isset_DataRealizacaoTesteOlhinho: Boolean read Get__isset_DataRealizacaoTesteOlhinho;
    property __isset_CoResultadoTesteOlhinho: Boolean read Get__isset_CoResultadoTesteOlhinho;
    property __isset_DataRealizacaoExameFundoOlho: Boolean read Get__isset_DataRealizacaoExameFundoOlho;
    property __isset_CoResultadoExameFundoOlho: Boolean read Get__isset_CoResultadoExameFundoOlho;
    property __isset_DataRealizacaoTesteOrelhinha: Boolean read Get__isset_DataRealizacaoTesteOrelhinha;
    property __isset_CoResultadoTesteOrelhinha: Boolean read Get__isset_CoResultadoTesteOrelhinha;
    property __isset_DataRealizacaoUSTransfontanela: Boolean read Get__isset_DataRealizacaoUSTransfontanela;
    property __isset_CoResultadoUsTransfontanela: Boolean read Get__isset_CoResultadoUsTransfontanela;
    property __isset_DataRealizacaoTomografiaComputadorizada: Boolean read Get__isset_DataRealizacaoTomografiaComputadorizada;
    property __isset_CoResultadoTomografiaComputadorizada: Boolean read Get__isset_CoResultadoTomografiaComputadorizada;
    property __isset_DataRealizacaoRessonanciaMagnetica: Boolean read Get__isset_DataRealizacaoRessonanciaMagnetica;
    property __isset_CoResultadoRessonanciaMagnetica: Boolean read Get__isset_CoResultadoRessonanciaMagnetica;
  end;

implementation

constructor TFichaComplementarZikaMicrocefaliaThriftImpl.Create;
begin
  inherited;
end;

destructor TFichaComplementarZikaMicrocefaliaThriftImpl.Destroy;
begin
  inherited;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetHeaderTransport: IUnicaLotacaoHeaderThrift;
begin
  Result := FHeaderTransport;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetHeaderTransport( const Value: IUnicaLotacaoHeaderThrift);
begin
  F__isset_HeaderTransport := True;
  FHeaderTransport := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_HeaderTransport: Boolean;
begin
  Result := F__isset_HeaderTransport;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetUuidFicha: string;
begin
  Result := FUuidFicha;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetUuidFicha( const Value: string);
begin
  FUuidFicha := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetTpCdsOrigem: Integer;
begin
  Result := FTpCdsOrigem;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetTpCdsOrigem( const Value: Integer);
begin
  F__isset_TpCdsOrigem := True;
  FTpCdsOrigem := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_TpCdsOrigem: Boolean;
begin
  Result := F__isset_TpCdsOrigem;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetTurno: Int64;
begin
  Result := FTurno;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetTurno( const Value: Int64);
begin
  F__isset_Turno := True;
  FTurno := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_Turno: Boolean;
begin
  Result := F__isset_Turno;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetCnsCidadao: string;
begin
  Result := FCnsCidadao;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetCnsCidadao( const Value: string);
begin
  F__isset_CnsCidadao := True;
  FCnsCidadao := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_CnsCidadao: Boolean;
begin
  Result := F__isset_CnsCidadao;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetCnsResponsavelFamiliar: string;
begin
  Result := FCnsResponsavelFamiliar;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetCnsResponsavelFamiliar( const Value: string);
begin
  F__isset_CnsResponsavelFamiliar := True;
  FCnsResponsavelFamiliar := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_CnsResponsavelFamiliar: Boolean;
begin
  Result := F__isset_CnsResponsavelFamiliar;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetDataRealizacaoTesteOlhinho: Int64;
begin
  Result := FDataRealizacaoTesteOlhinho;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetDataRealizacaoTesteOlhinho( const Value: Int64);
begin
  F__isset_DataRealizacaoTesteOlhinho := True;
  FDataRealizacaoTesteOlhinho := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_DataRealizacaoTesteOlhinho: Boolean;
begin
  Result := F__isset_DataRealizacaoTesteOlhinho;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetCoResultadoTesteOlhinho: Int64;
begin
  Result := FCoResultadoTesteOlhinho;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetCoResultadoTesteOlhinho( const Value: Int64);
begin
  F__isset_CoResultadoTesteOlhinho := True;
  FCoResultadoTesteOlhinho := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_CoResultadoTesteOlhinho: Boolean;
begin
  Result := F__isset_CoResultadoTesteOlhinho;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetDataRealizacaoExameFundoOlho: Int64;
begin
  Result := FDataRealizacaoExameFundoOlho;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetDataRealizacaoExameFundoOlho( const Value: Int64);
begin
  F__isset_DataRealizacaoExameFundoOlho := True;
  FDataRealizacaoExameFundoOlho := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_DataRealizacaoExameFundoOlho: Boolean;
begin
  Result := F__isset_DataRealizacaoExameFundoOlho;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetCoResultadoExameFundoOlho: Int64;
begin
  Result := FCoResultadoExameFundoOlho;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetCoResultadoExameFundoOlho( const Value: Int64);
begin
  F__isset_CoResultadoExameFundoOlho := True;
  FCoResultadoExameFundoOlho := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_CoResultadoExameFundoOlho: Boolean;
begin
  Result := F__isset_CoResultadoExameFundoOlho;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetDataRealizacaoTesteOrelhinha: Int64;
begin
  Result := FDataRealizacaoTesteOrelhinha;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetDataRealizacaoTesteOrelhinha( const Value: Int64);
begin
  F__isset_DataRealizacaoTesteOrelhinha := True;
  FDataRealizacaoTesteOrelhinha := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_DataRealizacaoTesteOrelhinha: Boolean;
begin
  Result := F__isset_DataRealizacaoTesteOrelhinha;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetCoResultadoTesteOrelhinha: Int64;
begin
  Result := FCoResultadoTesteOrelhinha;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetCoResultadoTesteOrelhinha( const Value: Int64);
begin
  F__isset_CoResultadoTesteOrelhinha := True;
  FCoResultadoTesteOrelhinha := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_CoResultadoTesteOrelhinha: Boolean;
begin
  Result := F__isset_CoResultadoTesteOrelhinha;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetDataRealizacaoUSTransfontanela: Int64;
begin
  Result := FDataRealizacaoUSTransfontanela;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetDataRealizacaoUSTransfontanela( const Value: Int64);
begin
  F__isset_DataRealizacaoUSTransfontanela := True;
  FDataRealizacaoUSTransfontanela := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_DataRealizacaoUSTransfontanela: Boolean;
begin
  Result := F__isset_DataRealizacaoUSTransfontanela;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetCoResultadoUsTransfontanela: Int64;
begin
  Result := FCoResultadoUsTransfontanela;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetCoResultadoUsTransfontanela( const Value: Int64);
begin
  F__isset_CoResultadoUsTransfontanela := True;
  FCoResultadoUsTransfontanela := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_CoResultadoUsTransfontanela: Boolean;
begin
  Result := F__isset_CoResultadoUsTransfontanela;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetDataRealizacaoTomografiaComputadorizada: Int64;
begin
  Result := FDataRealizacaoTomografiaComputadorizada;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetDataRealizacaoTomografiaComputadorizada( const Value: Int64);
begin
  F__isset_DataRealizacaoTomografiaComputadorizada := True;
  FDataRealizacaoTomografiaComputadorizada := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_DataRealizacaoTomografiaComputadorizada: Boolean;
begin
  Result := F__isset_DataRealizacaoTomografiaComputadorizada;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetCoResultadoTomografiaComputadorizada: Int64;
begin
  Result := FCoResultadoTomografiaComputadorizada;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetCoResultadoTomografiaComputadorizada( const Value: Int64);
begin
  F__isset_CoResultadoTomografiaComputadorizada := True;
  FCoResultadoTomografiaComputadorizada := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_CoResultadoTomografiaComputadorizada: Boolean;
begin
  Result := F__isset_CoResultadoTomografiaComputadorizada;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetDataRealizacaoRessonanciaMagnetica: Int64;
begin
  Result := FDataRealizacaoRessonanciaMagnetica;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetDataRealizacaoRessonanciaMagnetica( const Value: Int64);
begin
  F__isset_DataRealizacaoRessonanciaMagnetica := True;
  FDataRealizacaoRessonanciaMagnetica := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_DataRealizacaoRessonanciaMagnetica: Boolean;
begin
  Result := F__isset_DataRealizacaoRessonanciaMagnetica;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.GetCoResultadoRessonanciaMagnetica: Int64;
begin
  Result := FCoResultadoRessonanciaMagnetica;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.SetCoResultadoRessonanciaMagnetica( const Value: Int64);
begin
  F__isset_CoResultadoRessonanciaMagnetica := True;
  FCoResultadoRessonanciaMagnetica := Value;
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.Get__isset_CoResultadoRessonanciaMagnetica: Boolean;
begin
  Result := F__isset_CoResultadoRessonanciaMagnetica;
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  _req_isset_UuidFicha : Boolean;

begin
  _req_isset_UuidFicha := FALSE;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.Struct) then
          begin
            HeaderTransport := TUnicaLotacaoHeaderThriftImpl.Create;
            HeaderTransport.Read(iprot);
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.String_) then
          begin
            UuidFicha := iprot.ReadString();
            _req_isset_UuidFicha := TRUE;
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.I32) then
          begin
            TpCdsOrigem := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.I64) then
          begin
            Turno := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        5: begin
          if (field_.Type_ = TType.String_) then
          begin
            CnsCidadao := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        6: begin
          if (field_.Type_ = TType.String_) then
          begin
            CnsResponsavelFamiliar := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        7: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataRealizacaoTesteOlhinho := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        8: begin
          if (field_.Type_ = TType.I64) then
          begin
            CoResultadoTesteOlhinho := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        9: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataRealizacaoExameFundoOlho := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        10: begin
          if (field_.Type_ = TType.I64) then
          begin
            CoResultadoExameFundoOlho := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        11: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataRealizacaoTesteOrelhinha := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        12: begin
          if (field_.Type_ = TType.I64) then
          begin
            CoResultadoTesteOrelhinha := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        13: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataRealizacaoUSTransfontanela := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        14: begin
          if (field_.Type_ = TType.I64) then
          begin
            CoResultadoUsTransfontanela := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        15: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataRealizacaoTomografiaComputadorizada := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        16: begin
          if (field_.Type_ = TType.I64) then
          begin
            CoResultadoTomografiaComputadorizada := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        17: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataRealizacaoRessonanciaMagnetica := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        18: begin
          if (field_.Type_ = TType.I64) then
          begin
            CoResultadoRessonanciaMagnetica := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
  if not _req_isset_UuidFicha
  then raise TProtocolException.Create( TProtocolException.INVALID_DATA, 'UuidFicha');
end;

procedure TFichaComplementarZikaMicrocefaliaThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('FichaComplementarZikaMicrocefaliaThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (HeaderTransport <> nil) and __isset_HeaderTransport then
  begin
    field_.Name := 'headerTransport';
    field_.Type_  := TType.Struct;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    HeaderTransport.Write(oprot);
    oprot.WriteFieldEnd();
  end;
  // required field
  field_.Name := 'uuidFicha';
  field_.Type_  := TType.String_;
  field_.ID := 2;
  oprot.WriteFieldBegin(field_);
  oprot.WriteString(UuidFicha);
  oprot.WriteFieldEnd();
  if (__isset_TpCdsOrigem) then
  begin
    field_.Name := 'tpCdsOrigem';
    field_.Type_  := TType.I32;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(TpCdsOrigem);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Turno) then
  begin
    field_.Name := 'turno';
    field_.Type_  := TType.I64;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(Turno);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CnsCidadao) then
  begin
    field_.Name := 'cnsCidadao';
    field_.Type_  := TType.String_;
    field_.ID := 5;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CnsCidadao);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CnsResponsavelFamiliar) then
  begin
    field_.Name := 'cnsResponsavelFamiliar';
    field_.Type_  := TType.String_;
    field_.ID := 6;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CnsResponsavelFamiliar);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataRealizacaoTesteOlhinho) then
  begin
    field_.Name := 'dataRealizacaoTesteOlhinho';
    field_.Type_  := TType.I64;
    field_.ID := 7;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataRealizacaoTesteOlhinho);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CoResultadoTesteOlhinho) then
  begin
    field_.Name := 'coResultadoTesteOlhinho';
    field_.Type_  := TType.I64;
    field_.ID := 8;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(CoResultadoTesteOlhinho);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataRealizacaoExameFundoOlho) then
  begin
    field_.Name := 'dataRealizacaoExameFundoOlho';
    field_.Type_  := TType.I64;
    field_.ID := 9;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataRealizacaoExameFundoOlho);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CoResultadoExameFundoOlho) then
  begin
    field_.Name := 'coResultadoExameFundoOlho';
    field_.Type_  := TType.I64;
    field_.ID := 10;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(CoResultadoExameFundoOlho);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataRealizacaoTesteOrelhinha) then
  begin
    field_.Name := 'dataRealizacaoTesteOrelhinha';
    field_.Type_  := TType.I64;
    field_.ID := 11;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataRealizacaoTesteOrelhinha);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CoResultadoTesteOrelhinha) then
  begin
    field_.Name := 'coResultadoTesteOrelhinha';
    field_.Type_  := TType.I64;
    field_.ID := 12;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(CoResultadoTesteOrelhinha);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataRealizacaoUSTransfontanela) then
  begin
    field_.Name := 'dataRealizacaoUSTransfontanela';
    field_.Type_  := TType.I64;
    field_.ID := 13;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataRealizacaoUSTransfontanela);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CoResultadoUsTransfontanela) then
  begin
    field_.Name := 'coResultadoUsTransfontanela';
    field_.Type_  := TType.I64;
    field_.ID := 14;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(CoResultadoUsTransfontanela);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataRealizacaoTomografiaComputadorizada) then
  begin
    field_.Name := 'dataRealizacaoTomografiaComputadorizada';
    field_.Type_  := TType.I64;
    field_.ID := 15;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataRealizacaoTomografiaComputadorizada);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CoResultadoTomografiaComputadorizada) then
  begin
    field_.Name := 'coResultadoTomografiaComputadorizada';
    field_.Type_  := TType.I64;
    field_.ID := 16;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(CoResultadoTomografiaComputadorizada);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataRealizacaoRessonanciaMagnetica) then
  begin
    field_.Name := 'dataRealizacaoRessonanciaMagnetica';
    field_.Type_  := TType.I64;
    field_.ID := 17;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataRealizacaoRessonanciaMagnetica);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CoResultadoRessonanciaMagnetica) then
  begin
    field_.Name := 'coResultadoRessonanciaMagnetica';
    field_.Type_  := TType.I64;
    field_.ID := 18;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(CoResultadoRessonanciaMagnetica);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TFichaComplementarZikaMicrocefaliaThriftImpl.ToString: string;
var
  _sb0 : TThriftStringBuilder;
  _first1 : Boolean;
begin
  _sb0 := TThriftStringBuilder.Create('(');
  try
    _first1 := TRUE;
    if (HeaderTransport <> nil) and __isset_HeaderTransport then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('HeaderTransport: ');
      if (HeaderTransport = nil) then _sb0.Append('<null>') else _sb0.Append(HeaderTransport.ToString());
    end;
    if not _first1 then _sb0.Append(',');
    _sb0.Append('UuidFicha: ');
    _sb0.Append(UuidFicha);
    if (__isset_TpCdsOrigem) then begin
      _sb0.Append(', TpCdsOrigem: ');
      _sb0.Append(TpCdsOrigem);
    end;
    if (__isset_Turno) then begin
      _sb0.Append(', Turno: ');
      _sb0.Append(Turno);
    end;
    if (__isset_CnsCidadao) then begin
      _sb0.Append(', CnsCidadao: ');
      _sb0.Append(CnsCidadao);
    end;
    if (__isset_CnsResponsavelFamiliar) then begin
      _sb0.Append(', CnsResponsavelFamiliar: ');
      _sb0.Append(CnsResponsavelFamiliar);
    end;
    if (__isset_DataRealizacaoTesteOlhinho) then begin
      _sb0.Append(', DataRealizacaoTesteOlhinho: ');
      _sb0.Append(DataRealizacaoTesteOlhinho);
    end;
    if (__isset_CoResultadoTesteOlhinho) then begin
      _sb0.Append(', CoResultadoTesteOlhinho: ');
      _sb0.Append(CoResultadoTesteOlhinho);
    end;
    if (__isset_DataRealizacaoExameFundoOlho) then begin
      _sb0.Append(', DataRealizacaoExameFundoOlho: ');
      _sb0.Append(DataRealizacaoExameFundoOlho);
    end;
    if (__isset_CoResultadoExameFundoOlho) then begin
      _sb0.Append(', CoResultadoExameFundoOlho: ');
      _sb0.Append(CoResultadoExameFundoOlho);
    end;
    if (__isset_DataRealizacaoTesteOrelhinha) then begin
      _sb0.Append(', DataRealizacaoTesteOrelhinha: ');
      _sb0.Append(DataRealizacaoTesteOrelhinha);
    end;
    if (__isset_CoResultadoTesteOrelhinha) then begin
      _sb0.Append(', CoResultadoTesteOrelhinha: ');
      _sb0.Append(CoResultadoTesteOrelhinha);
    end;
    if (__isset_DataRealizacaoUSTransfontanela) then begin
      _sb0.Append(', DataRealizacaoUSTransfontanela: ');
      _sb0.Append(DataRealizacaoUSTransfontanela);
    end;
    if (__isset_CoResultadoUsTransfontanela) then begin
      _sb0.Append(', CoResultadoUsTransfontanela: ');
      _sb0.Append(CoResultadoUsTransfontanela);
    end;
    if (__isset_DataRealizacaoTomografiaComputadorizada) then begin
      _sb0.Append(', DataRealizacaoTomografiaComputadorizada: ');
      _sb0.Append(DataRealizacaoTomografiaComputadorizada);
    end;
    if (__isset_CoResultadoTomografiaComputadorizada) then begin
      _sb0.Append(', CoResultadoTomografiaComputadorizada: ');
      _sb0.Append(CoResultadoTomografiaComputadorizada);
    end;
    if (__isset_DataRealizacaoRessonanciaMagnetica) then begin
      _sb0.Append(', DataRealizacaoRessonanciaMagnetica: ');
      _sb0.Append(DataRealizacaoRessonanciaMagnetica);
    end;
    if (__isset_CoResultadoRessonanciaMagnetica) then begin
      _sb0.Append(', CoResultadoRessonanciaMagnetica: ');
      _sb0.Append(CoResultadoRessonanciaMagnetica);
    end;
    _sb0.Append(')');
    Result := _sb0.ToString;
    if _first1 then {prevent warning};
  finally
    _sb0.Free;
  end;
end;


initialization

finalization


end.
