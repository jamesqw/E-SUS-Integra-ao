(**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *)

unit br.gov.saude.esusab.ras.common;

interface

uses
  Classes,
  SysUtils,
  Generics.Collections,
  Thrift,
  Thrift.Utils,
  Thrift.Collections,
  Thrift.Protocol,
  Thrift.Transport;

const
  cbr_gov_saude_esusab_ras_common_Option_AnsiStr_Binary = False;
  cbr_gov_saude_esusab_ras_common_Option_Register_Types = False;
  cbr_gov_saude_esusab_ras_common_Option_ConstPrefix    = False;
  cbr_gov_saude_esusab_ras_common_Option_Events         = False;
  cbr_gov_saude_esusab_ras_common_Option_XmlDoc         = False;

type
  ILotacaoHeaderThrift = interface;
  IUnicaLotacaoHeaderThrift = interface;
  IVariasLotacoesHeaderThrift = interface;
  IEnderecoLocalPermanenciaThrift = interface;

  ILotacaoHeaderThrift = interface(IBase)
    function GetProfissionalCNS: string;
    procedure SetProfissionalCNS( const Value: string);
    function GetCboCodigo_2002: string;
    procedure SetCboCodigo_2002( const Value: string);
    function GetCnes: string;
    procedure SetCnes( const Value: string);
    function GetIne: string;
    procedure SetIne( const Value: string);

    property ProfissionalCNS: string read GetProfissionalCNS write SetProfissionalCNS;
    property CboCodigo_2002: string read GetCboCodigo_2002 write SetCboCodigo_2002;
    property Cnes: string read GetCnes write SetCnes;
    property Ine: string read GetIne write SetIne;

    function Get__isset_ProfissionalCNS: Boolean;
    function Get__isset_CboCodigo_2002: Boolean;
    function Get__isset_Cnes: Boolean;
    function Get__isset_Ine: Boolean;

    property __isset_ProfissionalCNS: Boolean read Get__isset_ProfissionalCNS;
    property __isset_CboCodigo_2002: Boolean read Get__isset_CboCodigo_2002;
    property __isset_Cnes: Boolean read Get__isset_Cnes;
    property __isset_Ine: Boolean read Get__isset_Ine;
  end;

  TLotacaoHeaderThriftImpl = class(TInterfacedObject, IBase, ILotacaoHeaderThrift)
  private
    FProfissionalCNS: string;
    FCboCodigo_2002: string;
    FCnes: string;
    FIne: string;
    
    F__isset_ProfissionalCNS: Boolean;
    F__isset_CboCodigo_2002: Boolean;
    F__isset_Cnes: Boolean;
    F__isset_Ine: Boolean;
    
    function GetProfissionalCNS: string;
    procedure SetProfissionalCNS( const Value: string);
    function GetCboCodigo_2002: string;
    procedure SetCboCodigo_2002( const Value: string);
    function GetCnes: string;
    procedure SetCnes( const Value: string);
    function GetIne: string;
    procedure SetIne( const Value: string);

    function Get__isset_ProfissionalCNS: Boolean;
    function Get__isset_CboCodigo_2002: Boolean;
    function Get__isset_Cnes: Boolean;
    function Get__isset_Ine: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property ProfissionalCNS: string read GetProfissionalCNS write SetProfissionalCNS;
    property CboCodigo_2002: string read GetCboCodigo_2002 write SetCboCodigo_2002;
    property Cnes: string read GetCnes write SetCnes;
    property Ine: string read GetIne write SetIne;

    // isset
    property __isset_ProfissionalCNS: Boolean read Get__isset_ProfissionalCNS;
    property __isset_CboCodigo_2002: Boolean read Get__isset_CboCodigo_2002;
    property __isset_Cnes: Boolean read Get__isset_Cnes;
    property __isset_Ine: Boolean read Get__isset_Ine;
  end;

  IUnicaLotacaoHeaderThrift = interface(IBase)
    function GetProfissionalCNS: string;
    procedure SetProfissionalCNS( const Value: string);
    function GetCboCodigo_2002: string;
    procedure SetCboCodigo_2002( const Value: string);
    function GetCnes: string;
    procedure SetCnes( const Value: string);
    function GetIne: string;
    procedure SetIne( const Value: string);
    function GetDataAtendimento: Int64;
    procedure SetDataAtendimento( const Value: Int64);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);

    property ProfissionalCNS: string read GetProfissionalCNS write SetProfissionalCNS;
    property CboCodigo_2002: string read GetCboCodigo_2002 write SetCboCodigo_2002;
    property Cnes: string read GetCnes write SetCnes;
    property Ine: string read GetIne write SetIne;
    property DataAtendimento: Int64 read GetDataAtendimento write SetDataAtendimento;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;

    function Get__isset_ProfissionalCNS: Boolean;
    function Get__isset_CboCodigo_2002: Boolean;
    function Get__isset_Cnes: Boolean;
    function Get__isset_Ine: Boolean;
    function Get__isset_DataAtendimento: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;

    property __isset_ProfissionalCNS: Boolean read Get__isset_ProfissionalCNS;
    property __isset_CboCodigo_2002: Boolean read Get__isset_CboCodigo_2002;
    property __isset_Cnes: Boolean read Get__isset_Cnes;
    property __isset_Ine: Boolean read Get__isset_Ine;
    property __isset_DataAtendimento: Boolean read Get__isset_DataAtendimento;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
  end;

  TUnicaLotacaoHeaderThriftImpl = class(TInterfacedObject, IBase, IUnicaLotacaoHeaderThrift)
  private
    FProfissionalCNS: string;
    FCboCodigo_2002: string;
    FCnes: string;
    FIne: string;
    FDataAtendimento: Int64;
    FCodigoIbgeMunicipio: string;
    
    F__isset_ProfissionalCNS: Boolean;
    F__isset_CboCodigo_2002: Boolean;
    F__isset_Cnes: Boolean;
    F__isset_Ine: Boolean;
    F__isset_DataAtendimento: Boolean;
    F__isset_CodigoIbgeMunicipio: Boolean;
    
    function GetProfissionalCNS: string;
    procedure SetProfissionalCNS( const Value: string);
    function GetCboCodigo_2002: string;
    procedure SetCboCodigo_2002( const Value: string);
    function GetCnes: string;
    procedure SetCnes( const Value: string);
    function GetIne: string;
    procedure SetIne( const Value: string);
    function GetDataAtendimento: Int64;
    procedure SetDataAtendimento( const Value: Int64);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);

    function Get__isset_ProfissionalCNS: Boolean;
    function Get__isset_CboCodigo_2002: Boolean;
    function Get__isset_Cnes: Boolean;
    function Get__isset_Ine: Boolean;
    function Get__isset_DataAtendimento: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property ProfissionalCNS: string read GetProfissionalCNS write SetProfissionalCNS;
    property CboCodigo_2002: string read GetCboCodigo_2002 write SetCboCodigo_2002;
    property Cnes: string read GetCnes write SetCnes;
    property Ine: string read GetIne write SetIne;
    property DataAtendimento: Int64 read GetDataAtendimento write SetDataAtendimento;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;

    // isset
    property __isset_ProfissionalCNS: Boolean read Get__isset_ProfissionalCNS;
    property __isset_CboCodigo_2002: Boolean read Get__isset_CboCodigo_2002;
    property __isset_Cnes: Boolean read Get__isset_Cnes;
    property __isset_Ine: Boolean read Get__isset_Ine;
    property __isset_DataAtendimento: Boolean read Get__isset_DataAtendimento;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
  end;

  IVariasLotacoesHeaderThrift = interface(IBase)
    function GetLotacaoFormPrincipal: ILotacaoHeaderThrift;
    procedure SetLotacaoFormPrincipal( const Value: ILotacaoHeaderThrift);
    function GetLotacaoFormAtendimentoCompartilhado: ILotacaoHeaderThrift;
    procedure SetLotacaoFormAtendimentoCompartilhado( const Value: ILotacaoHeaderThrift);
    function GetDataAtendimento: Int64;
    procedure SetDataAtendimento( const Value: Int64);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);

    property LotacaoFormPrincipal: ILotacaoHeaderThrift read GetLotacaoFormPrincipal write SetLotacaoFormPrincipal;
    property LotacaoFormAtendimentoCompartilhado: ILotacaoHeaderThrift read GetLotacaoFormAtendimentoCompartilhado write SetLotacaoFormAtendimentoCompartilhado;
    property DataAtendimento: Int64 read GetDataAtendimento write SetDataAtendimento;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;

    function Get__isset_LotacaoFormPrincipal: Boolean;
    function Get__isset_LotacaoFormAtendimentoCompartilhado: Boolean;
    function Get__isset_DataAtendimento: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;

    property __isset_LotacaoFormPrincipal: Boolean read Get__isset_LotacaoFormPrincipal;
    property __isset_LotacaoFormAtendimentoCompartilhado: Boolean read Get__isset_LotacaoFormAtendimentoCompartilhado;
    property __isset_DataAtendimento: Boolean read Get__isset_DataAtendimento;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
  end;

  TVariasLotacoesHeaderThriftImpl = class(TInterfacedObject, IBase, IVariasLotacoesHeaderThrift)
  private
    FLotacaoFormPrincipal: ILotacaoHeaderThrift;
    FLotacaoFormAtendimentoCompartilhado: ILotacaoHeaderThrift;
    FDataAtendimento: Int64;
    FCodigoIbgeMunicipio: string;
    
    F__isset_LotacaoFormPrincipal: Boolean;
    F__isset_LotacaoFormAtendimentoCompartilhado: Boolean;
    F__isset_DataAtendimento: Boolean;
    F__isset_CodigoIbgeMunicipio: Boolean;
    
    function GetLotacaoFormPrincipal: ILotacaoHeaderThrift;
    procedure SetLotacaoFormPrincipal( const Value: ILotacaoHeaderThrift);
    function GetLotacaoFormAtendimentoCompartilhado: ILotacaoHeaderThrift;
    procedure SetLotacaoFormAtendimentoCompartilhado( const Value: ILotacaoHeaderThrift);
    function GetDataAtendimento: Int64;
    procedure SetDataAtendimento( const Value: Int64);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);

    function Get__isset_LotacaoFormPrincipal: Boolean;
    function Get__isset_LotacaoFormAtendimentoCompartilhado: Boolean;
    function Get__isset_DataAtendimento: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property LotacaoFormPrincipal: ILotacaoHeaderThrift read GetLotacaoFormPrincipal write SetLotacaoFormPrincipal;
    property LotacaoFormAtendimentoCompartilhado: ILotacaoHeaderThrift read GetLotacaoFormAtendimentoCompartilhado write SetLotacaoFormAtendimentoCompartilhado;
    property DataAtendimento: Int64 read GetDataAtendimento write SetDataAtendimento;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;

    // isset
    property __isset_LotacaoFormPrincipal: Boolean read Get__isset_LotacaoFormPrincipal;
    property __isset_LotacaoFormAtendimentoCompartilhado: Boolean read Get__isset_LotacaoFormAtendimentoCompartilhado;
    property __isset_DataAtendimento: Boolean read Get__isset_DataAtendimento;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
  end;

  IEnderecoLocalPermanenciaThrift = interface(IBase)
    function GetBairro: string;
    procedure SetBairro( const Value: string);
    function GetCep: string;
    procedure SetCep( const Value: string);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);
    function GetComplemento: string;
    procedure SetComplemento( const Value: string);
    function GetNomeLogradouro: string;
    procedure SetNomeLogradouro( const Value: string);
    function GetNumero: string;
    procedure SetNumero( const Value: string);
    function GetNumeroDneUf: string;
    procedure SetNumeroDneUf( const Value: string);
    function GetTelefoneContato: string;
    procedure SetTelefoneContato( const Value: string);
    function GetTelefoneResidencia: string;
    procedure SetTelefoneResidencia( const Value: string);
    function GetTipoLogradouroNumeroDne: string;
    procedure SetTipoLogradouroNumeroDne( const Value: string);
    function GetStSemNumero: Boolean;
    procedure SetStSemNumero( const Value: Boolean);
    function GetPontoReferencia: string;
    procedure SetPontoReferencia( const Value: string);
    function GetMicroArea: string;
    procedure SetMicroArea( const Value: string);
    function GetStForaArea: Boolean;
    procedure SetStForaArea( const Value: Boolean);

    property Bairro: string read GetBairro write SetBairro;
    property Cep: string read GetCep write SetCep;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;
    property Complemento: string read GetComplemento write SetComplemento;
    property NomeLogradouro: string read GetNomeLogradouro write SetNomeLogradouro;
    property Numero: string read GetNumero write SetNumero;
    property NumeroDneUf: string read GetNumeroDneUf write SetNumeroDneUf;
    property TelefoneContato: string read GetTelefoneContato write SetTelefoneContato;
    property TelefoneResidencia: string read GetTelefoneResidencia write SetTelefoneResidencia;
    property TipoLogradouroNumeroDne: string read GetTipoLogradouroNumeroDne write SetTipoLogradouroNumeroDne;
    property StSemNumero: Boolean read GetStSemNumero write SetStSemNumero;
    property PontoReferencia: string read GetPontoReferencia write SetPontoReferencia;
    property MicroArea: string read GetMicroArea write SetMicroArea;
    property StForaArea: Boolean read GetStForaArea write SetStForaArea;

    function Get__isset_Bairro: Boolean;
    function Get__isset_Cep: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;
    function Get__isset_Complemento: Boolean;
    function Get__isset_NomeLogradouro: Boolean;
    function Get__isset_Numero: Boolean;
    function Get__isset_NumeroDneUf: Boolean;
    function Get__isset_TelefoneContato: Boolean;
    function Get__isset_TelefoneResidencia: Boolean;
    function Get__isset_TipoLogradouroNumeroDne: Boolean;
    function Get__isset_StSemNumero: Boolean;
    function Get__isset_PontoReferencia: Boolean;
    function Get__isset_MicroArea: Boolean;
    function Get__isset_StForaArea: Boolean;

    property __isset_Bairro: Boolean read Get__isset_Bairro;
    property __isset_Cep: Boolean read Get__isset_Cep;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
    property __isset_Complemento: Boolean read Get__isset_Complemento;
    property __isset_NomeLogradouro: Boolean read Get__isset_NomeLogradouro;
    property __isset_Numero: Boolean read Get__isset_Numero;
    property __isset_NumeroDneUf: Boolean read Get__isset_NumeroDneUf;
    property __isset_TelefoneContato: Boolean read Get__isset_TelefoneContato;
    property __isset_TelefoneResidencia: Boolean read Get__isset_TelefoneResidencia;
    property __isset_TipoLogradouroNumeroDne: Boolean read Get__isset_TipoLogradouroNumeroDne;
    property __isset_StSemNumero: Boolean read Get__isset_StSemNumero;
    property __isset_PontoReferencia: Boolean read Get__isset_PontoReferencia;
    property __isset_MicroArea: Boolean read Get__isset_MicroArea;
    property __isset_StForaArea: Boolean read Get__isset_StForaArea;
  end;

  TEnderecoLocalPermanenciaThriftImpl = class(TInterfacedObject, IBase, IEnderecoLocalPermanenciaThrift)
  private
    FBairro: string;
    FCep: string;
    FCodigoIbgeMunicipio: string;
    FComplemento: string;
    FNomeLogradouro: string;
    FNumero: string;
    FNumeroDneUf: string;
    FTelefoneContato: string;
    FTelefoneResidencia: string;
    FTipoLogradouroNumeroDne: string;
    FStSemNumero: Boolean;
    FPontoReferencia: string;
    FMicroArea: string;
    FStForaArea: Boolean;
    
    F__isset_Bairro: Boolean;
    F__isset_Cep: Boolean;
    F__isset_CodigoIbgeMunicipio: Boolean;
    F__isset_Complemento: Boolean;
    F__isset_NomeLogradouro: Boolean;
    F__isset_Numero: Boolean;
    F__isset_NumeroDneUf: Boolean;
    F__isset_TelefoneContato: Boolean;
    F__isset_TelefoneResidencia: Boolean;
    F__isset_TipoLogradouroNumeroDne: Boolean;
    F__isset_StSemNumero: Boolean;
    F__isset_PontoReferencia: Boolean;
    F__isset_MicroArea: Boolean;
    F__isset_StForaArea: Boolean;
    
    function GetBairro: string;
    procedure SetBairro( const Value: string);
    function GetCep: string;
    procedure SetCep( const Value: string);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);
    function GetComplemento: string;
    procedure SetComplemento( const Value: string);
    function GetNomeLogradouro: string;
    procedure SetNomeLogradouro( const Value: string);
    function GetNumero: string;
    procedure SetNumero( const Value: string);
    function GetNumeroDneUf: string;
    procedure SetNumeroDneUf( const Value: string);
    function GetTelefoneContato: string;
    procedure SetTelefoneContato( const Value: string);
    function GetTelefoneResidencia: string;
    procedure SetTelefoneResidencia( const Value: string);
    function GetTipoLogradouroNumeroDne: string;
    procedure SetTipoLogradouroNumeroDne( const Value: string);
    function GetStSemNumero: Boolean;
    procedure SetStSemNumero( const Value: Boolean);
    function GetPontoReferencia: string;
    procedure SetPontoReferencia( const Value: string);
    function GetMicroArea: string;
    procedure SetMicroArea( const Value: string);
    function GetStForaArea: Boolean;
    procedure SetStForaArea( const Value: Boolean);

    function Get__isset_Bairro: Boolean;
    function Get__isset_Cep: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;
    function Get__isset_Complemento: Boolean;
    function Get__isset_NomeLogradouro: Boolean;
    function Get__isset_Numero: Boolean;
    function Get__isset_NumeroDneUf: Boolean;
    function Get__isset_TelefoneContato: Boolean;
    function Get__isset_TelefoneResidencia: Boolean;
    function Get__isset_TipoLogradouroNumeroDne: Boolean;
    function Get__isset_StSemNumero: Boolean;
    function Get__isset_PontoReferencia: Boolean;
    function Get__isset_MicroArea: Boolean;
    function Get__isset_StForaArea: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property Bairro: string read GetBairro write SetBairro;
    property Cep: string read GetCep write SetCep;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;
    property Complemento: string read GetComplemento write SetComplemento;
    property NomeLogradouro: string read GetNomeLogradouro write SetNomeLogradouro;
    property Numero: string read GetNumero write SetNumero;
    property NumeroDneUf: string read GetNumeroDneUf write SetNumeroDneUf;
    property TelefoneContato: string read GetTelefoneContato write SetTelefoneContato;
    property TelefoneResidencia: string read GetTelefoneResidencia write SetTelefoneResidencia;
    property TipoLogradouroNumeroDne: string read GetTipoLogradouroNumeroDne write SetTipoLogradouroNumeroDne;
    property StSemNumero: Boolean read GetStSemNumero write SetStSemNumero;
    property PontoReferencia: string read GetPontoReferencia write SetPontoReferencia;
    property MicroArea: string read GetMicroArea write SetMicroArea;
    property StForaArea: Boolean read GetStForaArea write SetStForaArea;

    // isset
    property __isset_Bairro: Boolean read Get__isset_Bairro;
    property __isset_Cep: Boolean read Get__isset_Cep;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
    property __isset_Complemento: Boolean read Get__isset_Complemento;
    property __isset_NomeLogradouro: Boolean read Get__isset_NomeLogradouro;
    property __isset_Numero: Boolean read Get__isset_Numero;
    property __isset_NumeroDneUf: Boolean read Get__isset_NumeroDneUf;
    property __isset_TelefoneContato: Boolean read Get__isset_TelefoneContato;
    property __isset_TelefoneResidencia: Boolean read Get__isset_TelefoneResidencia;
    property __isset_TipoLogradouroNumeroDne: Boolean read Get__isset_TipoLogradouroNumeroDne;
    property __isset_StSemNumero: Boolean read Get__isset_StSemNumero;
    property __isset_PontoReferencia: Boolean read Get__isset_PontoReferencia;
    property __isset_MicroArea: Boolean read Get__isset_MicroArea;
    property __isset_StForaArea: Boolean read Get__isset_StForaArea;
  end;

implementation

constructor TLotacaoHeaderThriftImpl.Create;
begin
  inherited;
end;

destructor TLotacaoHeaderThriftImpl.Destroy;
begin
  inherited;
end;

function TLotacaoHeaderThriftImpl.GetProfissionalCNS: string;
begin
  Result := FProfissionalCNS;
end;

procedure TLotacaoHeaderThriftImpl.SetProfissionalCNS( const Value: string);
begin
  F__isset_ProfissionalCNS := True;
  FProfissionalCNS := Value;
end;

function TLotacaoHeaderThriftImpl.Get__isset_ProfissionalCNS: Boolean;
begin
  Result := F__isset_ProfissionalCNS;
end;

function TLotacaoHeaderThriftImpl.GetCboCodigo_2002: string;
begin
  Result := FCboCodigo_2002;
end;

procedure TLotacaoHeaderThriftImpl.SetCboCodigo_2002( const Value: string);
begin
  F__isset_CboCodigo_2002 := True;
  FCboCodigo_2002 := Value;
end;

function TLotacaoHeaderThriftImpl.Get__isset_CboCodigo_2002: Boolean;
begin
  Result := F__isset_CboCodigo_2002;
end;

function TLotacaoHeaderThriftImpl.GetCnes: string;
begin
  Result := FCnes;
end;

procedure TLotacaoHeaderThriftImpl.SetCnes( const Value: string);
begin
  F__isset_Cnes := True;
  FCnes := Value;
end;

function TLotacaoHeaderThriftImpl.Get__isset_Cnes: Boolean;
begin
  Result := F__isset_Cnes;
end;

function TLotacaoHeaderThriftImpl.GetIne: string;
begin
  Result := FIne;
end;

procedure TLotacaoHeaderThriftImpl.SetIne( const Value: string);
begin
  F__isset_Ine := True;
  FIne := Value;
end;

function TLotacaoHeaderThriftImpl.Get__isset_Ine: Boolean;
begin
  Result := F__isset_Ine;
end;

procedure TLotacaoHeaderThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then
          begin
            ProfissionalCNS := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.String_) then
          begin
            CboCodigo_2002 := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.String_) then
          begin
            Cnes := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.String_) then
          begin
            Ine := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TLotacaoHeaderThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('LotacaoHeaderThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_ProfissionalCNS) then
  begin
    field_.Name := 'profissionalCNS';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(ProfissionalCNS);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CboCodigo_2002) then
  begin
    field_.Name := 'cboCodigo_2002';
    field_.Type_  := TType.String_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CboCodigo_2002);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Cnes) then
  begin
    field_.Name := 'cnes';
    field_.Type_  := TType.String_;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Cnes);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Ine) then
  begin
    field_.Name := 'ine';
    field_.Type_  := TType.String_;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Ine);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TLotacaoHeaderThriftImpl.ToString: string;
var
  _sb0 : TThriftStringBuilder;
  _first1 : Boolean;
begin
  _sb0 := TThriftStringBuilder.Create('(');
  try
    _first1 := TRUE;
    if (__isset_ProfissionalCNS) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('ProfissionalCNS: ');
      _sb0.Append(ProfissionalCNS);
    end;
    if (__isset_CboCodigo_2002) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('CboCodigo_2002: ');
      _sb0.Append(CboCodigo_2002);
    end;
    if (__isset_Cnes) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('Cnes: ');
      _sb0.Append(Cnes);
    end;
    if (__isset_Ine) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('Ine: ');
      _sb0.Append(Ine);
    end;
    _sb0.Append(')');
    Result := _sb0.ToString;
    if _first1 then {prevent warning};
  finally
    _sb0.Free;
  end;
end;

constructor TUnicaLotacaoHeaderThriftImpl.Create;
begin
  inherited;
end;

destructor TUnicaLotacaoHeaderThriftImpl.Destroy;
begin
  inherited;
end;

function TUnicaLotacaoHeaderThriftImpl.GetProfissionalCNS: string;
begin
  Result := FProfissionalCNS;
end;

procedure TUnicaLotacaoHeaderThriftImpl.SetProfissionalCNS( const Value: string);
begin
  F__isset_ProfissionalCNS := True;
  FProfissionalCNS := Value;
end;

function TUnicaLotacaoHeaderThriftImpl.Get__isset_ProfissionalCNS: Boolean;
begin
  Result := F__isset_ProfissionalCNS;
end;

function TUnicaLotacaoHeaderThriftImpl.GetCboCodigo_2002: string;
begin
  Result := FCboCodigo_2002;
end;

procedure TUnicaLotacaoHeaderThriftImpl.SetCboCodigo_2002( const Value: string);
begin
  F__isset_CboCodigo_2002 := True;
  FCboCodigo_2002 := Value;
end;

function TUnicaLotacaoHeaderThriftImpl.Get__isset_CboCodigo_2002: Boolean;
begin
  Result := F__isset_CboCodigo_2002;
end;

function TUnicaLotacaoHeaderThriftImpl.GetCnes: string;
begin
  Result := FCnes;
end;

procedure TUnicaLotacaoHeaderThriftImpl.SetCnes( const Value: string);
begin
  F__isset_Cnes := True;
  FCnes := Value;
end;

function TUnicaLotacaoHeaderThriftImpl.Get__isset_Cnes: Boolean;
begin
  Result := F__isset_Cnes;
end;

function TUnicaLotacaoHeaderThriftImpl.GetIne: string;
begin
  Result := FIne;
end;

procedure TUnicaLotacaoHeaderThriftImpl.SetIne( const Value: string);
begin
  F__isset_Ine := True;
  FIne := Value;
end;

function TUnicaLotacaoHeaderThriftImpl.Get__isset_Ine: Boolean;
begin
  Result := F__isset_Ine;
end;

function TUnicaLotacaoHeaderThriftImpl.GetDataAtendimento: Int64;
begin
  Result := FDataAtendimento;
end;

procedure TUnicaLotacaoHeaderThriftImpl.SetDataAtendimento( const Value: Int64);
begin
  F__isset_DataAtendimento := True;
  FDataAtendimento := Value;
end;

function TUnicaLotacaoHeaderThriftImpl.Get__isset_DataAtendimento: Boolean;
begin
  Result := F__isset_DataAtendimento;
end;

function TUnicaLotacaoHeaderThriftImpl.GetCodigoIbgeMunicipio: string;
begin
  Result := FCodigoIbgeMunicipio;
end;

procedure TUnicaLotacaoHeaderThriftImpl.SetCodigoIbgeMunicipio( const Value: string);
begin
  F__isset_CodigoIbgeMunicipio := True;
  FCodigoIbgeMunicipio := Value;
end;

function TUnicaLotacaoHeaderThriftImpl.Get__isset_CodigoIbgeMunicipio: Boolean;
begin
  Result := F__isset_CodigoIbgeMunicipio;
end;

procedure TUnicaLotacaoHeaderThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then
          begin
            ProfissionalCNS := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.String_) then
          begin
            CboCodigo_2002 := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.String_) then
          begin
            Cnes := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.String_) then
          begin
            Ine := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        5: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataAtendimento := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        6: begin
          if (field_.Type_ = TType.String_) then
          begin
            CodigoIbgeMunicipio := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TUnicaLotacaoHeaderThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('UnicaLotacaoHeaderThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_ProfissionalCNS) then
  begin
    field_.Name := 'profissionalCNS';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(ProfissionalCNS);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CboCodigo_2002) then
  begin
    field_.Name := 'cboCodigo_2002';
    field_.Type_  := TType.String_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CboCodigo_2002);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Cnes) then
  begin
    field_.Name := 'cnes';
    field_.Type_  := TType.String_;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Cnes);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Ine) then
  begin
    field_.Name := 'ine';
    field_.Type_  := TType.String_;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Ine);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataAtendimento) then
  begin
    field_.Name := 'dataAtendimento';
    field_.Type_  := TType.I64;
    field_.ID := 5;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataAtendimento);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CodigoIbgeMunicipio) then
  begin
    field_.Name := 'codigoIbgeMunicipio';
    field_.Type_  := TType.String_;
    field_.ID := 6;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CodigoIbgeMunicipio);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TUnicaLotacaoHeaderThriftImpl.ToString: string;
var
  _sb2 : TThriftStringBuilder;
  _first3 : Boolean;
begin
  _sb2 := TThriftStringBuilder.Create('(');
  try
    _first3 := TRUE;
    if (__isset_ProfissionalCNS) then begin
      if not _first3 then _sb2.Append(',');
      _first3 := FALSE;
      _sb2.Append('ProfissionalCNS: ');
      _sb2.Append(ProfissionalCNS);
    end;
    if (__isset_CboCodigo_2002) then begin
      if not _first3 then _sb2.Append(',');
      _first3 := FALSE;
      _sb2.Append('CboCodigo_2002: ');
      _sb2.Append(CboCodigo_2002);
    end;
    if (__isset_Cnes) then begin
      if not _first3 then _sb2.Append(',');
      _first3 := FALSE;
      _sb2.Append('Cnes: ');
      _sb2.Append(Cnes);
    end;
    if (__isset_Ine) then begin
      if not _first3 then _sb2.Append(',');
      _first3 := FALSE;
      _sb2.Append('Ine: ');
      _sb2.Append(Ine);
    end;
    if (__isset_DataAtendimento) then begin
      if not _first3 then _sb2.Append(',');
      _first3 := FALSE;
      _sb2.Append('DataAtendimento: ');
      _sb2.Append(DataAtendimento);
    end;
    if (__isset_CodigoIbgeMunicipio) then begin
      if not _first3 then _sb2.Append(',');
      _first3 := FALSE;
      _sb2.Append('CodigoIbgeMunicipio: ');
      _sb2.Append(CodigoIbgeMunicipio);
    end;
    _sb2.Append(')');
    Result := _sb2.ToString;
    if _first3 then {prevent warning};
  finally
    _sb2.Free;
  end;
end;

constructor TVariasLotacoesHeaderThriftImpl.Create;
begin
  inherited;
end;

destructor TVariasLotacoesHeaderThriftImpl.Destroy;
begin
  inherited;
end;

function TVariasLotacoesHeaderThriftImpl.GetLotacaoFormPrincipal: ILotacaoHeaderThrift;
begin
  Result := FLotacaoFormPrincipal;
end;

procedure TVariasLotacoesHeaderThriftImpl.SetLotacaoFormPrincipal( const Value: ILotacaoHeaderThrift);
begin
  F__isset_LotacaoFormPrincipal := True;
  FLotacaoFormPrincipal := Value;
end;

function TVariasLotacoesHeaderThriftImpl.Get__isset_LotacaoFormPrincipal: Boolean;
begin
  Result := F__isset_LotacaoFormPrincipal;
end;

function TVariasLotacoesHeaderThriftImpl.GetLotacaoFormAtendimentoCompartilhado: ILotacaoHeaderThrift;
begin
  Result := FLotacaoFormAtendimentoCompartilhado;
end;

procedure TVariasLotacoesHeaderThriftImpl.SetLotacaoFormAtendimentoCompartilhado( const Value: ILotacaoHeaderThrift);
begin
  F__isset_LotacaoFormAtendimentoCompartilhado := True;
  FLotacaoFormAtendimentoCompartilhado := Value;
end;

function TVariasLotacoesHeaderThriftImpl.Get__isset_LotacaoFormAtendimentoCompartilhado: Boolean;
begin
  Result := F__isset_LotacaoFormAtendimentoCompartilhado;
end;

function TVariasLotacoesHeaderThriftImpl.GetDataAtendimento: Int64;
begin
  Result := FDataAtendimento;
end;

procedure TVariasLotacoesHeaderThriftImpl.SetDataAtendimento( const Value: Int64);
begin
  F__isset_DataAtendimento := True;
  FDataAtendimento := Value;
end;

function TVariasLotacoesHeaderThriftImpl.Get__isset_DataAtendimento: Boolean;
begin
  Result := F__isset_DataAtendimento;
end;

function TVariasLotacoesHeaderThriftImpl.GetCodigoIbgeMunicipio: string;
begin
  Result := FCodigoIbgeMunicipio;
end;

procedure TVariasLotacoesHeaderThriftImpl.SetCodigoIbgeMunicipio( const Value: string);
begin
  F__isset_CodigoIbgeMunicipio := True;
  FCodigoIbgeMunicipio := Value;
end;

function TVariasLotacoesHeaderThriftImpl.Get__isset_CodigoIbgeMunicipio: Boolean;
begin
  Result := F__isset_CodigoIbgeMunicipio;
end;

procedure TVariasLotacoesHeaderThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        6: begin
          if (field_.Type_ = TType.Struct) then
          begin
            LotacaoFormPrincipal := TLotacaoHeaderThriftImpl.Create;
            LotacaoFormPrincipal.Read(iprot);
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        7: begin
          if (field_.Type_ = TType.Struct) then
          begin
            LotacaoFormAtendimentoCompartilhado := TLotacaoHeaderThriftImpl.Create;
            LotacaoFormAtendimentoCompartilhado.Read(iprot);
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        8: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataAtendimento := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        9: begin
          if (field_.Type_ = TType.String_) then
          begin
            CodigoIbgeMunicipio := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TVariasLotacoesHeaderThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('VariasLotacoesHeaderThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (LotacaoFormPrincipal <> nil) and __isset_LotacaoFormPrincipal then
  begin
    field_.Name := 'lotacaoFormPrincipal';
    field_.Type_  := TType.Struct;
    field_.ID := 6;
    oprot.WriteFieldBegin(field_);
    LotacaoFormPrincipal.Write(oprot);
    oprot.WriteFieldEnd();
  end;
  if (LotacaoFormAtendimentoCompartilhado <> nil) and __isset_LotacaoFormAtendimentoCompartilhado then
  begin
    field_.Name := 'lotacaoFormAtendimentoCompartilhado';
    field_.Type_  := TType.Struct;
    field_.ID := 7;
    oprot.WriteFieldBegin(field_);
    LotacaoFormAtendimentoCompartilhado.Write(oprot);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataAtendimento) then
  begin
    field_.Name := 'dataAtendimento';
    field_.Type_  := TType.I64;
    field_.ID := 8;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataAtendimento);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CodigoIbgeMunicipio) then
  begin
    field_.Name := 'codigoIbgeMunicipio';
    field_.Type_  := TType.String_;
    field_.ID := 9;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CodigoIbgeMunicipio);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TVariasLotacoesHeaderThriftImpl.ToString: string;
var
  _sb4 : TThriftStringBuilder;
  _first5 : Boolean;
begin
  _sb4 := TThriftStringBuilder.Create('(');
  try
    _first5 := TRUE;
    if (LotacaoFormPrincipal <> nil) and __isset_LotacaoFormPrincipal then begin
      if not _first5 then _sb4.Append(',');
      _first5 := FALSE;
      _sb4.Append('LotacaoFormPrincipal: ');
      if (LotacaoFormPrincipal = nil) then _sb4.Append('<null>') else _sb4.Append(LotacaoFormPrincipal.ToString());
    end;
    if (LotacaoFormAtendimentoCompartilhado <> nil) and __isset_LotacaoFormAtendimentoCompartilhado then begin
      if not _first5 then _sb4.Append(',');
      _first5 := FALSE;
      _sb4.Append('LotacaoFormAtendimentoCompartilhado: ');
      if (LotacaoFormAtendimentoCompartilhado = nil) then _sb4.Append('<null>') else _sb4.Append(LotacaoFormAtendimentoCompartilhado.ToString());
    end;
    if (__isset_DataAtendimento) then begin
      if not _first5 then _sb4.Append(',');
      _first5 := FALSE;
      _sb4.Append('DataAtendimento: ');
      _sb4.Append(DataAtendimento);
    end;
    if (__isset_CodigoIbgeMunicipio) then begin
      if not _first5 then _sb4.Append(',');
      _first5 := FALSE;
      _sb4.Append('CodigoIbgeMunicipio: ');
      _sb4.Append(CodigoIbgeMunicipio);
    end;
    _sb4.Append(')');
    Result := _sb4.ToString;
    if _first5 then {prevent warning};
  finally
    _sb4.Free;
  end;
end;

constructor TEnderecoLocalPermanenciaThriftImpl.Create;
begin
  inherited;
end;

destructor TEnderecoLocalPermanenciaThriftImpl.Destroy;
begin
  inherited;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetBairro: string;
begin
  Result := FBairro;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetBairro( const Value: string);
begin
  F__isset_Bairro := True;
  FBairro := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_Bairro: Boolean;
begin
  Result := F__isset_Bairro;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetCep: string;
begin
  Result := FCep;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetCep( const Value: string);
begin
  F__isset_Cep := True;
  FCep := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_Cep: Boolean;
begin
  Result := F__isset_Cep;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetCodigoIbgeMunicipio: string;
begin
  Result := FCodigoIbgeMunicipio;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetCodigoIbgeMunicipio( const Value: string);
begin
  F__isset_CodigoIbgeMunicipio := True;
  FCodigoIbgeMunicipio := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_CodigoIbgeMunicipio: Boolean;
begin
  Result := F__isset_CodigoIbgeMunicipio;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetComplemento: string;
begin
  Result := FComplemento;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetComplemento( const Value: string);
begin
  F__isset_Complemento := True;
  FComplemento := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_Complemento: Boolean;
begin
  Result := F__isset_Complemento;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetNomeLogradouro: string;
begin
  Result := FNomeLogradouro;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetNomeLogradouro( const Value: string);
begin
  F__isset_NomeLogradouro := True;
  FNomeLogradouro := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_NomeLogradouro: Boolean;
begin
  Result := F__isset_NomeLogradouro;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetNumero: string;
begin
  Result := FNumero;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetNumero( const Value: string);
begin
  F__isset_Numero := True;
  FNumero := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_Numero: Boolean;
begin
  Result := F__isset_Numero;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetNumeroDneUf: string;
begin
  Result := FNumeroDneUf;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetNumeroDneUf( const Value: string);
begin
  F__isset_NumeroDneUf := True;
  FNumeroDneUf := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_NumeroDneUf: Boolean;
begin
  Result := F__isset_NumeroDneUf;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetTelefoneContato: string;
begin
  Result := FTelefoneContato;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetTelefoneContato( const Value: string);
begin
  F__isset_TelefoneContato := True;
  FTelefoneContato := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_TelefoneContato: Boolean;
begin
  Result := F__isset_TelefoneContato;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetTelefoneResidencia: string;
begin
  Result := FTelefoneResidencia;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetTelefoneResidencia( const Value: string);
begin
  F__isset_TelefoneResidencia := True;
  FTelefoneResidencia := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_TelefoneResidencia: Boolean;
begin
  Result := F__isset_TelefoneResidencia;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetTipoLogradouroNumeroDne: string;
begin
  Result := FTipoLogradouroNumeroDne;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetTipoLogradouroNumeroDne( const Value: string);
begin
  F__isset_TipoLogradouroNumeroDne := True;
  FTipoLogradouroNumeroDne := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_TipoLogradouroNumeroDne: Boolean;
begin
  Result := F__isset_TipoLogradouroNumeroDne;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetStSemNumero: Boolean;
begin
  Result := FStSemNumero;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetStSemNumero( const Value: Boolean);
begin
  F__isset_StSemNumero := True;
  FStSemNumero := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_StSemNumero: Boolean;
begin
  Result := F__isset_StSemNumero;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetPontoReferencia: string;
begin
  Result := FPontoReferencia;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetPontoReferencia( const Value: string);
begin
  F__isset_PontoReferencia := True;
  FPontoReferencia := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_PontoReferencia: Boolean;
begin
  Result := F__isset_PontoReferencia;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetMicroArea: string;
begin
  Result := FMicroArea;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetMicroArea( const Value: string);
begin
  F__isset_MicroArea := True;
  FMicroArea := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_MicroArea: Boolean;
begin
  Result := F__isset_MicroArea;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetStForaArea: Boolean;
begin
  Result := FStForaArea;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetStForaArea( const Value: Boolean);
begin
  F__isset_StForaArea := True;
  FStForaArea := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_StForaArea: Boolean;
begin
  Result := F__isset_StForaArea;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then
          begin
            Bairro := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.String_) then
          begin
            Cep := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.String_) then
          begin
            CodigoIbgeMunicipio := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.String_) then
          begin
            Complemento := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        5: begin
          if (field_.Type_ = TType.String_) then
          begin
            NomeLogradouro := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        6: begin
          if (field_.Type_ = TType.String_) then
          begin
            Numero := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        7: begin
          if (field_.Type_ = TType.String_) then
          begin
            NumeroDneUf := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        8: begin
          if (field_.Type_ = TType.String_) then
          begin
            TelefoneContato := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        9: begin
          if (field_.Type_ = TType.String_) then
          begin
            TelefoneResidencia := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        10: begin
          if (field_.Type_ = TType.String_) then
          begin
            TipoLogradouroNumeroDne := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        11: begin
          if (field_.Type_ = TType.Bool_) then
          begin
            StSemNumero := iprot.ReadBool();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        12: begin
          if (field_.Type_ = TType.String_) then
          begin
            PontoReferencia := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        13: begin
          if (field_.Type_ = TType.String_) then
          begin
            MicroArea := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        14: begin
          if (field_.Type_ = TType.Bool_) then
          begin
            StForaArea := iprot.ReadBool();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('EnderecoLocalPermanenciaThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_Bairro) then
  begin
    field_.Name := 'bairro';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Bairro);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Cep) then
  begin
    field_.Name := 'cep';
    field_.Type_  := TType.String_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Cep);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CodigoIbgeMunicipio) then
  begin
    field_.Name := 'codigoIbgeMunicipio';
    field_.Type_  := TType.String_;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CodigoIbgeMunicipio);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Complemento) then
  begin
    field_.Name := 'complemento';
    field_.Type_  := TType.String_;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Complemento);
    oprot.WriteFieldEnd();
  end;
  if (__isset_NomeLogradouro) then
  begin
    field_.Name := 'nomeLogradouro';
    field_.Type_  := TType.String_;
    field_.ID := 5;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(NomeLogradouro);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Numero) then
  begin
    field_.Name := 'numero';
    field_.Type_  := TType.String_;
    field_.ID := 6;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Numero);
    oprot.WriteFieldEnd();
  end;
  if (__isset_NumeroDneUf) then
  begin
    field_.Name := 'numeroDneUf';
    field_.Type_  := TType.String_;
    field_.ID := 7;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(NumeroDneUf);
    oprot.WriteFieldEnd();
  end;
  if (__isset_TelefoneContato) then
  begin
    field_.Name := 'telefoneContato';
    field_.Type_  := TType.String_;
    field_.ID := 8;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(TelefoneContato);
    oprot.WriteFieldEnd();
  end;
  if (__isset_TelefoneResidencia) then
  begin
    field_.Name := 'telefoneResidencia';
    field_.Type_  := TType.String_;
    field_.ID := 9;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(TelefoneResidencia);
    oprot.WriteFieldEnd();
  end;
  if (__isset_TipoLogradouroNumeroDne) then
  begin
    field_.Name := 'tipoLogradouroNumeroDne';
    field_.Type_  := TType.String_;
    field_.ID := 10;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(TipoLogradouroNumeroDne);
    oprot.WriteFieldEnd();
  end;
  if (__isset_StSemNumero) then
  begin
    field_.Name := 'stSemNumero';
    field_.Type_  := TType.Bool_;
    field_.ID := 11;
    oprot.WriteFieldBegin(field_);
    oprot.WriteBool(StSemNumero);
    oprot.WriteFieldEnd();
  end;
  if (__isset_PontoReferencia) then
  begin
    field_.Name := 'pontoReferencia';
    field_.Type_  := TType.String_;
    field_.ID := 12;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(PontoReferencia);
    oprot.WriteFieldEnd();
  end;
  if (__isset_MicroArea) then
  begin
    field_.Name := 'microArea';
    field_.Type_  := TType.String_;
    field_.ID := 13;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(MicroArea);
    oprot.WriteFieldEnd();
  end;
  if (__isset_StForaArea) then
  begin
    field_.Name := 'stForaArea';
    field_.Type_  := TType.Bool_;
    field_.ID := 14;
    oprot.WriteFieldBegin(field_);
    oprot.WriteBool(StForaArea);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TEnderecoLocalPermanenciaThriftImpl.ToString: string;
var
  _sb6 : TThriftStringBuilder;
  _first7 : Boolean;
begin
  _sb6 := TThriftStringBuilder.Create('(');
  try
    _first7 := TRUE;
    if (__isset_Bairro) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('Bairro: ');
      _sb6.Append(Bairro);
    end;
    if (__isset_Cep) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('Cep: ');
      _sb6.Append(Cep);
    end;
    if (__isset_CodigoIbgeMunicipio) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('CodigoIbgeMunicipio: ');
      _sb6.Append(CodigoIbgeMunicipio);
    end;
    if (__isset_Complemento) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('Complemento: ');
      _sb6.Append(Complemento);
    end;
    if (__isset_NomeLogradouro) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('NomeLogradouro: ');
      _sb6.Append(NomeLogradouro);
    end;
    if (__isset_Numero) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('Numero: ');
      _sb6.Append(Numero);
    end;
    if (__isset_NumeroDneUf) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('NumeroDneUf: ');
      _sb6.Append(NumeroDneUf);
    end;
    if (__isset_TelefoneContato) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('TelefoneContato: ');
      _sb6.Append(TelefoneContato);
    end;
    if (__isset_TelefoneResidencia) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('TelefoneResidencia: ');
      _sb6.Append(TelefoneResidencia);
    end;
    if (__isset_TipoLogradouroNumeroDne) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('TipoLogradouroNumeroDne: ');
      _sb6.Append(TipoLogradouroNumeroDne);
    end;
    if (__isset_StSemNumero) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('StSemNumero: ');
      _sb6.Append(StSemNumero);
    end;
    if (__isset_PontoReferencia) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('PontoReferencia: ');
      _sb6.Append(PontoReferencia);
    end;
    if (__isset_MicroArea) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('MicroArea: ');
      _sb6.Append(MicroArea);
    end;
    if (__isset_StForaArea) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('StForaArea: ');
      _sb6.Append(StForaArea);
    end;
    _sb6.Append(')');
    Result := _sb6.ToString;
    if _first7 then {prevent warning};
  finally
    _sb6.Free;
  end;
end;


initialization

finalization


end.
