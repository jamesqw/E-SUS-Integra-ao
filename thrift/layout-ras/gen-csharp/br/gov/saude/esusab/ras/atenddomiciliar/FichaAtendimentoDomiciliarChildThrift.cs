/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esusab.ras.atenddomiciliar
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FichaAtendimentoDomiciliarChildThrift : TBase
  {
    private long _turno;
    private string _cnsCidadao;
    private long _dataNascimento;
    private long _sexo;
    private long _localAtendimento;
    private long _atencaoDomiciliarModalidade;
    private long _tipoAtendimento;
    private List<long> _condicoesAvaliadas;
    private string _cid;
    private string _ciap;
    private List<string> _procedimentos;
    private long _condutaDesfecho;

    public long Turno
    {
      get
      {
        return _turno;
      }
      set
      {
        __isset.turno = true;
        this._turno = value;
      }
    }

    public string CnsCidadao
    {
      get
      {
        return _cnsCidadao;
      }
      set
      {
        __isset.cnsCidadao = true;
        this._cnsCidadao = value;
      }
    }

    public long DataNascimento
    {
      get
      {
        return _dataNascimento;
      }
      set
      {
        __isset.dataNascimento = true;
        this._dataNascimento = value;
      }
    }

    public long Sexo
    {
      get
      {
        return _sexo;
      }
      set
      {
        __isset.sexo = true;
        this._sexo = value;
      }
    }

    public long LocalAtendimento
    {
      get
      {
        return _localAtendimento;
      }
      set
      {
        __isset.localAtendimento = true;
        this._localAtendimento = value;
      }
    }

    public long AtencaoDomiciliarModalidade
    {
      get
      {
        return _atencaoDomiciliarModalidade;
      }
      set
      {
        __isset.atencaoDomiciliarModalidade = true;
        this._atencaoDomiciliarModalidade = value;
      }
    }

    public long TipoAtendimento
    {
      get
      {
        return _tipoAtendimento;
      }
      set
      {
        __isset.tipoAtendimento = true;
        this._tipoAtendimento = value;
      }
    }

    public List<long> CondicoesAvaliadas
    {
      get
      {
        return _condicoesAvaliadas;
      }
      set
      {
        __isset.condicoesAvaliadas = true;
        this._condicoesAvaliadas = value;
      }
    }

    public string Cid
    {
      get
      {
        return _cid;
      }
      set
      {
        __isset.cid = true;
        this._cid = value;
      }
    }

    public string Ciap
    {
      get
      {
        return _ciap;
      }
      set
      {
        __isset.ciap = true;
        this._ciap = value;
      }
    }

    public List<string> Procedimentos
    {
      get
      {
        return _procedimentos;
      }
      set
      {
        __isset.procedimentos = true;
        this._procedimentos = value;
      }
    }

    public long CondutaDesfecho
    {
      get
      {
        return _condutaDesfecho;
      }
      set
      {
        __isset.condutaDesfecho = true;
        this._condutaDesfecho = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool turno;
      public bool cnsCidadao;
      public bool dataNascimento;
      public bool sexo;
      public bool localAtendimento;
      public bool atencaoDomiciliarModalidade;
      public bool tipoAtendimento;
      public bool condicoesAvaliadas;
      public bool cid;
      public bool ciap;
      public bool procedimentos;
      public bool condutaDesfecho;
    }

    public FichaAtendimentoDomiciliarChildThrift() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Turno = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                CnsCidadao = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                DataNascimento = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Sexo = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                LocalAtendimento = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                AtencaoDomiciliarModalidade = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                TipoAtendimento = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  CondicoesAvaliadas = new List<long>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    long _elem2;
                    _elem2 = iprot.ReadI64();
                    CondicoesAvaliadas.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Cid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                Ciap = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.List) {
                {
                  Procedimentos = new List<string>();
                  TList _list3 = iprot.ReadListBegin();
                  for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                  {
                    string _elem5;
                    _elem5 = iprot.ReadString();
                    Procedimentos.Add(_elem5);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.I64) {
                CondutaDesfecho = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("FichaAtendimentoDomiciliarChildThrift");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.turno) {
          field.Name = "turno";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Turno);
          oprot.WriteFieldEnd();
        }
        if (CnsCidadao != null && __isset.cnsCidadao) {
          field.Name = "cnsCidadao";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CnsCidadao);
          oprot.WriteFieldEnd();
        }
        if (__isset.dataNascimento) {
          field.Name = "dataNascimento";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(DataNascimento);
          oprot.WriteFieldEnd();
        }
        if (__isset.sexo) {
          field.Name = "sexo";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Sexo);
          oprot.WriteFieldEnd();
        }
        if (__isset.localAtendimento) {
          field.Name = "localAtendimento";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LocalAtendimento);
          oprot.WriteFieldEnd();
        }
        if (__isset.atencaoDomiciliarModalidade) {
          field.Name = "atencaoDomiciliarModalidade";
          field.Type = TType.I64;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(AtencaoDomiciliarModalidade);
          oprot.WriteFieldEnd();
        }
        if (__isset.tipoAtendimento) {
          field.Name = "tipoAtendimento";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TipoAtendimento);
          oprot.WriteFieldEnd();
        }
        if (CondicoesAvaliadas != null && __isset.condicoesAvaliadas) {
          field.Name = "condicoesAvaliadas";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I64, CondicoesAvaliadas.Count));
            foreach (long _iter6 in CondicoesAvaliadas)
            {
              oprot.WriteI64(_iter6);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Cid != null && __isset.cid) {
          field.Name = "cid";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Cid);
          oprot.WriteFieldEnd();
        }
        if (Ciap != null && __isset.ciap) {
          field.Name = "ciap";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ciap);
          oprot.WriteFieldEnd();
        }
        if (Procedimentos != null && __isset.procedimentos) {
          field.Name = "procedimentos";
          field.Type = TType.List;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Procedimentos.Count));
            foreach (string _iter7 in Procedimentos)
            {
              oprot.WriteString(_iter7);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.condutaDesfecho) {
          field.Name = "condutaDesfecho";
          field.Type = TType.I64;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(CondutaDesfecho);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FichaAtendimentoDomiciliarChildThrift(");
      bool __first = true;
      if (__isset.turno) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Turno: ");
        __sb.Append(Turno);
      }
      if (CnsCidadao != null && __isset.cnsCidadao) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CnsCidadao: ");
        __sb.Append(CnsCidadao);
      }
      if (__isset.dataNascimento) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DataNascimento: ");
        __sb.Append(DataNascimento);
      }
      if (__isset.sexo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sexo: ");
        __sb.Append(Sexo);
      }
      if (__isset.localAtendimento) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocalAtendimento: ");
        __sb.Append(LocalAtendimento);
      }
      if (__isset.atencaoDomiciliarModalidade) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AtencaoDomiciliarModalidade: ");
        __sb.Append(AtencaoDomiciliarModalidade);
      }
      if (__isset.tipoAtendimento) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TipoAtendimento: ");
        __sb.Append(TipoAtendimento);
      }
      if (CondicoesAvaliadas != null && __isset.condicoesAvaliadas) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CondicoesAvaliadas: ");
        __sb.Append(CondicoesAvaliadas);
      }
      if (Cid != null && __isset.cid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cid: ");
        __sb.Append(Cid);
      }
      if (Ciap != null && __isset.ciap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ciap: ");
        __sb.Append(Ciap);
      }
      if (Procedimentos != null && __isset.procedimentos) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Procedimentos: ");
        __sb.Append(Procedimentos);
      }
      if (__isset.condutaDesfecho) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CondutaDesfecho: ");
        __sb.Append(CondutaDesfecho);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
