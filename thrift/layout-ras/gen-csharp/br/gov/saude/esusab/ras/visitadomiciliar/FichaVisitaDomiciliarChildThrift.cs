/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esusab.ras.visitadomiciliar
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FichaVisitaDomiciliarChildThrift : TBase
  {
    private long _turno;
    private string _numProntuario;
    private string _cnsCidadao;
    private long _dtNascimento;
    private long _sexo;
    private bool _statusVisitaCompartilhadaOutroProfissional;
    private List<long> _motivosVisita;
    private long _desfecho;
    private string _microArea;
    private bool _stForaArea;
    private long _tipoDeImovel;
    private double _pesoAcompanhamentoNutricional;
    private double _alturaAcompanhamentoNutricional;

    public long Turno
    {
      get
      {
        return _turno;
      }
      set
      {
        __isset.turno = true;
        this._turno = value;
      }
    }

    public string NumProntuario
    {
      get
      {
        return _numProntuario;
      }
      set
      {
        __isset.numProntuario = true;
        this._numProntuario = value;
      }
    }

    public string CnsCidadao
    {
      get
      {
        return _cnsCidadao;
      }
      set
      {
        __isset.cnsCidadao = true;
        this._cnsCidadao = value;
      }
    }

    public long DtNascimento
    {
      get
      {
        return _dtNascimento;
      }
      set
      {
        __isset.dtNascimento = true;
        this._dtNascimento = value;
      }
    }

    public long Sexo
    {
      get
      {
        return _sexo;
      }
      set
      {
        __isset.sexo = true;
        this._sexo = value;
      }
    }

    public bool StatusVisitaCompartilhadaOutroProfissional
    {
      get
      {
        return _statusVisitaCompartilhadaOutroProfissional;
      }
      set
      {
        __isset.statusVisitaCompartilhadaOutroProfissional = true;
        this._statusVisitaCompartilhadaOutroProfissional = value;
      }
    }

    public List<long> MotivosVisita
    {
      get
      {
        return _motivosVisita;
      }
      set
      {
        __isset.motivosVisita = true;
        this._motivosVisita = value;
      }
    }

    public long Desfecho
    {
      get
      {
        return _desfecho;
      }
      set
      {
        __isset.desfecho = true;
        this._desfecho = value;
      }
    }

    public string MicroArea
    {
      get
      {
        return _microArea;
      }
      set
      {
        __isset.microArea = true;
        this._microArea = value;
      }
    }

    public bool StForaArea
    {
      get
      {
        return _stForaArea;
      }
      set
      {
        __isset.stForaArea = true;
        this._stForaArea = value;
      }
    }

    public long TipoDeImovel
    {
      get
      {
        return _tipoDeImovel;
      }
      set
      {
        __isset.tipoDeImovel = true;
        this._tipoDeImovel = value;
      }
    }

    public double PesoAcompanhamentoNutricional
    {
      get
      {
        return _pesoAcompanhamentoNutricional;
      }
      set
      {
        __isset.pesoAcompanhamentoNutricional = true;
        this._pesoAcompanhamentoNutricional = value;
      }
    }

    public double AlturaAcompanhamentoNutricional
    {
      get
      {
        return _alturaAcompanhamentoNutricional;
      }
      set
      {
        __isset.alturaAcompanhamentoNutricional = true;
        this._alturaAcompanhamentoNutricional = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool turno;
      public bool numProntuario;
      public bool cnsCidadao;
      public bool dtNascimento;
      public bool sexo;
      public bool statusVisitaCompartilhadaOutroProfissional;
      public bool motivosVisita;
      public bool desfecho;
      public bool microArea;
      public bool stForaArea;
      public bool tipoDeImovel;
      public bool pesoAcompanhamentoNutricional;
      public bool alturaAcompanhamentoNutricional;
    }

    public FichaVisitaDomiciliarChildThrift() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Turno = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              NumProntuario = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              CnsCidadao = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              DtNascimento = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              Sexo = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              StatusVisitaCompartilhadaOutroProfissional = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                MotivosVisita = new List<long>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  long _elem2;
                  _elem2 = iprot.ReadI64();
                  MotivosVisita.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              Desfecho = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              MicroArea = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              StForaArea = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              TipoDeImovel = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Double) {
              PesoAcompanhamentoNutricional = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Double) {
              AlturaAcompanhamentoNutricional = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FichaVisitaDomiciliarChildThrift");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.turno) {
        field.Name = "turno";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Turno);
        oprot.WriteFieldEnd();
      }
      if (NumProntuario != null && __isset.numProntuario) {
        field.Name = "numProntuario";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NumProntuario);
        oprot.WriteFieldEnd();
      }
      if (CnsCidadao != null && __isset.cnsCidadao) {
        field.Name = "cnsCidadao";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CnsCidadao);
        oprot.WriteFieldEnd();
      }
      if (__isset.dtNascimento) {
        field.Name = "dtNascimento";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DtNascimento);
        oprot.WriteFieldEnd();
      }
      if (__isset.sexo) {
        field.Name = "sexo";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Sexo);
        oprot.WriteFieldEnd();
      }
      if (__isset.statusVisitaCompartilhadaOutroProfissional) {
        field.Name = "statusVisitaCompartilhadaOutroProfissional";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(StatusVisitaCompartilhadaOutroProfissional);
        oprot.WriteFieldEnd();
      }
      if (MotivosVisita != null && __isset.motivosVisita) {
        field.Name = "motivosVisita";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, MotivosVisita.Count));
          foreach (long _iter3 in MotivosVisita)
          {
            oprot.WriteI64(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.desfecho) {
        field.Name = "desfecho";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Desfecho);
        oprot.WriteFieldEnd();
      }
      if (MicroArea != null && __isset.microArea) {
        field.Name = "microArea";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MicroArea);
        oprot.WriteFieldEnd();
      }
      if (__isset.stForaArea) {
        field.Name = "stForaArea";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(StForaArea);
        oprot.WriteFieldEnd();
      }
      if (__isset.tipoDeImovel) {
        field.Name = "tipoDeImovel";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TipoDeImovel);
        oprot.WriteFieldEnd();
      }
      if (__isset.pesoAcompanhamentoNutricional) {
        field.Name = "pesoAcompanhamentoNutricional";
        field.Type = TType.Double;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(PesoAcompanhamentoNutricional);
        oprot.WriteFieldEnd();
      }
      if (__isset.alturaAcompanhamentoNutricional) {
        field.Name = "alturaAcompanhamentoNutricional";
        field.Type = TType.Double;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(AlturaAcompanhamentoNutricional);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FichaVisitaDomiciliarChildThrift(");
      bool __first = true;
      if (__isset.turno) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Turno: ");
        __sb.Append(Turno);
      }
      if (NumProntuario != null && __isset.numProntuario) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NumProntuario: ");
        __sb.Append(NumProntuario);
      }
      if (CnsCidadao != null && __isset.cnsCidadao) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CnsCidadao: ");
        __sb.Append(CnsCidadao);
      }
      if (__isset.dtNascimento) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DtNascimento: ");
        __sb.Append(DtNascimento);
      }
      if (__isset.sexo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sexo: ");
        __sb.Append(Sexo);
      }
      if (__isset.statusVisitaCompartilhadaOutroProfissional) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StatusVisitaCompartilhadaOutroProfissional: ");
        __sb.Append(StatusVisitaCompartilhadaOutroProfissional);
      }
      if (MotivosVisita != null && __isset.motivosVisita) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MotivosVisita: ");
        __sb.Append(MotivosVisita);
      }
      if (__isset.desfecho) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Desfecho: ");
        __sb.Append(Desfecho);
      }
      if (MicroArea != null && __isset.microArea) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MicroArea: ");
        __sb.Append(MicroArea);
      }
      if (__isset.stForaArea) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StForaArea: ");
        __sb.Append(StForaArea);
      }
      if (__isset.tipoDeImovel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TipoDeImovel: ");
        __sb.Append(TipoDeImovel);
      }
      if (__isset.pesoAcompanhamentoNutricional) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PesoAcompanhamentoNutricional: ");
        __sb.Append(PesoAcompanhamentoNutricional);
      }
      if (__isset.alturaAcompanhamentoNutricional) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AlturaAcompanhamentoNutricional: ");
        __sb.Append(AlturaAcompanhamentoNutricional);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
