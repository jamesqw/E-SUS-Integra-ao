/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esusab.ras.avaliacaoelegibilidade
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FichaAvaliacaoElegibilidadeThrift : TBase
  {
    private int _tpCdsOrigem;
    private string _cnsCidadao;
    private string _nomeCidadao;
    private string _nomeSocialCidadao;
    private long _dataNascimentoCidadao;
    private long _sexoCidadao;
    private long _racaCorCidadao;
    private string _nomeMaeCidadao;
    private bool _desconheceNomeMae;
    private string _codigoIbgeMunicipioNascimento;
    private long _nacionalidadeCidadao;
    private string _emailCidadao;
    private string _numeroNisPisPasep;
    private br.gov.saude.esusab.ras.common.EnderecoLocalPermanenciaThrift _endereco;
    private long _atencaoDomiciliarProcedencia;
    private long _atencaoDomiciliarModalidade;
    private List<long> _condicoesAvaliadas;
    private string _cid10Principal;
    private string _cid10SecundarioUm;
    private string _cid10SecundarioDois;
    private long _conclusaoDestinoElegivel;
    private List<long> _conclusaoDestinoInelegivel;
    private long _cuidadorCidadao;
    private long _turno;
    private br.gov.saude.esusab.ras.common.VariasLotacoesHeaderThrift _headerTransport;
    private string _nomePaiCidadao;
    private bool _desconheceNomePai;
    private long _dtNaturalizacao;
    private string _portariaNaturalizacao;
    private long _dtEntradaBrasil;
    private long _paisNascimento;
    private long _etnia;
    private string _cnsCuidador;

    public string UuidFicha { get; set; }

    public int TpCdsOrigem
    {
      get
      {
        return _tpCdsOrigem;
      }
      set
      {
        __isset.tpCdsOrigem = true;
        this._tpCdsOrigem = value;
      }
    }

    public string CnsCidadao
    {
      get
      {
        return _cnsCidadao;
      }
      set
      {
        __isset.cnsCidadao = true;
        this._cnsCidadao = value;
      }
    }

    public string NomeCidadao
    {
      get
      {
        return _nomeCidadao;
      }
      set
      {
        __isset.nomeCidadao = true;
        this._nomeCidadao = value;
      }
    }

    public string NomeSocialCidadao
    {
      get
      {
        return _nomeSocialCidadao;
      }
      set
      {
        __isset.nomeSocialCidadao = true;
        this._nomeSocialCidadao = value;
      }
    }

    public long DataNascimentoCidadao
    {
      get
      {
        return _dataNascimentoCidadao;
      }
      set
      {
        __isset.dataNascimentoCidadao = true;
        this._dataNascimentoCidadao = value;
      }
    }

    public long SexoCidadao
    {
      get
      {
        return _sexoCidadao;
      }
      set
      {
        __isset.sexoCidadao = true;
        this._sexoCidadao = value;
      }
    }

    public long RacaCorCidadao
    {
      get
      {
        return _racaCorCidadao;
      }
      set
      {
        __isset.racaCorCidadao = true;
        this._racaCorCidadao = value;
      }
    }

    public string NomeMaeCidadao
    {
      get
      {
        return _nomeMaeCidadao;
      }
      set
      {
        __isset.nomeMaeCidadao = true;
        this._nomeMaeCidadao = value;
      }
    }

    public bool DesconheceNomeMae
    {
      get
      {
        return _desconheceNomeMae;
      }
      set
      {
        __isset.desconheceNomeMae = true;
        this._desconheceNomeMae = value;
      }
    }

    public string CodigoIbgeMunicipioNascimento
    {
      get
      {
        return _codigoIbgeMunicipioNascimento;
      }
      set
      {
        __isset.codigoIbgeMunicipioNascimento = true;
        this._codigoIbgeMunicipioNascimento = value;
      }
    }

    public long NacionalidadeCidadao
    {
      get
      {
        return _nacionalidadeCidadao;
      }
      set
      {
        __isset.nacionalidadeCidadao = true;
        this._nacionalidadeCidadao = value;
      }
    }

    public string EmailCidadao
    {
      get
      {
        return _emailCidadao;
      }
      set
      {
        __isset.emailCidadao = true;
        this._emailCidadao = value;
      }
    }

    public string NumeroNisPisPasep
    {
      get
      {
        return _numeroNisPisPasep;
      }
      set
      {
        __isset.numeroNisPisPasep = true;
        this._numeroNisPisPasep = value;
      }
    }

    public br.gov.saude.esusab.ras.common.EnderecoLocalPermanenciaThrift Endereco
    {
      get
      {
        return _endereco;
      }
      set
      {
        __isset.endereco = true;
        this._endereco = value;
      }
    }

    public long AtencaoDomiciliarProcedencia
    {
      get
      {
        return _atencaoDomiciliarProcedencia;
      }
      set
      {
        __isset.atencaoDomiciliarProcedencia = true;
        this._atencaoDomiciliarProcedencia = value;
      }
    }

    public long AtencaoDomiciliarModalidade
    {
      get
      {
        return _atencaoDomiciliarModalidade;
      }
      set
      {
        __isset.atencaoDomiciliarModalidade = true;
        this._atencaoDomiciliarModalidade = value;
      }
    }

    public List<long> CondicoesAvaliadas
    {
      get
      {
        return _condicoesAvaliadas;
      }
      set
      {
        __isset.condicoesAvaliadas = true;
        this._condicoesAvaliadas = value;
      }
    }

    public string Cid10Principal
    {
      get
      {
        return _cid10Principal;
      }
      set
      {
        __isset.cid10Principal = true;
        this._cid10Principal = value;
      }
    }

    public string Cid10SecundarioUm
    {
      get
      {
        return _cid10SecundarioUm;
      }
      set
      {
        __isset.cid10SecundarioUm = true;
        this._cid10SecundarioUm = value;
      }
    }

    public string Cid10SecundarioDois
    {
      get
      {
        return _cid10SecundarioDois;
      }
      set
      {
        __isset.cid10SecundarioDois = true;
        this._cid10SecundarioDois = value;
      }
    }

    public long ConclusaoDestinoElegivel
    {
      get
      {
        return _conclusaoDestinoElegivel;
      }
      set
      {
        __isset.conclusaoDestinoElegivel = true;
        this._conclusaoDestinoElegivel = value;
      }
    }

    public List<long> ConclusaoDestinoInelegivel
    {
      get
      {
        return _conclusaoDestinoInelegivel;
      }
      set
      {
        __isset.conclusaoDestinoInelegivel = true;
        this._conclusaoDestinoInelegivel = value;
      }
    }

    public long CuidadorCidadao
    {
      get
      {
        return _cuidadorCidadao;
      }
      set
      {
        __isset.cuidadorCidadao = true;
        this._cuidadorCidadao = value;
      }
    }

    public long Turno
    {
      get
      {
        return _turno;
      }
      set
      {
        __isset.turno = true;
        this._turno = value;
      }
    }

    public br.gov.saude.esusab.ras.common.VariasLotacoesHeaderThrift HeaderTransport
    {
      get
      {
        return _headerTransport;
      }
      set
      {
        __isset.headerTransport = true;
        this._headerTransport = value;
      }
    }

    public string NomePaiCidadao
    {
      get
      {
        return _nomePaiCidadao;
      }
      set
      {
        __isset.nomePaiCidadao = true;
        this._nomePaiCidadao = value;
      }
    }

    public bool DesconheceNomePai
    {
      get
      {
        return _desconheceNomePai;
      }
      set
      {
        __isset.desconheceNomePai = true;
        this._desconheceNomePai = value;
      }
    }

    public long DtNaturalizacao
    {
      get
      {
        return _dtNaturalizacao;
      }
      set
      {
        __isset.dtNaturalizacao = true;
        this._dtNaturalizacao = value;
      }
    }

    public string PortariaNaturalizacao
    {
      get
      {
        return _portariaNaturalizacao;
      }
      set
      {
        __isset.portariaNaturalizacao = true;
        this._portariaNaturalizacao = value;
      }
    }

    public long DtEntradaBrasil
    {
      get
      {
        return _dtEntradaBrasil;
      }
      set
      {
        __isset.dtEntradaBrasil = true;
        this._dtEntradaBrasil = value;
      }
    }

    public long PaisNascimento
    {
      get
      {
        return _paisNascimento;
      }
      set
      {
        __isset.paisNascimento = true;
        this._paisNascimento = value;
      }
    }

    public long Etnia
    {
      get
      {
        return _etnia;
      }
      set
      {
        __isset.etnia = true;
        this._etnia = value;
      }
    }

    public string CnsCuidador
    {
      get
      {
        return _cnsCuidador;
      }
      set
      {
        __isset.cnsCuidador = true;
        this._cnsCuidador = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tpCdsOrigem;
      public bool cnsCidadao;
      public bool nomeCidadao;
      public bool nomeSocialCidadao;
      public bool dataNascimentoCidadao;
      public bool sexoCidadao;
      public bool racaCorCidadao;
      public bool nomeMaeCidadao;
      public bool desconheceNomeMae;
      public bool codigoIbgeMunicipioNascimento;
      public bool nacionalidadeCidadao;
      public bool emailCidadao;
      public bool numeroNisPisPasep;
      public bool endereco;
      public bool atencaoDomiciliarProcedencia;
      public bool atencaoDomiciliarModalidade;
      public bool condicoesAvaliadas;
      public bool cid10Principal;
      public bool cid10SecundarioUm;
      public bool cid10SecundarioDois;
      public bool conclusaoDestinoElegivel;
      public bool conclusaoDestinoInelegivel;
      public bool cuidadorCidadao;
      public bool turno;
      public bool headerTransport;
      public bool nomePaiCidadao;
      public bool desconheceNomePai;
      public bool dtNaturalizacao;
      public bool portariaNaturalizacao;
      public bool dtEntradaBrasil;
      public bool paisNascimento;
      public bool etnia;
      public bool cnsCuidador;
    }

    public FichaAvaliacaoElegibilidadeThrift() {
    }

    public FichaAvaliacaoElegibilidadeThrift(string uuidFicha) : this() {
      this.UuidFicha = uuidFicha;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_uuidFicha = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              UuidFicha = iprot.ReadString();
              isset_uuidFicha = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TpCdsOrigem = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              CnsCidadao = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              NomeCidadao = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              NomeSocialCidadao = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              DataNascimentoCidadao = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              SexoCidadao = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              RacaCorCidadao = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              NomeMaeCidadao = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              DesconheceNomeMae = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              CodigoIbgeMunicipioNascimento = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I64) {
              NacionalidadeCidadao = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              EmailCidadao = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              NumeroNisPisPasep = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.Struct) {
              Endereco = new br.gov.saude.esusab.ras.common.EnderecoLocalPermanenciaThrift();
              Endereco.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I64) {
              AtencaoDomiciliarProcedencia = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I64) {
              AtencaoDomiciliarModalidade = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.List) {
              {
                CondicoesAvaliadas = new List<long>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  long _elem2;
                  _elem2 = iprot.ReadI64();
                  CondicoesAvaliadas.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              Cid10Principal = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.String) {
              Cid10SecundarioUm = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.String) {
              Cid10SecundarioDois = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.I64) {
              ConclusaoDestinoElegivel = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.List) {
              {
                ConclusaoDestinoInelegivel = new List<long>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  long _elem5;
                  _elem5 = iprot.ReadI64();
                  ConclusaoDestinoInelegivel.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.I64) {
              CuidadorCidadao = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.I64) {
              Turno = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.Struct) {
              HeaderTransport = new br.gov.saude.esusab.ras.common.VariasLotacoesHeaderThrift();
              HeaderTransport.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.String) {
              NomePaiCidadao = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.Bool) {
              DesconheceNomePai = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I64) {
              DtNaturalizacao = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.String) {
              PortariaNaturalizacao = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.I64) {
              DtEntradaBrasil = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 33:
            if (field.Type == TType.I64) {
              PaisNascimento = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 34:
            if (field.Type == TType.I64) {
              Etnia = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 35:
            if (field.Type == TType.String) {
              CnsCuidador = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_uuidFicha)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FichaAvaliacaoElegibilidadeThrift");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "uuidFicha";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(UuidFicha);
      oprot.WriteFieldEnd();
      if (__isset.tpCdsOrigem) {
        field.Name = "tpCdsOrigem";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TpCdsOrigem);
        oprot.WriteFieldEnd();
      }
      if (CnsCidadao != null && __isset.cnsCidadao) {
        field.Name = "cnsCidadao";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CnsCidadao);
        oprot.WriteFieldEnd();
      }
      if (NomeCidadao != null && __isset.nomeCidadao) {
        field.Name = "nomeCidadao";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NomeCidadao);
        oprot.WriteFieldEnd();
      }
      if (NomeSocialCidadao != null && __isset.nomeSocialCidadao) {
        field.Name = "nomeSocialCidadao";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NomeSocialCidadao);
        oprot.WriteFieldEnd();
      }
      if (__isset.dataNascimentoCidadao) {
        field.Name = "dataNascimentoCidadao";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DataNascimentoCidadao);
        oprot.WriteFieldEnd();
      }
      if (__isset.sexoCidadao) {
        field.Name = "sexoCidadao";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SexoCidadao);
        oprot.WriteFieldEnd();
      }
      if (__isset.racaCorCidadao) {
        field.Name = "racaCorCidadao";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RacaCorCidadao);
        oprot.WriteFieldEnd();
      }
      if (NomeMaeCidadao != null && __isset.nomeMaeCidadao) {
        field.Name = "nomeMaeCidadao";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NomeMaeCidadao);
        oprot.WriteFieldEnd();
      }
      if (__isset.desconheceNomeMae) {
        field.Name = "desconheceNomeMae";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(DesconheceNomeMae);
        oprot.WriteFieldEnd();
      }
      if (CodigoIbgeMunicipioNascimento != null && __isset.codigoIbgeMunicipioNascimento) {
        field.Name = "codigoIbgeMunicipioNascimento";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CodigoIbgeMunicipioNascimento);
        oprot.WriteFieldEnd();
      }
      if (__isset.nacionalidadeCidadao) {
        field.Name = "nacionalidadeCidadao";
        field.Type = TType.I64;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NacionalidadeCidadao);
        oprot.WriteFieldEnd();
      }
      if (EmailCidadao != null && __isset.emailCidadao) {
        field.Name = "emailCidadao";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EmailCidadao);
        oprot.WriteFieldEnd();
      }
      if (NumeroNisPisPasep != null && __isset.numeroNisPisPasep) {
        field.Name = "numeroNisPisPasep";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NumeroNisPisPasep);
        oprot.WriteFieldEnd();
      }
      if (Endereco != null && __isset.endereco) {
        field.Name = "endereco";
        field.Type = TType.Struct;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        Endereco.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.atencaoDomiciliarProcedencia) {
        field.Name = "atencaoDomiciliarProcedencia";
        field.Type = TType.I64;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(AtencaoDomiciliarProcedencia);
        oprot.WriteFieldEnd();
      }
      if (__isset.atencaoDomiciliarModalidade) {
        field.Name = "atencaoDomiciliarModalidade";
        field.Type = TType.I64;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(AtencaoDomiciliarModalidade);
        oprot.WriteFieldEnd();
      }
      if (CondicoesAvaliadas != null && __isset.condicoesAvaliadas) {
        field.Name = "condicoesAvaliadas";
        field.Type = TType.List;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, CondicoesAvaliadas.Count));
          foreach (long _iter6 in CondicoesAvaliadas)
          {
            oprot.WriteI64(_iter6);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Cid10Principal != null && __isset.cid10Principal) {
        field.Name = "cid10Principal";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cid10Principal);
        oprot.WriteFieldEnd();
      }
      if (Cid10SecundarioUm != null && __isset.cid10SecundarioUm) {
        field.Name = "cid10SecundarioUm";
        field.Type = TType.String;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cid10SecundarioUm);
        oprot.WriteFieldEnd();
      }
      if (Cid10SecundarioDois != null && __isset.cid10SecundarioDois) {
        field.Name = "cid10SecundarioDois";
        field.Type = TType.String;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cid10SecundarioDois);
        oprot.WriteFieldEnd();
      }
      if (__isset.conclusaoDestinoElegivel) {
        field.Name = "conclusaoDestinoElegivel";
        field.Type = TType.I64;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ConclusaoDestinoElegivel);
        oprot.WriteFieldEnd();
      }
      if (ConclusaoDestinoInelegivel != null && __isset.conclusaoDestinoInelegivel) {
        field.Name = "conclusaoDestinoInelegivel";
        field.Type = TType.List;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, ConclusaoDestinoInelegivel.Count));
          foreach (long _iter7 in ConclusaoDestinoInelegivel)
          {
            oprot.WriteI64(_iter7);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.cuidadorCidadao) {
        field.Name = "cuidadorCidadao";
        field.Type = TType.I64;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CuidadorCidadao);
        oprot.WriteFieldEnd();
      }
      if (__isset.turno) {
        field.Name = "turno";
        field.Type = TType.I64;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Turno);
        oprot.WriteFieldEnd();
      }
      if (HeaderTransport != null && __isset.headerTransport) {
        field.Name = "headerTransport";
        field.Type = TType.Struct;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        HeaderTransport.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (NomePaiCidadao != null && __isset.nomePaiCidadao) {
        field.Name = "nomePaiCidadao";
        field.Type = TType.String;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NomePaiCidadao);
        oprot.WriteFieldEnd();
      }
      if (__isset.desconheceNomePai) {
        field.Name = "desconheceNomePai";
        field.Type = TType.Bool;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(DesconheceNomePai);
        oprot.WriteFieldEnd();
      }
      if (__isset.dtNaturalizacao) {
        field.Name = "dtNaturalizacao";
        field.Type = TType.I64;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DtNaturalizacao);
        oprot.WriteFieldEnd();
      }
      if (PortariaNaturalizacao != null && __isset.portariaNaturalizacao) {
        field.Name = "portariaNaturalizacao";
        field.Type = TType.String;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PortariaNaturalizacao);
        oprot.WriteFieldEnd();
      }
      if (__isset.dtEntradaBrasil) {
        field.Name = "dtEntradaBrasil";
        field.Type = TType.I64;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DtEntradaBrasil);
        oprot.WriteFieldEnd();
      }
      if (__isset.paisNascimento) {
        field.Name = "paisNascimento";
        field.Type = TType.I64;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PaisNascimento);
        oprot.WriteFieldEnd();
      }
      if (__isset.etnia) {
        field.Name = "etnia";
        field.Type = TType.I64;
        field.ID = 34;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Etnia);
        oprot.WriteFieldEnd();
      }
      if (CnsCuidador != null && __isset.cnsCuidador) {
        field.Name = "cnsCuidador";
        field.Type = TType.String;
        field.ID = 35;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CnsCuidador);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FichaAvaliacaoElegibilidadeThrift(");
      __sb.Append(", UuidFicha: ");
      __sb.Append(UuidFicha);
      if (__isset.tpCdsOrigem) {
        __sb.Append(", TpCdsOrigem: ");
        __sb.Append(TpCdsOrigem);
      }
      if (CnsCidadao != null && __isset.cnsCidadao) {
        __sb.Append(", CnsCidadao: ");
        __sb.Append(CnsCidadao);
      }
      if (NomeCidadao != null && __isset.nomeCidadao) {
        __sb.Append(", NomeCidadao: ");
        __sb.Append(NomeCidadao);
      }
      if (NomeSocialCidadao != null && __isset.nomeSocialCidadao) {
        __sb.Append(", NomeSocialCidadao: ");
        __sb.Append(NomeSocialCidadao);
      }
      if (__isset.dataNascimentoCidadao) {
        __sb.Append(", DataNascimentoCidadao: ");
        __sb.Append(DataNascimentoCidadao);
      }
      if (__isset.sexoCidadao) {
        __sb.Append(", SexoCidadao: ");
        __sb.Append(SexoCidadao);
      }
      if (__isset.racaCorCidadao) {
        __sb.Append(", RacaCorCidadao: ");
        __sb.Append(RacaCorCidadao);
      }
      if (NomeMaeCidadao != null && __isset.nomeMaeCidadao) {
        __sb.Append(", NomeMaeCidadao: ");
        __sb.Append(NomeMaeCidadao);
      }
      if (__isset.desconheceNomeMae) {
        __sb.Append(", DesconheceNomeMae: ");
        __sb.Append(DesconheceNomeMae);
      }
      if (CodigoIbgeMunicipioNascimento != null && __isset.codigoIbgeMunicipioNascimento) {
        __sb.Append(", CodigoIbgeMunicipioNascimento: ");
        __sb.Append(CodigoIbgeMunicipioNascimento);
      }
      if (__isset.nacionalidadeCidadao) {
        __sb.Append(", NacionalidadeCidadao: ");
        __sb.Append(NacionalidadeCidadao);
      }
      if (EmailCidadao != null && __isset.emailCidadao) {
        __sb.Append(", EmailCidadao: ");
        __sb.Append(EmailCidadao);
      }
      if (NumeroNisPisPasep != null && __isset.numeroNisPisPasep) {
        __sb.Append(", NumeroNisPisPasep: ");
        __sb.Append(NumeroNisPisPasep);
      }
      if (Endereco != null && __isset.endereco) {
        __sb.Append(", Endereco: ");
        __sb.Append(Endereco== null ? "<null>" : Endereco.ToString());
      }
      if (__isset.atencaoDomiciliarProcedencia) {
        __sb.Append(", AtencaoDomiciliarProcedencia: ");
        __sb.Append(AtencaoDomiciliarProcedencia);
      }
      if (__isset.atencaoDomiciliarModalidade) {
        __sb.Append(", AtencaoDomiciliarModalidade: ");
        __sb.Append(AtencaoDomiciliarModalidade);
      }
      if (CondicoesAvaliadas != null && __isset.condicoesAvaliadas) {
        __sb.Append(", CondicoesAvaliadas: ");
        __sb.Append(CondicoesAvaliadas);
      }
      if (Cid10Principal != null && __isset.cid10Principal) {
        __sb.Append(", Cid10Principal: ");
        __sb.Append(Cid10Principal);
      }
      if (Cid10SecundarioUm != null && __isset.cid10SecundarioUm) {
        __sb.Append(", Cid10SecundarioUm: ");
        __sb.Append(Cid10SecundarioUm);
      }
      if (Cid10SecundarioDois != null && __isset.cid10SecundarioDois) {
        __sb.Append(", Cid10SecundarioDois: ");
        __sb.Append(Cid10SecundarioDois);
      }
      if (__isset.conclusaoDestinoElegivel) {
        __sb.Append(", ConclusaoDestinoElegivel: ");
        __sb.Append(ConclusaoDestinoElegivel);
      }
      if (ConclusaoDestinoInelegivel != null && __isset.conclusaoDestinoInelegivel) {
        __sb.Append(", ConclusaoDestinoInelegivel: ");
        __sb.Append(ConclusaoDestinoInelegivel);
      }
      if (__isset.cuidadorCidadao) {
        __sb.Append(", CuidadorCidadao: ");
        __sb.Append(CuidadorCidadao);
      }
      if (__isset.turno) {
        __sb.Append(", Turno: ");
        __sb.Append(Turno);
      }
      if (HeaderTransport != null && __isset.headerTransport) {
        __sb.Append(", HeaderTransport: ");
        __sb.Append(HeaderTransport== null ? "<null>" : HeaderTransport.ToString());
      }
      if (NomePaiCidadao != null && __isset.nomePaiCidadao) {
        __sb.Append(", NomePaiCidadao: ");
        __sb.Append(NomePaiCidadao);
      }
      if (__isset.desconheceNomePai) {
        __sb.Append(", DesconheceNomePai: ");
        __sb.Append(DesconheceNomePai);
      }
      if (__isset.dtNaturalizacao) {
        __sb.Append(", DtNaturalizacao: ");
        __sb.Append(DtNaturalizacao);
      }
      if (PortariaNaturalizacao != null && __isset.portariaNaturalizacao) {
        __sb.Append(", PortariaNaturalizacao: ");
        __sb.Append(PortariaNaturalizacao);
      }
      if (__isset.dtEntradaBrasil) {
        __sb.Append(", DtEntradaBrasil: ");
        __sb.Append(DtEntradaBrasil);
      }
      if (__isset.paisNascimento) {
        __sb.Append(", PaisNascimento: ");
        __sb.Append(PaisNascimento);
      }
      if (__isset.etnia) {
        __sb.Append(", Etnia: ");
        __sb.Append(Etnia);
      }
      if (CnsCuidador != null && __isset.cnsCuidador) {
        __sb.Append(", CnsCuidador: ");
        __sb.Append(CnsCuidador);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
