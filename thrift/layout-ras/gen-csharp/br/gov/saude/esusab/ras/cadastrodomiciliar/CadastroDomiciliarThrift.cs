/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esusab.ras.cadastrodomiciliar
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CadastroDomiciliarThrift : TBase
  {
    private List<long> _animaisNoDomicilio;
    private CondicaoMoradiaThrift _condicaoMoradia;
    private br.gov.saude.esusab.ras.common.EnderecoLocalPermanenciaThrift _enderecoLocalPermanencia;
    private List<FamiliaRowThrift> _familias;
    private bool _fichaAtualizada;
    private string _quantosAnimaisNoDomicilio;
    private bool _stAnimaisNoDomicilio;
    private bool _statusTermoRecusa;
    private int _tpCdsOrigem;
    private string _uuidFichaOriginadora;
    private long _tipoDeImovel;
    private InstituicaoPermanenciaThrift _instituicaoPermanencia;
    private br.gov.saude.esusab.ras.common.UnicaLotacaoHeaderThrift _headerTransport;

    public List<long> AnimaisNoDomicilio
    {
      get
      {
        return _animaisNoDomicilio;
      }
      set
      {
        __isset.animaisNoDomicilio = true;
        this._animaisNoDomicilio = value;
      }
    }

    public CondicaoMoradiaThrift CondicaoMoradia
    {
      get
      {
        return _condicaoMoradia;
      }
      set
      {
        __isset.condicaoMoradia = true;
        this._condicaoMoradia = value;
      }
    }

    public br.gov.saude.esusab.ras.common.EnderecoLocalPermanenciaThrift EnderecoLocalPermanencia
    {
      get
      {
        return _enderecoLocalPermanencia;
      }
      set
      {
        __isset.enderecoLocalPermanencia = true;
        this._enderecoLocalPermanencia = value;
      }
    }

    public List<FamiliaRowThrift> Familias
    {
      get
      {
        return _familias;
      }
      set
      {
        __isset.familias = true;
        this._familias = value;
      }
    }

    public bool FichaAtualizada
    {
      get
      {
        return _fichaAtualizada;
      }
      set
      {
        __isset.fichaAtualizada = true;
        this._fichaAtualizada = value;
      }
    }

    public string QuantosAnimaisNoDomicilio
    {
      get
      {
        return _quantosAnimaisNoDomicilio;
      }
      set
      {
        __isset.quantosAnimaisNoDomicilio = true;
        this._quantosAnimaisNoDomicilio = value;
      }
    }

    public bool StAnimaisNoDomicilio
    {
      get
      {
        return _stAnimaisNoDomicilio;
      }
      set
      {
        __isset.stAnimaisNoDomicilio = true;
        this._stAnimaisNoDomicilio = value;
      }
    }

    public bool StatusTermoRecusa
    {
      get
      {
        return _statusTermoRecusa;
      }
      set
      {
        __isset.statusTermoRecusa = true;
        this._statusTermoRecusa = value;
      }
    }

    public int TpCdsOrigem
    {
      get
      {
        return _tpCdsOrigem;
      }
      set
      {
        __isset.tpCdsOrigem = true;
        this._tpCdsOrigem = value;
      }
    }

    public string Uuid { get; set; }

    public string UuidFichaOriginadora
    {
      get
      {
        return _uuidFichaOriginadora;
      }
      set
      {
        __isset.uuidFichaOriginadora = true;
        this._uuidFichaOriginadora = value;
      }
    }

    public long TipoDeImovel
    {
      get
      {
        return _tipoDeImovel;
      }
      set
      {
        __isset.tipoDeImovel = true;
        this._tipoDeImovel = value;
      }
    }

    public InstituicaoPermanenciaThrift InstituicaoPermanencia
    {
      get
      {
        return _instituicaoPermanencia;
      }
      set
      {
        __isset.instituicaoPermanencia = true;
        this._instituicaoPermanencia = value;
      }
    }

    public br.gov.saude.esusab.ras.common.UnicaLotacaoHeaderThrift HeaderTransport
    {
      get
      {
        return _headerTransport;
      }
      set
      {
        __isset.headerTransport = true;
        this._headerTransport = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool animaisNoDomicilio;
      public bool condicaoMoradia;
      public bool enderecoLocalPermanencia;
      public bool familias;
      public bool fichaAtualizada;
      public bool quantosAnimaisNoDomicilio;
      public bool stAnimaisNoDomicilio;
      public bool statusTermoRecusa;
      public bool tpCdsOrigem;
      public bool uuidFichaOriginadora;
      public bool tipoDeImovel;
      public bool instituicaoPermanencia;
      public bool headerTransport;
    }

    public CadastroDomiciliarThrift() {
    }

    public CadastroDomiciliarThrift(string uuid) : this() {
      this.Uuid = uuid;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_uuid = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                AnimaisNoDomicilio = new List<long>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  long _elem2;
                  _elem2 = iprot.ReadI64();
                  AnimaisNoDomicilio.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              CondicaoMoradia = new CondicaoMoradiaThrift();
              CondicaoMoradia.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              EnderecoLocalPermanencia = new br.gov.saude.esusab.ras.common.EnderecoLocalPermanenciaThrift();
              EnderecoLocalPermanencia.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                Familias = new List<FamiliaRowThrift>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  FamiliaRowThrift _elem5;
                  _elem5 = new FamiliaRowThrift();
                  _elem5.Read(iprot);
                  Familias.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              FichaAtualizada = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              QuantosAnimaisNoDomicilio = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              StAnimaisNoDomicilio = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              StatusTermoRecusa = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              TpCdsOrigem = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Uuid = iprot.ReadString();
              isset_uuid = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              UuidFichaOriginadora = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I64) {
              TipoDeImovel = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Struct) {
              InstituicaoPermanencia = new InstituicaoPermanenciaThrift();
              InstituicaoPermanencia.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Struct) {
              HeaderTransport = new br.gov.saude.esusab.ras.common.UnicaLotacaoHeaderThrift();
              HeaderTransport.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_uuid)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CadastroDomiciliarThrift");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AnimaisNoDomicilio != null && __isset.animaisNoDomicilio) {
        field.Name = "animaisNoDomicilio";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, AnimaisNoDomicilio.Count));
          foreach (long _iter6 in AnimaisNoDomicilio)
          {
            oprot.WriteI64(_iter6);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (CondicaoMoradia != null && __isset.condicaoMoradia) {
        field.Name = "condicaoMoradia";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        CondicaoMoradia.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (EnderecoLocalPermanencia != null && __isset.enderecoLocalPermanencia) {
        field.Name = "enderecoLocalPermanencia";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        EnderecoLocalPermanencia.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Familias != null && __isset.familias) {
        field.Name = "familias";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Familias.Count));
          foreach (FamiliaRowThrift _iter7 in Familias)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.fichaAtualizada) {
        field.Name = "fichaAtualizada";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(FichaAtualizada);
        oprot.WriteFieldEnd();
      }
      if (QuantosAnimaisNoDomicilio != null && __isset.quantosAnimaisNoDomicilio) {
        field.Name = "quantosAnimaisNoDomicilio";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(QuantosAnimaisNoDomicilio);
        oprot.WriteFieldEnd();
      }
      if (__isset.stAnimaisNoDomicilio) {
        field.Name = "stAnimaisNoDomicilio";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(StAnimaisNoDomicilio);
        oprot.WriteFieldEnd();
      }
      if (__isset.statusTermoRecusa) {
        field.Name = "statusTermoRecusa";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(StatusTermoRecusa);
        oprot.WriteFieldEnd();
      }
      if (__isset.tpCdsOrigem) {
        field.Name = "tpCdsOrigem";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TpCdsOrigem);
        oprot.WriteFieldEnd();
      }
      field.Name = "uuid";
      field.Type = TType.String;
      field.ID = 11;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Uuid);
      oprot.WriteFieldEnd();
      if (UuidFichaOriginadora != null && __isset.uuidFichaOriginadora) {
        field.Name = "uuidFichaOriginadora";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UuidFichaOriginadora);
        oprot.WriteFieldEnd();
      }
      if (__isset.tipoDeImovel) {
        field.Name = "tipoDeImovel";
        field.Type = TType.I64;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TipoDeImovel);
        oprot.WriteFieldEnd();
      }
      if (InstituicaoPermanencia != null && __isset.instituicaoPermanencia) {
        field.Name = "instituicaoPermanencia";
        field.Type = TType.Struct;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        InstituicaoPermanencia.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (HeaderTransport != null && __isset.headerTransport) {
        field.Name = "headerTransport";
        field.Type = TType.Struct;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        HeaderTransport.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CadastroDomiciliarThrift(");
      bool __first = true;
      if (AnimaisNoDomicilio != null && __isset.animaisNoDomicilio) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AnimaisNoDomicilio: ");
        __sb.Append(AnimaisNoDomicilio);
      }
      if (CondicaoMoradia != null && __isset.condicaoMoradia) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CondicaoMoradia: ");
        __sb.Append(CondicaoMoradia== null ? "<null>" : CondicaoMoradia.ToString());
      }
      if (EnderecoLocalPermanencia != null && __isset.enderecoLocalPermanencia) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EnderecoLocalPermanencia: ");
        __sb.Append(EnderecoLocalPermanencia== null ? "<null>" : EnderecoLocalPermanencia.ToString());
      }
      if (Familias != null && __isset.familias) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Familias: ");
        __sb.Append(Familias);
      }
      if (__isset.fichaAtualizada) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FichaAtualizada: ");
        __sb.Append(FichaAtualizada);
      }
      if (QuantosAnimaisNoDomicilio != null && __isset.quantosAnimaisNoDomicilio) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("QuantosAnimaisNoDomicilio: ");
        __sb.Append(QuantosAnimaisNoDomicilio);
      }
      if (__isset.stAnimaisNoDomicilio) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StAnimaisNoDomicilio: ");
        __sb.Append(StAnimaisNoDomicilio);
      }
      if (__isset.statusTermoRecusa) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StatusTermoRecusa: ");
        __sb.Append(StatusTermoRecusa);
      }
      if (__isset.tpCdsOrigem) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TpCdsOrigem: ");
        __sb.Append(TpCdsOrigem);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("Uuid: ");
      __sb.Append(Uuid);
      if (UuidFichaOriginadora != null && __isset.uuidFichaOriginadora) {
        __sb.Append(", UuidFichaOriginadora: ");
        __sb.Append(UuidFichaOriginadora);
      }
      if (__isset.tipoDeImovel) {
        __sb.Append(", TipoDeImovel: ");
        __sb.Append(TipoDeImovel);
      }
      if (InstituicaoPermanencia != null && __isset.instituicaoPermanencia) {
        __sb.Append(", InstituicaoPermanencia: ");
        __sb.Append(InstituicaoPermanencia== null ? "<null>" : InstituicaoPermanencia.ToString());
      }
      if (HeaderTransport != null && __isset.headerTransport) {
        __sb.Append(", HeaderTransport: ");
        __sb.Append(HeaderTransport== null ? "<null>" : HeaderTransport.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
