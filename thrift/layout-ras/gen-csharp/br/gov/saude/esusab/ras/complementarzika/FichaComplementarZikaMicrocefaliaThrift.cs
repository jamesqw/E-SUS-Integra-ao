/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esusab.ras.complementarzika
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FichaComplementarZikaMicrocefaliaThrift : TBase
  {
    private br.gov.saude.esusab.ras.common.UnicaLotacaoHeaderThrift _headerTransport;
    private int _tpCdsOrigem;
    private long _turno;
    private string _cnsCidadao;
    private string _cnsResponsavelFamiliar;
    private long _dataRealizacaoTesteOlhinho;
    private long _coResultadoTesteOlhinho;
    private long _dataRealizacaoExameFundoOlho;
    private long _coResultadoExameFundoOlho;
    private long _dataRealizacaoTesteOrelhinha;
    private long _coResultadoTesteOrelhinha;
    private long _dataRealizacaoUSTransfontanela;
    private long _coResultadoUsTransfontanela;
    private long _dataRealizacaoTomografiaComputadorizada;
    private long _coResultadoTomografiaComputadorizada;
    private long _dataRealizacaoRessonanciaMagnetica;
    private long _coResultadoRessonanciaMagnetica;

    public br.gov.saude.esusab.ras.common.UnicaLotacaoHeaderThrift HeaderTransport
    {
      get
      {
        return _headerTransport;
      }
      set
      {
        __isset.headerTransport = true;
        this._headerTransport = value;
      }
    }

    public string UuidFicha { get; set; }

    public int TpCdsOrigem
    {
      get
      {
        return _tpCdsOrigem;
      }
      set
      {
        __isset.tpCdsOrigem = true;
        this._tpCdsOrigem = value;
      }
    }

    public long Turno
    {
      get
      {
        return _turno;
      }
      set
      {
        __isset.turno = true;
        this._turno = value;
      }
    }

    public string CnsCidadao
    {
      get
      {
        return _cnsCidadao;
      }
      set
      {
        __isset.cnsCidadao = true;
        this._cnsCidadao = value;
      }
    }

    public string CnsResponsavelFamiliar
    {
      get
      {
        return _cnsResponsavelFamiliar;
      }
      set
      {
        __isset.cnsResponsavelFamiliar = true;
        this._cnsResponsavelFamiliar = value;
      }
    }

    public long DataRealizacaoTesteOlhinho
    {
      get
      {
        return _dataRealizacaoTesteOlhinho;
      }
      set
      {
        __isset.dataRealizacaoTesteOlhinho = true;
        this._dataRealizacaoTesteOlhinho = value;
      }
    }

    public long CoResultadoTesteOlhinho
    {
      get
      {
        return _coResultadoTesteOlhinho;
      }
      set
      {
        __isset.coResultadoTesteOlhinho = true;
        this._coResultadoTesteOlhinho = value;
      }
    }

    public long DataRealizacaoExameFundoOlho
    {
      get
      {
        return _dataRealizacaoExameFundoOlho;
      }
      set
      {
        __isset.dataRealizacaoExameFundoOlho = true;
        this._dataRealizacaoExameFundoOlho = value;
      }
    }

    public long CoResultadoExameFundoOlho
    {
      get
      {
        return _coResultadoExameFundoOlho;
      }
      set
      {
        __isset.coResultadoExameFundoOlho = true;
        this._coResultadoExameFundoOlho = value;
      }
    }

    public long DataRealizacaoTesteOrelhinha
    {
      get
      {
        return _dataRealizacaoTesteOrelhinha;
      }
      set
      {
        __isset.dataRealizacaoTesteOrelhinha = true;
        this._dataRealizacaoTesteOrelhinha = value;
      }
    }

    public long CoResultadoTesteOrelhinha
    {
      get
      {
        return _coResultadoTesteOrelhinha;
      }
      set
      {
        __isset.coResultadoTesteOrelhinha = true;
        this._coResultadoTesteOrelhinha = value;
      }
    }

    public long DataRealizacaoUSTransfontanela
    {
      get
      {
        return _dataRealizacaoUSTransfontanela;
      }
      set
      {
        __isset.dataRealizacaoUSTransfontanela = true;
        this._dataRealizacaoUSTransfontanela = value;
      }
    }

    public long CoResultadoUsTransfontanela
    {
      get
      {
        return _coResultadoUsTransfontanela;
      }
      set
      {
        __isset.coResultadoUsTransfontanela = true;
        this._coResultadoUsTransfontanela = value;
      }
    }

    public long DataRealizacaoTomografiaComputadorizada
    {
      get
      {
        return _dataRealizacaoTomografiaComputadorizada;
      }
      set
      {
        __isset.dataRealizacaoTomografiaComputadorizada = true;
        this._dataRealizacaoTomografiaComputadorizada = value;
      }
    }

    public long CoResultadoTomografiaComputadorizada
    {
      get
      {
        return _coResultadoTomografiaComputadorizada;
      }
      set
      {
        __isset.coResultadoTomografiaComputadorizada = true;
        this._coResultadoTomografiaComputadorizada = value;
      }
    }

    public long DataRealizacaoRessonanciaMagnetica
    {
      get
      {
        return _dataRealizacaoRessonanciaMagnetica;
      }
      set
      {
        __isset.dataRealizacaoRessonanciaMagnetica = true;
        this._dataRealizacaoRessonanciaMagnetica = value;
      }
    }

    public long CoResultadoRessonanciaMagnetica
    {
      get
      {
        return _coResultadoRessonanciaMagnetica;
      }
      set
      {
        __isset.coResultadoRessonanciaMagnetica = true;
        this._coResultadoRessonanciaMagnetica = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool headerTransport;
      public bool tpCdsOrigem;
      public bool turno;
      public bool cnsCidadao;
      public bool cnsResponsavelFamiliar;
      public bool dataRealizacaoTesteOlhinho;
      public bool coResultadoTesteOlhinho;
      public bool dataRealizacaoExameFundoOlho;
      public bool coResultadoExameFundoOlho;
      public bool dataRealizacaoTesteOrelhinha;
      public bool coResultadoTesteOrelhinha;
      public bool dataRealizacaoUSTransfontanela;
      public bool coResultadoUsTransfontanela;
      public bool dataRealizacaoTomografiaComputadorizada;
      public bool coResultadoTomografiaComputadorizada;
      public bool dataRealizacaoRessonanciaMagnetica;
      public bool coResultadoRessonanciaMagnetica;
    }

    public FichaComplementarZikaMicrocefaliaThrift() {
    }

    public FichaComplementarZikaMicrocefaliaThrift(string uuidFicha) : this() {
      this.UuidFicha = uuidFicha;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_uuidFicha = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              HeaderTransport = new br.gov.saude.esusab.ras.common.UnicaLotacaoHeaderThrift();
              HeaderTransport.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              UuidFicha = iprot.ReadString();
              isset_uuidFicha = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TpCdsOrigem = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Turno = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              CnsCidadao = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              CnsResponsavelFamiliar = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              DataRealizacaoTesteOlhinho = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              CoResultadoTesteOlhinho = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              DataRealizacaoExameFundoOlho = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              CoResultadoExameFundoOlho = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              DataRealizacaoTesteOrelhinha = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I64) {
              CoResultadoTesteOrelhinha = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I64) {
              DataRealizacaoUSTransfontanela = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I64) {
              CoResultadoUsTransfontanela = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I64) {
              DataRealizacaoTomografiaComputadorizada = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I64) {
              CoResultadoTomografiaComputadorizada = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I64) {
              DataRealizacaoRessonanciaMagnetica = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I64) {
              CoResultadoRessonanciaMagnetica = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_uuidFicha)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FichaComplementarZikaMicrocefaliaThrift");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (HeaderTransport != null && __isset.headerTransport) {
        field.Name = "headerTransport";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        HeaderTransport.Write(oprot);
        oprot.WriteFieldEnd();
      }
      field.Name = "uuidFicha";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(UuidFicha);
      oprot.WriteFieldEnd();
      if (__isset.tpCdsOrigem) {
        field.Name = "tpCdsOrigem";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TpCdsOrigem);
        oprot.WriteFieldEnd();
      }
      if (__isset.turno) {
        field.Name = "turno";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Turno);
        oprot.WriteFieldEnd();
      }
      if (CnsCidadao != null && __isset.cnsCidadao) {
        field.Name = "cnsCidadao";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CnsCidadao);
        oprot.WriteFieldEnd();
      }
      if (CnsResponsavelFamiliar != null && __isset.cnsResponsavelFamiliar) {
        field.Name = "cnsResponsavelFamiliar";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CnsResponsavelFamiliar);
        oprot.WriteFieldEnd();
      }
      if (__isset.dataRealizacaoTesteOlhinho) {
        field.Name = "dataRealizacaoTesteOlhinho";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DataRealizacaoTesteOlhinho);
        oprot.WriteFieldEnd();
      }
      if (__isset.coResultadoTesteOlhinho) {
        field.Name = "coResultadoTesteOlhinho";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CoResultadoTesteOlhinho);
        oprot.WriteFieldEnd();
      }
      if (__isset.dataRealizacaoExameFundoOlho) {
        field.Name = "dataRealizacaoExameFundoOlho";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DataRealizacaoExameFundoOlho);
        oprot.WriteFieldEnd();
      }
      if (__isset.coResultadoExameFundoOlho) {
        field.Name = "coResultadoExameFundoOlho";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CoResultadoExameFundoOlho);
        oprot.WriteFieldEnd();
      }
      if (__isset.dataRealizacaoTesteOrelhinha) {
        field.Name = "dataRealizacaoTesteOrelhinha";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DataRealizacaoTesteOrelhinha);
        oprot.WriteFieldEnd();
      }
      if (__isset.coResultadoTesteOrelhinha) {
        field.Name = "coResultadoTesteOrelhinha";
        field.Type = TType.I64;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CoResultadoTesteOrelhinha);
        oprot.WriteFieldEnd();
      }
      if (__isset.dataRealizacaoUSTransfontanela) {
        field.Name = "dataRealizacaoUSTransfontanela";
        field.Type = TType.I64;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DataRealizacaoUSTransfontanela);
        oprot.WriteFieldEnd();
      }
      if (__isset.coResultadoUsTransfontanela) {
        field.Name = "coResultadoUsTransfontanela";
        field.Type = TType.I64;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CoResultadoUsTransfontanela);
        oprot.WriteFieldEnd();
      }
      if (__isset.dataRealizacaoTomografiaComputadorizada) {
        field.Name = "dataRealizacaoTomografiaComputadorizada";
        field.Type = TType.I64;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DataRealizacaoTomografiaComputadorizada);
        oprot.WriteFieldEnd();
      }
      if (__isset.coResultadoTomografiaComputadorizada) {
        field.Name = "coResultadoTomografiaComputadorizada";
        field.Type = TType.I64;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CoResultadoTomografiaComputadorizada);
        oprot.WriteFieldEnd();
      }
      if (__isset.dataRealizacaoRessonanciaMagnetica) {
        field.Name = "dataRealizacaoRessonanciaMagnetica";
        field.Type = TType.I64;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DataRealizacaoRessonanciaMagnetica);
        oprot.WriteFieldEnd();
      }
      if (__isset.coResultadoRessonanciaMagnetica) {
        field.Name = "coResultadoRessonanciaMagnetica";
        field.Type = TType.I64;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CoResultadoRessonanciaMagnetica);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FichaComplementarZikaMicrocefaliaThrift(");
      bool __first = true;
      if (HeaderTransport != null && __isset.headerTransport) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HeaderTransport: ");
        __sb.Append(HeaderTransport== null ? "<null>" : HeaderTransport.ToString());
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("UuidFicha: ");
      __sb.Append(UuidFicha);
      if (__isset.tpCdsOrigem) {
        __sb.Append(", TpCdsOrigem: ");
        __sb.Append(TpCdsOrigem);
      }
      if (__isset.turno) {
        __sb.Append(", Turno: ");
        __sb.Append(Turno);
      }
      if (CnsCidadao != null && __isset.cnsCidadao) {
        __sb.Append(", CnsCidadao: ");
        __sb.Append(CnsCidadao);
      }
      if (CnsResponsavelFamiliar != null && __isset.cnsResponsavelFamiliar) {
        __sb.Append(", CnsResponsavelFamiliar: ");
        __sb.Append(CnsResponsavelFamiliar);
      }
      if (__isset.dataRealizacaoTesteOlhinho) {
        __sb.Append(", DataRealizacaoTesteOlhinho: ");
        __sb.Append(DataRealizacaoTesteOlhinho);
      }
      if (__isset.coResultadoTesteOlhinho) {
        __sb.Append(", CoResultadoTesteOlhinho: ");
        __sb.Append(CoResultadoTesteOlhinho);
      }
      if (__isset.dataRealizacaoExameFundoOlho) {
        __sb.Append(", DataRealizacaoExameFundoOlho: ");
        __sb.Append(DataRealizacaoExameFundoOlho);
      }
      if (__isset.coResultadoExameFundoOlho) {
        __sb.Append(", CoResultadoExameFundoOlho: ");
        __sb.Append(CoResultadoExameFundoOlho);
      }
      if (__isset.dataRealizacaoTesteOrelhinha) {
        __sb.Append(", DataRealizacaoTesteOrelhinha: ");
        __sb.Append(DataRealizacaoTesteOrelhinha);
      }
      if (__isset.coResultadoTesteOrelhinha) {
        __sb.Append(", CoResultadoTesteOrelhinha: ");
        __sb.Append(CoResultadoTesteOrelhinha);
      }
      if (__isset.dataRealizacaoUSTransfontanela) {
        __sb.Append(", DataRealizacaoUSTransfontanela: ");
        __sb.Append(DataRealizacaoUSTransfontanela);
      }
      if (__isset.coResultadoUsTransfontanela) {
        __sb.Append(", CoResultadoUsTransfontanela: ");
        __sb.Append(CoResultadoUsTransfontanela);
      }
      if (__isset.dataRealizacaoTomografiaComputadorizada) {
        __sb.Append(", DataRealizacaoTomografiaComputadorizada: ");
        __sb.Append(DataRealizacaoTomografiaComputadorizada);
      }
      if (__isset.coResultadoTomografiaComputadorizada) {
        __sb.Append(", CoResultadoTomografiaComputadorizada: ");
        __sb.Append(CoResultadoTomografiaComputadorizada);
      }
      if (__isset.dataRealizacaoRessonanciaMagnetica) {
        __sb.Append(", DataRealizacaoRessonanciaMagnetica: ");
        __sb.Append(DataRealizacaoRessonanciaMagnetica);
      }
      if (__isset.coResultadoRessonanciaMagnetica) {
        __sb.Append(", CoResultadoRessonanciaMagnetica: ");
        __sb.Append(CoResultadoRessonanciaMagnetica);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
