/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.gov.saude.esusab.ras.vacinacao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-3")
public class VacinaRowThrift implements org.apache.thrift.TBase<VacinaRowThrift, VacinaRowThrift._Fields>, java.io.Serializable, Cloneable, Comparable<VacinaRowThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VacinaRowThrift");

  private static final org.apache.thrift.protocol.TField IMUNOBIOLOGICO_FIELD_DESC = new org.apache.thrift.protocol.TField("imunobiologico", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ESTRATEGIA_VACINACAO_FIELD_DESC = new org.apache.thrift.protocol.TField("estrategiaVacinacao", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("dose", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("lote", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FABRICANTE_FIELD_DESC = new org.apache.thrift.protocol.TField("fabricante", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VacinaRowThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VacinaRowThriftTupleSchemeFactory());
  }

  private long imunobiologico; // optional
  private long estrategiaVacinacao; // optional
  private long dose; // optional
  private String lote; // optional
  private String fabricante; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IMUNOBIOLOGICO((short)1, "imunobiologico"),
    ESTRATEGIA_VACINACAO((short)2, "estrategiaVacinacao"),
    DOSE((short)3, "dose"),
    LOTE((short)4, "lote"),
    FABRICANTE((short)5, "fabricante");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IMUNOBIOLOGICO
          return IMUNOBIOLOGICO;
        case 2: // ESTRATEGIA_VACINACAO
          return ESTRATEGIA_VACINACAO;
        case 3: // DOSE
          return DOSE;
        case 4: // LOTE
          return LOTE;
        case 5: // FABRICANTE
          return FABRICANTE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IMUNOBIOLOGICO_ISSET_ID = 0;
  private static final int __ESTRATEGIAVACINACAO_ISSET_ID = 1;
  private static final int __DOSE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IMUNOBIOLOGICO,_Fields.ESTRATEGIA_VACINACAO,_Fields.DOSE,_Fields.LOTE,_Fields.FABRICANTE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IMUNOBIOLOGICO, new org.apache.thrift.meta_data.FieldMetaData("imunobiologico", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ESTRATEGIA_VACINACAO, new org.apache.thrift.meta_data.FieldMetaData("estrategiaVacinacao", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOSE, new org.apache.thrift.meta_data.FieldMetaData("dose", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOTE, new org.apache.thrift.meta_data.FieldMetaData("lote", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FABRICANTE, new org.apache.thrift.meta_data.FieldMetaData("fabricante", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VacinaRowThrift.class, metaDataMap);
  }

  public VacinaRowThrift() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VacinaRowThrift(VacinaRowThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.imunobiologico = other.imunobiologico;
    this.estrategiaVacinacao = other.estrategiaVacinacao;
    this.dose = other.dose;
    if (other.isSetLote()) {
      this.lote = other.lote;
    }
    if (other.isSetFabricante()) {
      this.fabricante = other.fabricante;
    }
  }

  public VacinaRowThrift deepCopy() {
    return new VacinaRowThrift(this);
  }

  @Override
  public void clear() {
    setImunobiologicoIsSet(false);
    this.imunobiologico = 0;
    setEstrategiaVacinacaoIsSet(false);
    this.estrategiaVacinacao = 0;
    setDoseIsSet(false);
    this.dose = 0;
    this.lote = null;
    this.fabricante = null;
  }

  public long getImunobiologico() {
    return this.imunobiologico;
  }

  public void setImunobiologico(long imunobiologico) {
    this.imunobiologico = imunobiologico;
    setImunobiologicoIsSet(true);
  }

  public void unsetImunobiologico() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMUNOBIOLOGICO_ISSET_ID);
  }

  /** Returns true if field imunobiologico is set (has been assigned a value) and false otherwise */
  public boolean isSetImunobiologico() {
    return EncodingUtils.testBit(__isset_bitfield, __IMUNOBIOLOGICO_ISSET_ID);
  }

  public void setImunobiologicoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMUNOBIOLOGICO_ISSET_ID, value);
  }

  public long getEstrategiaVacinacao() {
    return this.estrategiaVacinacao;
  }

  public void setEstrategiaVacinacao(long estrategiaVacinacao) {
    this.estrategiaVacinacao = estrategiaVacinacao;
    setEstrategiaVacinacaoIsSet(true);
  }

  public void unsetEstrategiaVacinacao() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ESTRATEGIAVACINACAO_ISSET_ID);
  }

  /** Returns true if field estrategiaVacinacao is set (has been assigned a value) and false otherwise */
  public boolean isSetEstrategiaVacinacao() {
    return EncodingUtils.testBit(__isset_bitfield, __ESTRATEGIAVACINACAO_ISSET_ID);
  }

  public void setEstrategiaVacinacaoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ESTRATEGIAVACINACAO_ISSET_ID, value);
  }

  public long getDose() {
    return this.dose;
  }

  public void setDose(long dose) {
    this.dose = dose;
    setDoseIsSet(true);
  }

  public void unsetDose() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOSE_ISSET_ID);
  }

  /** Returns true if field dose is set (has been assigned a value) and false otherwise */
  public boolean isSetDose() {
    return EncodingUtils.testBit(__isset_bitfield, __DOSE_ISSET_ID);
  }

  public void setDoseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOSE_ISSET_ID, value);
  }

  public String getLote() {
    return this.lote;
  }

  public void setLote(String lote) {
    this.lote = lote;
  }

  public void unsetLote() {
    this.lote = null;
  }

  /** Returns true if field lote is set (has been assigned a value) and false otherwise */
  public boolean isSetLote() {
    return this.lote != null;
  }

  public void setLoteIsSet(boolean value) {
    if (!value) {
      this.lote = null;
    }
  }

  public String getFabricante() {
    return this.fabricante;
  }

  public void setFabricante(String fabricante) {
    this.fabricante = fabricante;
  }

  public void unsetFabricante() {
    this.fabricante = null;
  }

  /** Returns true if field fabricante is set (has been assigned a value) and false otherwise */
  public boolean isSetFabricante() {
    return this.fabricante != null;
  }

  public void setFabricanteIsSet(boolean value) {
    if (!value) {
      this.fabricante = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IMUNOBIOLOGICO:
      if (value == null) {
        unsetImunobiologico();
      } else {
        setImunobiologico((Long)value);
      }
      break;

    case ESTRATEGIA_VACINACAO:
      if (value == null) {
        unsetEstrategiaVacinacao();
      } else {
        setEstrategiaVacinacao((Long)value);
      }
      break;

    case DOSE:
      if (value == null) {
        unsetDose();
      } else {
        setDose((Long)value);
      }
      break;

    case LOTE:
      if (value == null) {
        unsetLote();
      } else {
        setLote((String)value);
      }
      break;

    case FABRICANTE:
      if (value == null) {
        unsetFabricante();
      } else {
        setFabricante((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IMUNOBIOLOGICO:
      return Long.valueOf(getImunobiologico());

    case ESTRATEGIA_VACINACAO:
      return Long.valueOf(getEstrategiaVacinacao());

    case DOSE:
      return Long.valueOf(getDose());

    case LOTE:
      return getLote();

    case FABRICANTE:
      return getFabricante();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IMUNOBIOLOGICO:
      return isSetImunobiologico();
    case ESTRATEGIA_VACINACAO:
      return isSetEstrategiaVacinacao();
    case DOSE:
      return isSetDose();
    case LOTE:
      return isSetLote();
    case FABRICANTE:
      return isSetFabricante();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VacinaRowThrift)
      return this.equals((VacinaRowThrift)that);
    return false;
  }

  public boolean equals(VacinaRowThrift that) {
    if (that == null)
      return false;

    boolean this_present_imunobiologico = true && this.isSetImunobiologico();
    boolean that_present_imunobiologico = true && that.isSetImunobiologico();
    if (this_present_imunobiologico || that_present_imunobiologico) {
      if (!(this_present_imunobiologico && that_present_imunobiologico))
        return false;
      if (this.imunobiologico != that.imunobiologico)
        return false;
    }

    boolean this_present_estrategiaVacinacao = true && this.isSetEstrategiaVacinacao();
    boolean that_present_estrategiaVacinacao = true && that.isSetEstrategiaVacinacao();
    if (this_present_estrategiaVacinacao || that_present_estrategiaVacinacao) {
      if (!(this_present_estrategiaVacinacao && that_present_estrategiaVacinacao))
        return false;
      if (this.estrategiaVacinacao != that.estrategiaVacinacao)
        return false;
    }

    boolean this_present_dose = true && this.isSetDose();
    boolean that_present_dose = true && that.isSetDose();
    if (this_present_dose || that_present_dose) {
      if (!(this_present_dose && that_present_dose))
        return false;
      if (this.dose != that.dose)
        return false;
    }

    boolean this_present_lote = true && this.isSetLote();
    boolean that_present_lote = true && that.isSetLote();
    if (this_present_lote || that_present_lote) {
      if (!(this_present_lote && that_present_lote))
        return false;
      if (!this.lote.equals(that.lote))
        return false;
    }

    boolean this_present_fabricante = true && this.isSetFabricante();
    boolean that_present_fabricante = true && that.isSetFabricante();
    if (this_present_fabricante || that_present_fabricante) {
      if (!(this_present_fabricante && that_present_fabricante))
        return false;
      if (!this.fabricante.equals(that.fabricante))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_imunobiologico = true && (isSetImunobiologico());
    list.add(present_imunobiologico);
    if (present_imunobiologico)
      list.add(imunobiologico);

    boolean present_estrategiaVacinacao = true && (isSetEstrategiaVacinacao());
    list.add(present_estrategiaVacinacao);
    if (present_estrategiaVacinacao)
      list.add(estrategiaVacinacao);

    boolean present_dose = true && (isSetDose());
    list.add(present_dose);
    if (present_dose)
      list.add(dose);

    boolean present_lote = true && (isSetLote());
    list.add(present_lote);
    if (present_lote)
      list.add(lote);

    boolean present_fabricante = true && (isSetFabricante());
    list.add(present_fabricante);
    if (present_fabricante)
      list.add(fabricante);

    return list.hashCode();
  }

  @Override
  public int compareTo(VacinaRowThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetImunobiologico()).compareTo(other.isSetImunobiologico());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImunobiologico()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imunobiologico, other.imunobiologico);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstrategiaVacinacao()).compareTo(other.isSetEstrategiaVacinacao());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstrategiaVacinacao()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estrategiaVacinacao, other.estrategiaVacinacao);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDose()).compareTo(other.isSetDose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dose, other.dose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLote()).compareTo(other.isSetLote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lote, other.lote);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFabricante()).compareTo(other.isSetFabricante());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFabricante()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fabricante, other.fabricante);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VacinaRowThrift(");
    boolean first = true;

    if (isSetImunobiologico()) {
      sb.append("imunobiologico:");
      sb.append(this.imunobiologico);
      first = false;
    }
    if (isSetEstrategiaVacinacao()) {
      if (!first) sb.append(", ");
      sb.append("estrategiaVacinacao:");
      sb.append(this.estrategiaVacinacao);
      first = false;
    }
    if (isSetDose()) {
      if (!first) sb.append(", ");
      sb.append("dose:");
      sb.append(this.dose);
      first = false;
    }
    if (isSetLote()) {
      if (!first) sb.append(", ");
      sb.append("lote:");
      if (this.lote == null) {
        sb.append("null");
      } else {
        sb.append(this.lote);
      }
      first = false;
    }
    if (isSetFabricante()) {
      if (!first) sb.append(", ");
      sb.append("fabricante:");
      if (this.fabricante == null) {
        sb.append("null");
      } else {
        sb.append(this.fabricante);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VacinaRowThriftStandardSchemeFactory implements SchemeFactory {
    public VacinaRowThriftStandardScheme getScheme() {
      return new VacinaRowThriftStandardScheme();
    }
  }

  private static class VacinaRowThriftStandardScheme extends StandardScheme<VacinaRowThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VacinaRowThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IMUNOBIOLOGICO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.imunobiologico = iprot.readI64();
              struct.setImunobiologicoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ESTRATEGIA_VACINACAO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.estrategiaVacinacao = iprot.readI64();
              struct.setEstrategiaVacinacaoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dose = iprot.readI64();
              struct.setDoseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lote = iprot.readString();
              struct.setLoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FABRICANTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fabricante = iprot.readString();
              struct.setFabricanteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VacinaRowThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetImunobiologico()) {
        oprot.writeFieldBegin(IMUNOBIOLOGICO_FIELD_DESC);
        oprot.writeI64(struct.imunobiologico);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEstrategiaVacinacao()) {
        oprot.writeFieldBegin(ESTRATEGIA_VACINACAO_FIELD_DESC);
        oprot.writeI64(struct.estrategiaVacinacao);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDose()) {
        oprot.writeFieldBegin(DOSE_FIELD_DESC);
        oprot.writeI64(struct.dose);
        oprot.writeFieldEnd();
      }
      if (struct.lote != null) {
        if (struct.isSetLote()) {
          oprot.writeFieldBegin(LOTE_FIELD_DESC);
          oprot.writeString(struct.lote);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fabricante != null) {
        if (struct.isSetFabricante()) {
          oprot.writeFieldBegin(FABRICANTE_FIELD_DESC);
          oprot.writeString(struct.fabricante);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VacinaRowThriftTupleSchemeFactory implements SchemeFactory {
    public VacinaRowThriftTupleScheme getScheme() {
      return new VacinaRowThriftTupleScheme();
    }
  }

  private static class VacinaRowThriftTupleScheme extends TupleScheme<VacinaRowThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VacinaRowThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetImunobiologico()) {
        optionals.set(0);
      }
      if (struct.isSetEstrategiaVacinacao()) {
        optionals.set(1);
      }
      if (struct.isSetDose()) {
        optionals.set(2);
      }
      if (struct.isSetLote()) {
        optionals.set(3);
      }
      if (struct.isSetFabricante()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetImunobiologico()) {
        oprot.writeI64(struct.imunobiologico);
      }
      if (struct.isSetEstrategiaVacinacao()) {
        oprot.writeI64(struct.estrategiaVacinacao);
      }
      if (struct.isSetDose()) {
        oprot.writeI64(struct.dose);
      }
      if (struct.isSetLote()) {
        oprot.writeString(struct.lote);
      }
      if (struct.isSetFabricante()) {
        oprot.writeString(struct.fabricante);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VacinaRowThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.imunobiologico = iprot.readI64();
        struct.setImunobiologicoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.estrategiaVacinacao = iprot.readI64();
        struct.setEstrategiaVacinacaoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dose = iprot.readI64();
        struct.setDoseIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lote = iprot.readString();
        struct.setLoteIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fabricante = iprot.readString();
        struct.setFabricanteIsSet(true);
      }
    }
  }

}

