/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.gov.saude.esusab.ras.atendodonto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-10-07")
public class FichaAtendimentoOdontologicoChildThrift implements org.apache.thrift.TBase<FichaAtendimentoOdontologicoChildThrift, FichaAtendimentoOdontologicoChildThrift._Fields>, java.io.Serializable, Cloneable, Comparable<FichaAtendimentoOdontologicoChildThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FichaAtendimentoOdontologicoChildThrift");

  private static final org.apache.thrift.protocol.TField DT_NASCIMENTO_FIELD_DESC = new org.apache.thrift.protocol.TField("dtNascimento", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CNS_CIDADAO_FIELD_DESC = new org.apache.thrift.protocol.TField("cnsCidadao", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_PRONTUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("numProntuario", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GESTANTE_FIELD_DESC = new org.apache.thrift.protocol.TField("gestante", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField NECESSIDADES_ESPECIAIS_FIELD_DESC = new org.apache.thrift.protocol.TField("necessidadesEspeciais", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField LOCAL_ATENDIMENTO_FIELD_DESC = new org.apache.thrift.protocol.TField("localAtendimento", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TIPO_ATENDIMENTO_FIELD_DESC = new org.apache.thrift.protocol.TField("tipoAtendimento", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TIPOS_ENCAM_ODONTO_FIELD_DESC = new org.apache.thrift.protocol.TField("tiposEncamOdonto", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField TIPOS_FORNECIM_ODONTO_FIELD_DESC = new org.apache.thrift.protocol.TField("tiposFornecimOdonto", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField TIPOS_VIGILANCIA_SAUDE_BUCAL_FIELD_DESC = new org.apache.thrift.protocol.TField("tiposVigilanciaSaudeBucal", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField TIPOS_CONSULTA_ODONTO_FIELD_DESC = new org.apache.thrift.protocol.TField("tiposConsultaOdonto", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField PROCEDIMENTOS_REALIZADOS_FIELD_DESC = new org.apache.thrift.protocol.TField("procedimentosRealizados", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField SEXO_FIELD_DESC = new org.apache.thrift.protocol.TField("sexo", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField TURNO_FIELD_DESC = new org.apache.thrift.protocol.TField("turno", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField DATA_HORA_INICIAL_ATENDIMENTO_FIELD_DESC = new org.apache.thrift.protocol.TField("dataHoraInicialAtendimento", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField DATA_HORA_FINAL_ATENDIMENTO_FIELD_DESC = new org.apache.thrift.protocol.TField("dataHoraFinalAtendimento", org.apache.thrift.protocol.TType.I64, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FichaAtendimentoOdontologicoChildThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FichaAtendimentoOdontologicoChildThriftTupleSchemeFactory());
  }

  private long dtNascimento; // optional
  private String cnsCidadao; // optional
  private String numProntuario; // optional
  private boolean gestante; // optional
  private boolean necessidadesEspeciais; // optional
  private long localAtendimento; // optional
  private long tipoAtendimento; // optional
  private List<Long> tiposEncamOdonto; // optional
  private List<Long> tiposFornecimOdonto; // optional
  private List<Long> tiposVigilanciaSaudeBucal; // optional
  private List<Long> tiposConsultaOdonto; // optional
  private List<ProcedimentoQuantidadeThrift> procedimentosRealizados; // optional
  private long sexo; // optional
  private long turno; // optional
  private long dataHoraInicialAtendimento; // optional
  private long dataHoraFinalAtendimento; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DT_NASCIMENTO((short)1, "dtNascimento"),
    CNS_CIDADAO((short)2, "cnsCidadao"),
    NUM_PRONTUARIO((short)3, "numProntuario"),
    GESTANTE((short)4, "gestante"),
    NECESSIDADES_ESPECIAIS((short)5, "necessidadesEspeciais"),
    LOCAL_ATENDIMENTO((short)6, "localAtendimento"),
    TIPO_ATENDIMENTO((short)7, "tipoAtendimento"),
    TIPOS_ENCAM_ODONTO((short)8, "tiposEncamOdonto"),
    TIPOS_FORNECIM_ODONTO((short)9, "tiposFornecimOdonto"),
    TIPOS_VIGILANCIA_SAUDE_BUCAL((short)10, "tiposVigilanciaSaudeBucal"),
    TIPOS_CONSULTA_ODONTO((short)11, "tiposConsultaOdonto"),
    PROCEDIMENTOS_REALIZADOS((short)12, "procedimentosRealizados"),
    SEXO((short)14, "sexo"),
    TURNO((short)15, "turno"),
    DATA_HORA_INICIAL_ATENDIMENTO((short)16, "dataHoraInicialAtendimento"),
    DATA_HORA_FINAL_ATENDIMENTO((short)17, "dataHoraFinalAtendimento");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DT_NASCIMENTO
          return DT_NASCIMENTO;
        case 2: // CNS_CIDADAO
          return CNS_CIDADAO;
        case 3: // NUM_PRONTUARIO
          return NUM_PRONTUARIO;
        case 4: // GESTANTE
          return GESTANTE;
        case 5: // NECESSIDADES_ESPECIAIS
          return NECESSIDADES_ESPECIAIS;
        case 6: // LOCAL_ATENDIMENTO
          return LOCAL_ATENDIMENTO;
        case 7: // TIPO_ATENDIMENTO
          return TIPO_ATENDIMENTO;
        case 8: // TIPOS_ENCAM_ODONTO
          return TIPOS_ENCAM_ODONTO;
        case 9: // TIPOS_FORNECIM_ODONTO
          return TIPOS_FORNECIM_ODONTO;
        case 10: // TIPOS_VIGILANCIA_SAUDE_BUCAL
          return TIPOS_VIGILANCIA_SAUDE_BUCAL;
        case 11: // TIPOS_CONSULTA_ODONTO
          return TIPOS_CONSULTA_ODONTO;
        case 12: // PROCEDIMENTOS_REALIZADOS
          return PROCEDIMENTOS_REALIZADOS;
        case 14: // SEXO
          return SEXO;
        case 15: // TURNO
          return TURNO;
        case 16: // DATA_HORA_INICIAL_ATENDIMENTO
          return DATA_HORA_INICIAL_ATENDIMENTO;
        case 17: // DATA_HORA_FINAL_ATENDIMENTO
          return DATA_HORA_FINAL_ATENDIMENTO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DTNASCIMENTO_ISSET_ID = 0;
  private static final int __GESTANTE_ISSET_ID = 1;
  private static final int __NECESSIDADESESPECIAIS_ISSET_ID = 2;
  private static final int __LOCALATENDIMENTO_ISSET_ID = 3;
  private static final int __TIPOATENDIMENTO_ISSET_ID = 4;
  private static final int __SEXO_ISSET_ID = 5;
  private static final int __TURNO_ISSET_ID = 6;
  private static final int __DATAHORAINICIALATENDIMENTO_ISSET_ID = 7;
  private static final int __DATAHORAFINALATENDIMENTO_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DT_NASCIMENTO,_Fields.CNS_CIDADAO,_Fields.NUM_PRONTUARIO,_Fields.GESTANTE,_Fields.NECESSIDADES_ESPECIAIS,_Fields.LOCAL_ATENDIMENTO,_Fields.TIPO_ATENDIMENTO,_Fields.TIPOS_ENCAM_ODONTO,_Fields.TIPOS_FORNECIM_ODONTO,_Fields.TIPOS_VIGILANCIA_SAUDE_BUCAL,_Fields.TIPOS_CONSULTA_ODONTO,_Fields.PROCEDIMENTOS_REALIZADOS,_Fields.SEXO,_Fields.TURNO,_Fields.DATA_HORA_INICIAL_ATENDIMENTO,_Fields.DATA_HORA_FINAL_ATENDIMENTO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DT_NASCIMENTO, new org.apache.thrift.meta_data.FieldMetaData("dtNascimento", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CNS_CIDADAO, new org.apache.thrift.meta_data.FieldMetaData("cnsCidadao", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_PRONTUARIO, new org.apache.thrift.meta_data.FieldMetaData("numProntuario", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GESTANTE, new org.apache.thrift.meta_data.FieldMetaData("gestante", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NECESSIDADES_ESPECIAIS, new org.apache.thrift.meta_data.FieldMetaData("necessidadesEspeciais", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOCAL_ATENDIMENTO, new org.apache.thrift.meta_data.FieldMetaData("localAtendimento", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIPO_ATENDIMENTO, new org.apache.thrift.meta_data.FieldMetaData("tipoAtendimento", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIPOS_ENCAM_ODONTO, new org.apache.thrift.meta_data.FieldMetaData("tiposEncamOdonto", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.TIPOS_FORNECIM_ODONTO, new org.apache.thrift.meta_data.FieldMetaData("tiposFornecimOdonto", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.TIPOS_VIGILANCIA_SAUDE_BUCAL, new org.apache.thrift.meta_data.FieldMetaData("tiposVigilanciaSaudeBucal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.TIPOS_CONSULTA_ODONTO, new org.apache.thrift.meta_data.FieldMetaData("tiposConsultaOdonto", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.PROCEDIMENTOS_REALIZADOS, new org.apache.thrift.meta_data.FieldMetaData("procedimentosRealizados", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProcedimentoQuantidadeThrift.class))));
    tmpMap.put(_Fields.SEXO, new org.apache.thrift.meta_data.FieldMetaData("sexo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TURNO, new org.apache.thrift.meta_data.FieldMetaData("turno", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_HORA_INICIAL_ATENDIMENTO, new org.apache.thrift.meta_data.FieldMetaData("dataHoraInicialAtendimento", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_HORA_FINAL_ATENDIMENTO, new org.apache.thrift.meta_data.FieldMetaData("dataHoraFinalAtendimento", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FichaAtendimentoOdontologicoChildThrift.class, metaDataMap);
  }

  public FichaAtendimentoOdontologicoChildThrift() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FichaAtendimentoOdontologicoChildThrift(FichaAtendimentoOdontologicoChildThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dtNascimento = other.dtNascimento;
    if (other.isSetCnsCidadao()) {
      this.cnsCidadao = other.cnsCidadao;
    }
    if (other.isSetNumProntuario()) {
      this.numProntuario = other.numProntuario;
    }
    this.gestante = other.gestante;
    this.necessidadesEspeciais = other.necessidadesEspeciais;
    this.localAtendimento = other.localAtendimento;
    this.tipoAtendimento = other.tipoAtendimento;
    if (other.isSetTiposEncamOdonto()) {
      List<Long> __this__tiposEncamOdonto = new ArrayList<Long>(other.tiposEncamOdonto);
      this.tiposEncamOdonto = __this__tiposEncamOdonto;
    }
    if (other.isSetTiposFornecimOdonto()) {
      List<Long> __this__tiposFornecimOdonto = new ArrayList<Long>(other.tiposFornecimOdonto);
      this.tiposFornecimOdonto = __this__tiposFornecimOdonto;
    }
    if (other.isSetTiposVigilanciaSaudeBucal()) {
      List<Long> __this__tiposVigilanciaSaudeBucal = new ArrayList<Long>(other.tiposVigilanciaSaudeBucal);
      this.tiposVigilanciaSaudeBucal = __this__tiposVigilanciaSaudeBucal;
    }
    if (other.isSetTiposConsultaOdonto()) {
      List<Long> __this__tiposConsultaOdonto = new ArrayList<Long>(other.tiposConsultaOdonto);
      this.tiposConsultaOdonto = __this__tiposConsultaOdonto;
    }
    if (other.isSetProcedimentosRealizados()) {
      List<ProcedimentoQuantidadeThrift> __this__procedimentosRealizados = new ArrayList<ProcedimentoQuantidadeThrift>(other.procedimentosRealizados.size());
      for (ProcedimentoQuantidadeThrift other_element : other.procedimentosRealizados) {
        __this__procedimentosRealizados.add(new ProcedimentoQuantidadeThrift(other_element));
      }
      this.procedimentosRealizados = __this__procedimentosRealizados;
    }
    this.sexo = other.sexo;
    this.turno = other.turno;
    this.dataHoraInicialAtendimento = other.dataHoraInicialAtendimento;
    this.dataHoraFinalAtendimento = other.dataHoraFinalAtendimento;
  }

  public FichaAtendimentoOdontologicoChildThrift deepCopy() {
    return new FichaAtendimentoOdontologicoChildThrift(this);
  }

  @Override
  public void clear() {
    setDtNascimentoIsSet(false);
    this.dtNascimento = 0;
    this.cnsCidadao = null;
    this.numProntuario = null;
    setGestanteIsSet(false);
    this.gestante = false;
    setNecessidadesEspeciaisIsSet(false);
    this.necessidadesEspeciais = false;
    setLocalAtendimentoIsSet(false);
    this.localAtendimento = 0;
    setTipoAtendimentoIsSet(false);
    this.tipoAtendimento = 0;
    this.tiposEncamOdonto = null;
    this.tiposFornecimOdonto = null;
    this.tiposVigilanciaSaudeBucal = null;
    this.tiposConsultaOdonto = null;
    this.procedimentosRealizados = null;
    setSexoIsSet(false);
    this.sexo = 0;
    setTurnoIsSet(false);
    this.turno = 0;
    setDataHoraInicialAtendimentoIsSet(false);
    this.dataHoraInicialAtendimento = 0;
    setDataHoraFinalAtendimentoIsSet(false);
    this.dataHoraFinalAtendimento = 0;
  }

  public long getDtNascimento() {
    return this.dtNascimento;
  }

  public void setDtNascimento(long dtNascimento) {
    this.dtNascimento = dtNascimento;
    setDtNascimentoIsSet(true);
  }

  public void unsetDtNascimento() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DTNASCIMENTO_ISSET_ID);
  }

  /** Returns true if field dtNascimento is set (has been assigned a value) and false otherwise */
  public boolean isSetDtNascimento() {
    return EncodingUtils.testBit(__isset_bitfield, __DTNASCIMENTO_ISSET_ID);
  }

  public void setDtNascimentoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DTNASCIMENTO_ISSET_ID, value);
  }

  public String getCnsCidadao() {
    return this.cnsCidadao;
  }

  public void setCnsCidadao(String cnsCidadao) {
    this.cnsCidadao = cnsCidadao;
  }

  public void unsetCnsCidadao() {
    this.cnsCidadao = null;
  }

  /** Returns true if field cnsCidadao is set (has been assigned a value) and false otherwise */
  public boolean isSetCnsCidadao() {
    return this.cnsCidadao != null;
  }

  public void setCnsCidadaoIsSet(boolean value) {
    if (!value) {
      this.cnsCidadao = null;
    }
  }

  public String getNumProntuario() {
    return this.numProntuario;
  }

  public void setNumProntuario(String numProntuario) {
    this.numProntuario = numProntuario;
  }

  public void unsetNumProntuario() {
    this.numProntuario = null;
  }

  /** Returns true if field numProntuario is set (has been assigned a value) and false otherwise */
  public boolean isSetNumProntuario() {
    return this.numProntuario != null;
  }

  public void setNumProntuarioIsSet(boolean value) {
    if (!value) {
      this.numProntuario = null;
    }
  }

  public boolean isGestante() {
    return this.gestante;
  }

  public void setGestante(boolean gestante) {
    this.gestante = gestante;
    setGestanteIsSet(true);
  }

  public void unsetGestante() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GESTANTE_ISSET_ID);
  }

  /** Returns true if field gestante is set (has been assigned a value) and false otherwise */
  public boolean isSetGestante() {
    return EncodingUtils.testBit(__isset_bitfield, __GESTANTE_ISSET_ID);
  }

  public void setGestanteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GESTANTE_ISSET_ID, value);
  }

  public boolean isNecessidadesEspeciais() {
    return this.necessidadesEspeciais;
  }

  public void setNecessidadesEspeciais(boolean necessidadesEspeciais) {
    this.necessidadesEspeciais = necessidadesEspeciais;
    setNecessidadesEspeciaisIsSet(true);
  }

  public void unsetNecessidadesEspeciais() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NECESSIDADESESPECIAIS_ISSET_ID);
  }

  /** Returns true if field necessidadesEspeciais is set (has been assigned a value) and false otherwise */
  public boolean isSetNecessidadesEspeciais() {
    return EncodingUtils.testBit(__isset_bitfield, __NECESSIDADESESPECIAIS_ISSET_ID);
  }

  public void setNecessidadesEspeciaisIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NECESSIDADESESPECIAIS_ISSET_ID, value);
  }

  public long getLocalAtendimento() {
    return this.localAtendimento;
  }

  public void setLocalAtendimento(long localAtendimento) {
    this.localAtendimento = localAtendimento;
    setLocalAtendimentoIsSet(true);
  }

  public void unsetLocalAtendimento() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCALATENDIMENTO_ISSET_ID);
  }

  /** Returns true if field localAtendimento is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalAtendimento() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCALATENDIMENTO_ISSET_ID);
  }

  public void setLocalAtendimentoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCALATENDIMENTO_ISSET_ID, value);
  }

  public long getTipoAtendimento() {
    return this.tipoAtendimento;
  }

  public void setTipoAtendimento(long tipoAtendimento) {
    this.tipoAtendimento = tipoAtendimento;
    setTipoAtendimentoIsSet(true);
  }

  public void unsetTipoAtendimento() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIPOATENDIMENTO_ISSET_ID);
  }

  /** Returns true if field tipoAtendimento is set (has been assigned a value) and false otherwise */
  public boolean isSetTipoAtendimento() {
    return EncodingUtils.testBit(__isset_bitfield, __TIPOATENDIMENTO_ISSET_ID);
  }

  public void setTipoAtendimentoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIPOATENDIMENTO_ISSET_ID, value);
  }

  public int getTiposEncamOdontoSize() {
    return (this.tiposEncamOdonto == null) ? 0 : this.tiposEncamOdonto.size();
  }

  public java.util.Iterator<Long> getTiposEncamOdontoIterator() {
    return (this.tiposEncamOdonto == null) ? null : this.tiposEncamOdonto.iterator();
  }

  public void addToTiposEncamOdonto(long elem) {
    if (this.tiposEncamOdonto == null) {
      this.tiposEncamOdonto = new ArrayList<Long>();
    }
    this.tiposEncamOdonto.add(elem);
  }

  public List<Long> getTiposEncamOdonto() {
    return this.tiposEncamOdonto;
  }

  public void setTiposEncamOdonto(List<Long> tiposEncamOdonto) {
    this.tiposEncamOdonto = tiposEncamOdonto;
  }

  public void unsetTiposEncamOdonto() {
    this.tiposEncamOdonto = null;
  }

  /** Returns true if field tiposEncamOdonto is set (has been assigned a value) and false otherwise */
  public boolean isSetTiposEncamOdonto() {
    return this.tiposEncamOdonto != null;
  }

  public void setTiposEncamOdontoIsSet(boolean value) {
    if (!value) {
      this.tiposEncamOdonto = null;
    }
  }

  public int getTiposFornecimOdontoSize() {
    return (this.tiposFornecimOdonto == null) ? 0 : this.tiposFornecimOdonto.size();
  }

  public java.util.Iterator<Long> getTiposFornecimOdontoIterator() {
    return (this.tiposFornecimOdonto == null) ? null : this.tiposFornecimOdonto.iterator();
  }

  public void addToTiposFornecimOdonto(long elem) {
    if (this.tiposFornecimOdonto == null) {
      this.tiposFornecimOdonto = new ArrayList<Long>();
    }
    this.tiposFornecimOdonto.add(elem);
  }

  public List<Long> getTiposFornecimOdonto() {
    return this.tiposFornecimOdonto;
  }

  public void setTiposFornecimOdonto(List<Long> tiposFornecimOdonto) {
    this.tiposFornecimOdonto = tiposFornecimOdonto;
  }

  public void unsetTiposFornecimOdonto() {
    this.tiposFornecimOdonto = null;
  }

  /** Returns true if field tiposFornecimOdonto is set (has been assigned a value) and false otherwise */
  public boolean isSetTiposFornecimOdonto() {
    return this.tiposFornecimOdonto != null;
  }

  public void setTiposFornecimOdontoIsSet(boolean value) {
    if (!value) {
      this.tiposFornecimOdonto = null;
    }
  }

  public int getTiposVigilanciaSaudeBucalSize() {
    return (this.tiposVigilanciaSaudeBucal == null) ? 0 : this.tiposVigilanciaSaudeBucal.size();
  }

  public java.util.Iterator<Long> getTiposVigilanciaSaudeBucalIterator() {
    return (this.tiposVigilanciaSaudeBucal == null) ? null : this.tiposVigilanciaSaudeBucal.iterator();
  }

  public void addToTiposVigilanciaSaudeBucal(long elem) {
    if (this.tiposVigilanciaSaudeBucal == null) {
      this.tiposVigilanciaSaudeBucal = new ArrayList<Long>();
    }
    this.tiposVigilanciaSaudeBucal.add(elem);
  }

  public List<Long> getTiposVigilanciaSaudeBucal() {
    return this.tiposVigilanciaSaudeBucal;
  }

  public void setTiposVigilanciaSaudeBucal(List<Long> tiposVigilanciaSaudeBucal) {
    this.tiposVigilanciaSaudeBucal = tiposVigilanciaSaudeBucal;
  }

  public void unsetTiposVigilanciaSaudeBucal() {
    this.tiposVigilanciaSaudeBucal = null;
  }

  /** Returns true if field tiposVigilanciaSaudeBucal is set (has been assigned a value) and false otherwise */
  public boolean isSetTiposVigilanciaSaudeBucal() {
    return this.tiposVigilanciaSaudeBucal != null;
  }

  public void setTiposVigilanciaSaudeBucalIsSet(boolean value) {
    if (!value) {
      this.tiposVigilanciaSaudeBucal = null;
    }
  }

  public int getTiposConsultaOdontoSize() {
    return (this.tiposConsultaOdonto == null) ? 0 : this.tiposConsultaOdonto.size();
  }

  public java.util.Iterator<Long> getTiposConsultaOdontoIterator() {
    return (this.tiposConsultaOdonto == null) ? null : this.tiposConsultaOdonto.iterator();
  }

  public void addToTiposConsultaOdonto(long elem) {
    if (this.tiposConsultaOdonto == null) {
      this.tiposConsultaOdonto = new ArrayList<Long>();
    }
    this.tiposConsultaOdonto.add(elem);
  }

  public List<Long> getTiposConsultaOdonto() {
    return this.tiposConsultaOdonto;
  }

  public void setTiposConsultaOdonto(List<Long> tiposConsultaOdonto) {
    this.tiposConsultaOdonto = tiposConsultaOdonto;
  }

  public void unsetTiposConsultaOdonto() {
    this.tiposConsultaOdonto = null;
  }

  /** Returns true if field tiposConsultaOdonto is set (has been assigned a value) and false otherwise */
  public boolean isSetTiposConsultaOdonto() {
    return this.tiposConsultaOdonto != null;
  }

  public void setTiposConsultaOdontoIsSet(boolean value) {
    if (!value) {
      this.tiposConsultaOdonto = null;
    }
  }

  public int getProcedimentosRealizadosSize() {
    return (this.procedimentosRealizados == null) ? 0 : this.procedimentosRealizados.size();
  }

  public java.util.Iterator<ProcedimentoQuantidadeThrift> getProcedimentosRealizadosIterator() {
    return (this.procedimentosRealizados == null) ? null : this.procedimentosRealizados.iterator();
  }

  public void addToProcedimentosRealizados(ProcedimentoQuantidadeThrift elem) {
    if (this.procedimentosRealizados == null) {
      this.procedimentosRealizados = new ArrayList<ProcedimentoQuantidadeThrift>();
    }
    this.procedimentosRealizados.add(elem);
  }

  public List<ProcedimentoQuantidadeThrift> getProcedimentosRealizados() {
    return this.procedimentosRealizados;
  }

  public void setProcedimentosRealizados(List<ProcedimentoQuantidadeThrift> procedimentosRealizados) {
    this.procedimentosRealizados = procedimentosRealizados;
  }

  public void unsetProcedimentosRealizados() {
    this.procedimentosRealizados = null;
  }

  /** Returns true if field procedimentosRealizados is set (has been assigned a value) and false otherwise */
  public boolean isSetProcedimentosRealizados() {
    return this.procedimentosRealizados != null;
  }

  public void setProcedimentosRealizadosIsSet(boolean value) {
    if (!value) {
      this.procedimentosRealizados = null;
    }
  }

  public long getSexo() {
    return this.sexo;
  }

  public void setSexo(long sexo) {
    this.sexo = sexo;
    setSexoIsSet(true);
  }

  public void unsetSexo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEXO_ISSET_ID);
  }

  /** Returns true if field sexo is set (has been assigned a value) and false otherwise */
  public boolean isSetSexo() {
    return EncodingUtils.testBit(__isset_bitfield, __SEXO_ISSET_ID);
  }

  public void setSexoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEXO_ISSET_ID, value);
  }

  public long getTurno() {
    return this.turno;
  }

  public void setTurno(long turno) {
    this.turno = turno;
    setTurnoIsSet(true);
  }

  public void unsetTurno() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNO_ISSET_ID);
  }

  /** Returns true if field turno is set (has been assigned a value) and false otherwise */
  public boolean isSetTurno() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNO_ISSET_ID);
  }

  public void setTurnoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNO_ISSET_ID, value);
  }

  public long getDataHoraInicialAtendimento() {
    return this.dataHoraInicialAtendimento;
  }

  public void setDataHoraInicialAtendimento(long dataHoraInicialAtendimento) {
    this.dataHoraInicialAtendimento = dataHoraInicialAtendimento;
    setDataHoraInicialAtendimentoIsSet(true);
  }

  public void unsetDataHoraInicialAtendimento() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAHORAINICIALATENDIMENTO_ISSET_ID);
  }

  /** Returns true if field dataHoraInicialAtendimento is set (has been assigned a value) and false otherwise */
  public boolean isSetDataHoraInicialAtendimento() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAHORAINICIALATENDIMENTO_ISSET_ID);
  }

  public void setDataHoraInicialAtendimentoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAHORAINICIALATENDIMENTO_ISSET_ID, value);
  }

  public long getDataHoraFinalAtendimento() {
    return this.dataHoraFinalAtendimento;
  }

  public void setDataHoraFinalAtendimento(long dataHoraFinalAtendimento) {
    this.dataHoraFinalAtendimento = dataHoraFinalAtendimento;
    setDataHoraFinalAtendimentoIsSet(true);
  }

  public void unsetDataHoraFinalAtendimento() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAHORAFINALATENDIMENTO_ISSET_ID);
  }

  /** Returns true if field dataHoraFinalAtendimento is set (has been assigned a value) and false otherwise */
  public boolean isSetDataHoraFinalAtendimento() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAHORAFINALATENDIMENTO_ISSET_ID);
  }

  public void setDataHoraFinalAtendimentoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAHORAFINALATENDIMENTO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DT_NASCIMENTO:
      if (value == null) {
        unsetDtNascimento();
      } else {
        setDtNascimento((Long)value);
      }
      break;

    case CNS_CIDADAO:
      if (value == null) {
        unsetCnsCidadao();
      } else {
        setCnsCidadao((String)value);
      }
      break;

    case NUM_PRONTUARIO:
      if (value == null) {
        unsetNumProntuario();
      } else {
        setNumProntuario((String)value);
      }
      break;

    case GESTANTE:
      if (value == null) {
        unsetGestante();
      } else {
        setGestante((Boolean)value);
      }
      break;

    case NECESSIDADES_ESPECIAIS:
      if (value == null) {
        unsetNecessidadesEspeciais();
      } else {
        setNecessidadesEspeciais((Boolean)value);
      }
      break;

    case LOCAL_ATENDIMENTO:
      if (value == null) {
        unsetLocalAtendimento();
      } else {
        setLocalAtendimento((Long)value);
      }
      break;

    case TIPO_ATENDIMENTO:
      if (value == null) {
        unsetTipoAtendimento();
      } else {
        setTipoAtendimento((Long)value);
      }
      break;

    case TIPOS_ENCAM_ODONTO:
      if (value == null) {
        unsetTiposEncamOdonto();
      } else {
        setTiposEncamOdonto((List<Long>)value);
      }
      break;

    case TIPOS_FORNECIM_ODONTO:
      if (value == null) {
        unsetTiposFornecimOdonto();
      } else {
        setTiposFornecimOdonto((List<Long>)value);
      }
      break;

    case TIPOS_VIGILANCIA_SAUDE_BUCAL:
      if (value == null) {
        unsetTiposVigilanciaSaudeBucal();
      } else {
        setTiposVigilanciaSaudeBucal((List<Long>)value);
      }
      break;

    case TIPOS_CONSULTA_ODONTO:
      if (value == null) {
        unsetTiposConsultaOdonto();
      } else {
        setTiposConsultaOdonto((List<Long>)value);
      }
      break;

    case PROCEDIMENTOS_REALIZADOS:
      if (value == null) {
        unsetProcedimentosRealizados();
      } else {
        setProcedimentosRealizados((List<ProcedimentoQuantidadeThrift>)value);
      }
      break;

    case SEXO:
      if (value == null) {
        unsetSexo();
      } else {
        setSexo((Long)value);
      }
      break;

    case TURNO:
      if (value == null) {
        unsetTurno();
      } else {
        setTurno((Long)value);
      }
      break;

    case DATA_HORA_INICIAL_ATENDIMENTO:
      if (value == null) {
        unsetDataHoraInicialAtendimento();
      } else {
        setDataHoraInicialAtendimento((Long)value);
      }
      break;

    case DATA_HORA_FINAL_ATENDIMENTO:
      if (value == null) {
        unsetDataHoraFinalAtendimento();
      } else {
        setDataHoraFinalAtendimento((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DT_NASCIMENTO:
      return getDtNascimento();

    case CNS_CIDADAO:
      return getCnsCidadao();

    case NUM_PRONTUARIO:
      return getNumProntuario();

    case GESTANTE:
      return isGestante();

    case NECESSIDADES_ESPECIAIS:
      return isNecessidadesEspeciais();

    case LOCAL_ATENDIMENTO:
      return getLocalAtendimento();

    case TIPO_ATENDIMENTO:
      return getTipoAtendimento();

    case TIPOS_ENCAM_ODONTO:
      return getTiposEncamOdonto();

    case TIPOS_FORNECIM_ODONTO:
      return getTiposFornecimOdonto();

    case TIPOS_VIGILANCIA_SAUDE_BUCAL:
      return getTiposVigilanciaSaudeBucal();

    case TIPOS_CONSULTA_ODONTO:
      return getTiposConsultaOdonto();

    case PROCEDIMENTOS_REALIZADOS:
      return getProcedimentosRealizados();

    case SEXO:
      return getSexo();

    case TURNO:
      return getTurno();

    case DATA_HORA_INICIAL_ATENDIMENTO:
      return getDataHoraInicialAtendimento();

    case DATA_HORA_FINAL_ATENDIMENTO:
      return getDataHoraFinalAtendimento();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DT_NASCIMENTO:
      return isSetDtNascimento();
    case CNS_CIDADAO:
      return isSetCnsCidadao();
    case NUM_PRONTUARIO:
      return isSetNumProntuario();
    case GESTANTE:
      return isSetGestante();
    case NECESSIDADES_ESPECIAIS:
      return isSetNecessidadesEspeciais();
    case LOCAL_ATENDIMENTO:
      return isSetLocalAtendimento();
    case TIPO_ATENDIMENTO:
      return isSetTipoAtendimento();
    case TIPOS_ENCAM_ODONTO:
      return isSetTiposEncamOdonto();
    case TIPOS_FORNECIM_ODONTO:
      return isSetTiposFornecimOdonto();
    case TIPOS_VIGILANCIA_SAUDE_BUCAL:
      return isSetTiposVigilanciaSaudeBucal();
    case TIPOS_CONSULTA_ODONTO:
      return isSetTiposConsultaOdonto();
    case PROCEDIMENTOS_REALIZADOS:
      return isSetProcedimentosRealizados();
    case SEXO:
      return isSetSexo();
    case TURNO:
      return isSetTurno();
    case DATA_HORA_INICIAL_ATENDIMENTO:
      return isSetDataHoraInicialAtendimento();
    case DATA_HORA_FINAL_ATENDIMENTO:
      return isSetDataHoraFinalAtendimento();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FichaAtendimentoOdontologicoChildThrift)
      return this.equals((FichaAtendimentoOdontologicoChildThrift)that);
    return false;
  }

  public boolean equals(FichaAtendimentoOdontologicoChildThrift that) {
    if (that == null)
      return false;

    boolean this_present_dtNascimento = true && this.isSetDtNascimento();
    boolean that_present_dtNascimento = true && that.isSetDtNascimento();
    if (this_present_dtNascimento || that_present_dtNascimento) {
      if (!(this_present_dtNascimento && that_present_dtNascimento))
        return false;
      if (this.dtNascimento != that.dtNascimento)
        return false;
    }

    boolean this_present_cnsCidadao = true && this.isSetCnsCidadao();
    boolean that_present_cnsCidadao = true && that.isSetCnsCidadao();
    if (this_present_cnsCidadao || that_present_cnsCidadao) {
      if (!(this_present_cnsCidadao && that_present_cnsCidadao))
        return false;
      if (!this.cnsCidadao.equals(that.cnsCidadao))
        return false;
    }

    boolean this_present_numProntuario = true && this.isSetNumProntuario();
    boolean that_present_numProntuario = true && that.isSetNumProntuario();
    if (this_present_numProntuario || that_present_numProntuario) {
      if (!(this_present_numProntuario && that_present_numProntuario))
        return false;
      if (!this.numProntuario.equals(that.numProntuario))
        return false;
    }

    boolean this_present_gestante = true && this.isSetGestante();
    boolean that_present_gestante = true && that.isSetGestante();
    if (this_present_gestante || that_present_gestante) {
      if (!(this_present_gestante && that_present_gestante))
        return false;
      if (this.gestante != that.gestante)
        return false;
    }

    boolean this_present_necessidadesEspeciais = true && this.isSetNecessidadesEspeciais();
    boolean that_present_necessidadesEspeciais = true && that.isSetNecessidadesEspeciais();
    if (this_present_necessidadesEspeciais || that_present_necessidadesEspeciais) {
      if (!(this_present_necessidadesEspeciais && that_present_necessidadesEspeciais))
        return false;
      if (this.necessidadesEspeciais != that.necessidadesEspeciais)
        return false;
    }

    boolean this_present_localAtendimento = true && this.isSetLocalAtendimento();
    boolean that_present_localAtendimento = true && that.isSetLocalAtendimento();
    if (this_present_localAtendimento || that_present_localAtendimento) {
      if (!(this_present_localAtendimento && that_present_localAtendimento))
        return false;
      if (this.localAtendimento != that.localAtendimento)
        return false;
    }

    boolean this_present_tipoAtendimento = true && this.isSetTipoAtendimento();
    boolean that_present_tipoAtendimento = true && that.isSetTipoAtendimento();
    if (this_present_tipoAtendimento || that_present_tipoAtendimento) {
      if (!(this_present_tipoAtendimento && that_present_tipoAtendimento))
        return false;
      if (this.tipoAtendimento != that.tipoAtendimento)
        return false;
    }

    boolean this_present_tiposEncamOdonto = true && this.isSetTiposEncamOdonto();
    boolean that_present_tiposEncamOdonto = true && that.isSetTiposEncamOdonto();
    if (this_present_tiposEncamOdonto || that_present_tiposEncamOdonto) {
      if (!(this_present_tiposEncamOdonto && that_present_tiposEncamOdonto))
        return false;
      if (!this.tiposEncamOdonto.equals(that.tiposEncamOdonto))
        return false;
    }

    boolean this_present_tiposFornecimOdonto = true && this.isSetTiposFornecimOdonto();
    boolean that_present_tiposFornecimOdonto = true && that.isSetTiposFornecimOdonto();
    if (this_present_tiposFornecimOdonto || that_present_tiposFornecimOdonto) {
      if (!(this_present_tiposFornecimOdonto && that_present_tiposFornecimOdonto))
        return false;
      if (!this.tiposFornecimOdonto.equals(that.tiposFornecimOdonto))
        return false;
    }

    boolean this_present_tiposVigilanciaSaudeBucal = true && this.isSetTiposVigilanciaSaudeBucal();
    boolean that_present_tiposVigilanciaSaudeBucal = true && that.isSetTiposVigilanciaSaudeBucal();
    if (this_present_tiposVigilanciaSaudeBucal || that_present_tiposVigilanciaSaudeBucal) {
      if (!(this_present_tiposVigilanciaSaudeBucal && that_present_tiposVigilanciaSaudeBucal))
        return false;
      if (!this.tiposVigilanciaSaudeBucal.equals(that.tiposVigilanciaSaudeBucal))
        return false;
    }

    boolean this_present_tiposConsultaOdonto = true && this.isSetTiposConsultaOdonto();
    boolean that_present_tiposConsultaOdonto = true && that.isSetTiposConsultaOdonto();
    if (this_present_tiposConsultaOdonto || that_present_tiposConsultaOdonto) {
      if (!(this_present_tiposConsultaOdonto && that_present_tiposConsultaOdonto))
        return false;
      if (!this.tiposConsultaOdonto.equals(that.tiposConsultaOdonto))
        return false;
    }

    boolean this_present_procedimentosRealizados = true && this.isSetProcedimentosRealizados();
    boolean that_present_procedimentosRealizados = true && that.isSetProcedimentosRealizados();
    if (this_present_procedimentosRealizados || that_present_procedimentosRealizados) {
      if (!(this_present_procedimentosRealizados && that_present_procedimentosRealizados))
        return false;
      if (!this.procedimentosRealizados.equals(that.procedimentosRealizados))
        return false;
    }

    boolean this_present_sexo = true && this.isSetSexo();
    boolean that_present_sexo = true && that.isSetSexo();
    if (this_present_sexo || that_present_sexo) {
      if (!(this_present_sexo && that_present_sexo))
        return false;
      if (this.sexo != that.sexo)
        return false;
    }

    boolean this_present_turno = true && this.isSetTurno();
    boolean that_present_turno = true && that.isSetTurno();
    if (this_present_turno || that_present_turno) {
      if (!(this_present_turno && that_present_turno))
        return false;
      if (this.turno != that.turno)
        return false;
    }

    boolean this_present_dataHoraInicialAtendimento = true && this.isSetDataHoraInicialAtendimento();
    boolean that_present_dataHoraInicialAtendimento = true && that.isSetDataHoraInicialAtendimento();
    if (this_present_dataHoraInicialAtendimento || that_present_dataHoraInicialAtendimento) {
      if (!(this_present_dataHoraInicialAtendimento && that_present_dataHoraInicialAtendimento))
        return false;
      if (this.dataHoraInicialAtendimento != that.dataHoraInicialAtendimento)
        return false;
    }

    boolean this_present_dataHoraFinalAtendimento = true && this.isSetDataHoraFinalAtendimento();
    boolean that_present_dataHoraFinalAtendimento = true && that.isSetDataHoraFinalAtendimento();
    if (this_present_dataHoraFinalAtendimento || that_present_dataHoraFinalAtendimento) {
      if (!(this_present_dataHoraFinalAtendimento && that_present_dataHoraFinalAtendimento))
        return false;
      if (this.dataHoraFinalAtendimento != that.dataHoraFinalAtendimento)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dtNascimento = true && (isSetDtNascimento());
    list.add(present_dtNascimento);
    if (present_dtNascimento)
      list.add(dtNascimento);

    boolean present_cnsCidadao = true && (isSetCnsCidadao());
    list.add(present_cnsCidadao);
    if (present_cnsCidadao)
      list.add(cnsCidadao);

    boolean present_numProntuario = true && (isSetNumProntuario());
    list.add(present_numProntuario);
    if (present_numProntuario)
      list.add(numProntuario);

    boolean present_gestante = true && (isSetGestante());
    list.add(present_gestante);
    if (present_gestante)
      list.add(gestante);

    boolean present_necessidadesEspeciais = true && (isSetNecessidadesEspeciais());
    list.add(present_necessidadesEspeciais);
    if (present_necessidadesEspeciais)
      list.add(necessidadesEspeciais);

    boolean present_localAtendimento = true && (isSetLocalAtendimento());
    list.add(present_localAtendimento);
    if (present_localAtendimento)
      list.add(localAtendimento);

    boolean present_tipoAtendimento = true && (isSetTipoAtendimento());
    list.add(present_tipoAtendimento);
    if (present_tipoAtendimento)
      list.add(tipoAtendimento);

    boolean present_tiposEncamOdonto = true && (isSetTiposEncamOdonto());
    list.add(present_tiposEncamOdonto);
    if (present_tiposEncamOdonto)
      list.add(tiposEncamOdonto);

    boolean present_tiposFornecimOdonto = true && (isSetTiposFornecimOdonto());
    list.add(present_tiposFornecimOdonto);
    if (present_tiposFornecimOdonto)
      list.add(tiposFornecimOdonto);

    boolean present_tiposVigilanciaSaudeBucal = true && (isSetTiposVigilanciaSaudeBucal());
    list.add(present_tiposVigilanciaSaudeBucal);
    if (present_tiposVigilanciaSaudeBucal)
      list.add(tiposVigilanciaSaudeBucal);

    boolean present_tiposConsultaOdonto = true && (isSetTiposConsultaOdonto());
    list.add(present_tiposConsultaOdonto);
    if (present_tiposConsultaOdonto)
      list.add(tiposConsultaOdonto);

    boolean present_procedimentosRealizados = true && (isSetProcedimentosRealizados());
    list.add(present_procedimentosRealizados);
    if (present_procedimentosRealizados)
      list.add(procedimentosRealizados);

    boolean present_sexo = true && (isSetSexo());
    list.add(present_sexo);
    if (present_sexo)
      list.add(sexo);

    boolean present_turno = true && (isSetTurno());
    list.add(present_turno);
    if (present_turno)
      list.add(turno);

    boolean present_dataHoraInicialAtendimento = true && (isSetDataHoraInicialAtendimento());
    list.add(present_dataHoraInicialAtendimento);
    if (present_dataHoraInicialAtendimento)
      list.add(dataHoraInicialAtendimento);

    boolean present_dataHoraFinalAtendimento = true && (isSetDataHoraFinalAtendimento());
    list.add(present_dataHoraFinalAtendimento);
    if (present_dataHoraFinalAtendimento)
      list.add(dataHoraFinalAtendimento);

    return list.hashCode();
  }

  @Override
  public int compareTo(FichaAtendimentoOdontologicoChildThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDtNascimento()).compareTo(other.isSetDtNascimento());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDtNascimento()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dtNascimento, other.dtNascimento);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnsCidadao()).compareTo(other.isSetCnsCidadao());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnsCidadao()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnsCidadao, other.cnsCidadao);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumProntuario()).compareTo(other.isSetNumProntuario());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumProntuario()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numProntuario, other.numProntuario);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGestante()).compareTo(other.isSetGestante());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGestante()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gestante, other.gestante);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNecessidadesEspeciais()).compareTo(other.isSetNecessidadesEspeciais());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNecessidadesEspeciais()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.necessidadesEspeciais, other.necessidadesEspeciais);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalAtendimento()).compareTo(other.isSetLocalAtendimento());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalAtendimento()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localAtendimento, other.localAtendimento);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTipoAtendimento()).compareTo(other.isSetTipoAtendimento());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTipoAtendimento()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tipoAtendimento, other.tipoAtendimento);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTiposEncamOdonto()).compareTo(other.isSetTiposEncamOdonto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTiposEncamOdonto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiposEncamOdonto, other.tiposEncamOdonto);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTiposFornecimOdonto()).compareTo(other.isSetTiposFornecimOdonto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTiposFornecimOdonto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiposFornecimOdonto, other.tiposFornecimOdonto);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTiposVigilanciaSaudeBucal()).compareTo(other.isSetTiposVigilanciaSaudeBucal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTiposVigilanciaSaudeBucal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiposVigilanciaSaudeBucal, other.tiposVigilanciaSaudeBucal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTiposConsultaOdonto()).compareTo(other.isSetTiposConsultaOdonto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTiposConsultaOdonto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiposConsultaOdonto, other.tiposConsultaOdonto);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcedimentosRealizados()).compareTo(other.isSetProcedimentosRealizados());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcedimentosRealizados()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.procedimentosRealizados, other.procedimentosRealizados);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSexo()).compareTo(other.isSetSexo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSexo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sexo, other.sexo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurno()).compareTo(other.isSetTurno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turno, other.turno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataHoraInicialAtendimento()).compareTo(other.isSetDataHoraInicialAtendimento());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataHoraInicialAtendimento()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataHoraInicialAtendimento, other.dataHoraInicialAtendimento);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataHoraFinalAtendimento()).compareTo(other.isSetDataHoraFinalAtendimento());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataHoraFinalAtendimento()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataHoraFinalAtendimento, other.dataHoraFinalAtendimento);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FichaAtendimentoOdontologicoChildThrift(");
    boolean first = true;

    if (isSetDtNascimento()) {
      sb.append("dtNascimento:");
      sb.append(this.dtNascimento);
      first = false;
    }
    if (isSetCnsCidadao()) {
      if (!first) sb.append(", ");
      sb.append("cnsCidadao:");
      if (this.cnsCidadao == null) {
        sb.append("null");
      } else {
        sb.append(this.cnsCidadao);
      }
      first = false;
    }
    if (isSetNumProntuario()) {
      if (!first) sb.append(", ");
      sb.append("numProntuario:");
      if (this.numProntuario == null) {
        sb.append("null");
      } else {
        sb.append(this.numProntuario);
      }
      first = false;
    }
    if (isSetGestante()) {
      if (!first) sb.append(", ");
      sb.append("gestante:");
      sb.append(this.gestante);
      first = false;
    }
    if (isSetNecessidadesEspeciais()) {
      if (!first) sb.append(", ");
      sb.append("necessidadesEspeciais:");
      sb.append(this.necessidadesEspeciais);
      first = false;
    }
    if (isSetLocalAtendimento()) {
      if (!first) sb.append(", ");
      sb.append("localAtendimento:");
      sb.append(this.localAtendimento);
      first = false;
    }
    if (isSetTipoAtendimento()) {
      if (!first) sb.append(", ");
      sb.append("tipoAtendimento:");
      sb.append(this.tipoAtendimento);
      first = false;
    }
    if (isSetTiposEncamOdonto()) {
      if (!first) sb.append(", ");
      sb.append("tiposEncamOdonto:");
      if (this.tiposEncamOdonto == null) {
        sb.append("null");
      } else {
        sb.append(this.tiposEncamOdonto);
      }
      first = false;
    }
    if (isSetTiposFornecimOdonto()) {
      if (!first) sb.append(", ");
      sb.append("tiposFornecimOdonto:");
      if (this.tiposFornecimOdonto == null) {
        sb.append("null");
      } else {
        sb.append(this.tiposFornecimOdonto);
      }
      first = false;
    }
    if (isSetTiposVigilanciaSaudeBucal()) {
      if (!first) sb.append(", ");
      sb.append("tiposVigilanciaSaudeBucal:");
      if (this.tiposVigilanciaSaudeBucal == null) {
        sb.append("null");
      } else {
        sb.append(this.tiposVigilanciaSaudeBucal);
      }
      first = false;
    }
    if (isSetTiposConsultaOdonto()) {
      if (!first) sb.append(", ");
      sb.append("tiposConsultaOdonto:");
      if (this.tiposConsultaOdonto == null) {
        sb.append("null");
      } else {
        sb.append(this.tiposConsultaOdonto);
      }
      first = false;
    }
    if (isSetProcedimentosRealizados()) {
      if (!first) sb.append(", ");
      sb.append("procedimentosRealizados:");
      if (this.procedimentosRealizados == null) {
        sb.append("null");
      } else {
        sb.append(this.procedimentosRealizados);
      }
      first = false;
    }
    if (isSetSexo()) {
      if (!first) sb.append(", ");
      sb.append("sexo:");
      sb.append(this.sexo);
      first = false;
    }
    if (isSetTurno()) {
      if (!first) sb.append(", ");
      sb.append("turno:");
      sb.append(this.turno);
      first = false;
    }
    if (isSetDataHoraInicialAtendimento()) {
      if (!first) sb.append(", ");
      sb.append("dataHoraInicialAtendimento:");
      sb.append(this.dataHoraInicialAtendimento);
      first = false;
    }
    if (isSetDataHoraFinalAtendimento()) {
      if (!first) sb.append(", ");
      sb.append("dataHoraFinalAtendimento:");
      sb.append(this.dataHoraFinalAtendimento);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FichaAtendimentoOdontologicoChildThriftStandardSchemeFactory implements SchemeFactory {
    public FichaAtendimentoOdontologicoChildThriftStandardScheme getScheme() {
      return new FichaAtendimentoOdontologicoChildThriftStandardScheme();
    }
  }

  private static class FichaAtendimentoOdontologicoChildThriftStandardScheme extends StandardScheme<FichaAtendimentoOdontologicoChildThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FichaAtendimentoOdontologicoChildThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DT_NASCIMENTO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dtNascimento = iprot.readI64();
              struct.setDtNascimentoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CNS_CIDADAO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnsCidadao = iprot.readString();
              struct.setCnsCidadaoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_PRONTUARIO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.numProntuario = iprot.readString();
              struct.setNumProntuarioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GESTANTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.gestante = iprot.readBool();
              struct.setGestanteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NECESSIDADES_ESPECIAIS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.necessidadesEspeciais = iprot.readBool();
              struct.setNecessidadesEspeciaisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOCAL_ATENDIMENTO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.localAtendimento = iprot.readI64();
              struct.setLocalAtendimentoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIPO_ATENDIMENTO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tipoAtendimento = iprot.readI64();
              struct.setTipoAtendimentoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TIPOS_ENCAM_ODONTO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tiposEncamOdonto = new ArrayList<Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.tiposEncamOdonto.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTiposEncamOdontoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TIPOS_FORNECIM_ODONTO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.tiposFornecimOdonto = new ArrayList<Long>(_list3.size);
                long _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI64();
                  struct.tiposFornecimOdonto.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setTiposFornecimOdontoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIPOS_VIGILANCIA_SAUDE_BUCAL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.tiposVigilanciaSaudeBucal = new ArrayList<Long>(_list6.size);
                long _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI64();
                  struct.tiposVigilanciaSaudeBucal.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setTiposVigilanciaSaudeBucalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TIPOS_CONSULTA_ODONTO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.tiposConsultaOdonto = new ArrayList<Long>(_list9.size);
                long _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readI64();
                  struct.tiposConsultaOdonto.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setTiposConsultaOdontoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PROCEDIMENTOS_REALIZADOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.procedimentosRealizados = new ArrayList<ProcedimentoQuantidadeThrift>(_list12.size);
                ProcedimentoQuantidadeThrift _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = new ProcedimentoQuantidadeThrift();
                  _elem13.read(iprot);
                  struct.procedimentosRealizados.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setProcedimentosRealizadosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SEXO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sexo = iprot.readI64();
              struct.setSexoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TURNO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.turno = iprot.readI64();
              struct.setTurnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DATA_HORA_INICIAL_ATENDIMENTO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataHoraInicialAtendimento = iprot.readI64();
              struct.setDataHoraInicialAtendimentoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DATA_HORA_FINAL_ATENDIMENTO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataHoraFinalAtendimento = iprot.readI64();
              struct.setDataHoraFinalAtendimentoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FichaAtendimentoOdontologicoChildThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDtNascimento()) {
        oprot.writeFieldBegin(DT_NASCIMENTO_FIELD_DESC);
        oprot.writeI64(struct.dtNascimento);
        oprot.writeFieldEnd();
      }
      if (struct.cnsCidadao != null) {
        if (struct.isSetCnsCidadao()) {
          oprot.writeFieldBegin(CNS_CIDADAO_FIELD_DESC);
          oprot.writeString(struct.cnsCidadao);
          oprot.writeFieldEnd();
        }
      }
      if (struct.numProntuario != null) {
        if (struct.isSetNumProntuario()) {
          oprot.writeFieldBegin(NUM_PRONTUARIO_FIELD_DESC);
          oprot.writeString(struct.numProntuario);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGestante()) {
        oprot.writeFieldBegin(GESTANTE_FIELD_DESC);
        oprot.writeBool(struct.gestante);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNecessidadesEspeciais()) {
        oprot.writeFieldBegin(NECESSIDADES_ESPECIAIS_FIELD_DESC);
        oprot.writeBool(struct.necessidadesEspeciais);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLocalAtendimento()) {
        oprot.writeFieldBegin(LOCAL_ATENDIMENTO_FIELD_DESC);
        oprot.writeI64(struct.localAtendimento);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTipoAtendimento()) {
        oprot.writeFieldBegin(TIPO_ATENDIMENTO_FIELD_DESC);
        oprot.writeI64(struct.tipoAtendimento);
        oprot.writeFieldEnd();
      }
      if (struct.tiposEncamOdonto != null) {
        if (struct.isSetTiposEncamOdonto()) {
          oprot.writeFieldBegin(TIPOS_ENCAM_ODONTO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.tiposEncamOdonto.size()));
            for (long _iter15 : struct.tiposEncamOdonto)
            {
              oprot.writeI64(_iter15);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tiposFornecimOdonto != null) {
        if (struct.isSetTiposFornecimOdonto()) {
          oprot.writeFieldBegin(TIPOS_FORNECIM_ODONTO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.tiposFornecimOdonto.size()));
            for (long _iter16 : struct.tiposFornecimOdonto)
            {
              oprot.writeI64(_iter16);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tiposVigilanciaSaudeBucal != null) {
        if (struct.isSetTiposVigilanciaSaudeBucal()) {
          oprot.writeFieldBegin(TIPOS_VIGILANCIA_SAUDE_BUCAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.tiposVigilanciaSaudeBucal.size()));
            for (long _iter17 : struct.tiposVigilanciaSaudeBucal)
            {
              oprot.writeI64(_iter17);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tiposConsultaOdonto != null) {
        if (struct.isSetTiposConsultaOdonto()) {
          oprot.writeFieldBegin(TIPOS_CONSULTA_ODONTO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.tiposConsultaOdonto.size()));
            for (long _iter18 : struct.tiposConsultaOdonto)
            {
              oprot.writeI64(_iter18);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.procedimentosRealizados != null) {
        if (struct.isSetProcedimentosRealizados()) {
          oprot.writeFieldBegin(PROCEDIMENTOS_REALIZADOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.procedimentosRealizados.size()));
            for (ProcedimentoQuantidadeThrift _iter19 : struct.procedimentosRealizados)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSexo()) {
        oprot.writeFieldBegin(SEXO_FIELD_DESC);
        oprot.writeI64(struct.sexo);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTurno()) {
        oprot.writeFieldBegin(TURNO_FIELD_DESC);
        oprot.writeI64(struct.turno);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDataHoraInicialAtendimento()) {
        oprot.writeFieldBegin(DATA_HORA_INICIAL_ATENDIMENTO_FIELD_DESC);
        oprot.writeI64(struct.dataHoraInicialAtendimento);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDataHoraFinalAtendimento()) {
        oprot.writeFieldBegin(DATA_HORA_FINAL_ATENDIMENTO_FIELD_DESC);
        oprot.writeI64(struct.dataHoraFinalAtendimento);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FichaAtendimentoOdontologicoChildThriftTupleSchemeFactory implements SchemeFactory {
    public FichaAtendimentoOdontologicoChildThriftTupleScheme getScheme() {
      return new FichaAtendimentoOdontologicoChildThriftTupleScheme();
    }
  }

  private static class FichaAtendimentoOdontologicoChildThriftTupleScheme extends TupleScheme<FichaAtendimentoOdontologicoChildThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FichaAtendimentoOdontologicoChildThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDtNascimento()) {
        optionals.set(0);
      }
      if (struct.isSetCnsCidadao()) {
        optionals.set(1);
      }
      if (struct.isSetNumProntuario()) {
        optionals.set(2);
      }
      if (struct.isSetGestante()) {
        optionals.set(3);
      }
      if (struct.isSetNecessidadesEspeciais()) {
        optionals.set(4);
      }
      if (struct.isSetLocalAtendimento()) {
        optionals.set(5);
      }
      if (struct.isSetTipoAtendimento()) {
        optionals.set(6);
      }
      if (struct.isSetTiposEncamOdonto()) {
        optionals.set(7);
      }
      if (struct.isSetTiposFornecimOdonto()) {
        optionals.set(8);
      }
      if (struct.isSetTiposVigilanciaSaudeBucal()) {
        optionals.set(9);
      }
      if (struct.isSetTiposConsultaOdonto()) {
        optionals.set(10);
      }
      if (struct.isSetProcedimentosRealizados()) {
        optionals.set(11);
      }
      if (struct.isSetSexo()) {
        optionals.set(12);
      }
      if (struct.isSetTurno()) {
        optionals.set(13);
      }
      if (struct.isSetDataHoraInicialAtendimento()) {
        optionals.set(14);
      }
      if (struct.isSetDataHoraFinalAtendimento()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetDtNascimento()) {
        oprot.writeI64(struct.dtNascimento);
      }
      if (struct.isSetCnsCidadao()) {
        oprot.writeString(struct.cnsCidadao);
      }
      if (struct.isSetNumProntuario()) {
        oprot.writeString(struct.numProntuario);
      }
      if (struct.isSetGestante()) {
        oprot.writeBool(struct.gestante);
      }
      if (struct.isSetNecessidadesEspeciais()) {
        oprot.writeBool(struct.necessidadesEspeciais);
      }
      if (struct.isSetLocalAtendimento()) {
        oprot.writeI64(struct.localAtendimento);
      }
      if (struct.isSetTipoAtendimento()) {
        oprot.writeI64(struct.tipoAtendimento);
      }
      if (struct.isSetTiposEncamOdonto()) {
        {
          oprot.writeI32(struct.tiposEncamOdonto.size());
          for (long _iter20 : struct.tiposEncamOdonto)
          {
            oprot.writeI64(_iter20);
          }
        }
      }
      if (struct.isSetTiposFornecimOdonto()) {
        {
          oprot.writeI32(struct.tiposFornecimOdonto.size());
          for (long _iter21 : struct.tiposFornecimOdonto)
          {
            oprot.writeI64(_iter21);
          }
        }
      }
      if (struct.isSetTiposVigilanciaSaudeBucal()) {
        {
          oprot.writeI32(struct.tiposVigilanciaSaudeBucal.size());
          for (long _iter22 : struct.tiposVigilanciaSaudeBucal)
          {
            oprot.writeI64(_iter22);
          }
        }
      }
      if (struct.isSetTiposConsultaOdonto()) {
        {
          oprot.writeI32(struct.tiposConsultaOdonto.size());
          for (long _iter23 : struct.tiposConsultaOdonto)
          {
            oprot.writeI64(_iter23);
          }
        }
      }
      if (struct.isSetProcedimentosRealizados()) {
        {
          oprot.writeI32(struct.procedimentosRealizados.size());
          for (ProcedimentoQuantidadeThrift _iter24 : struct.procedimentosRealizados)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetSexo()) {
        oprot.writeI64(struct.sexo);
      }
      if (struct.isSetTurno()) {
        oprot.writeI64(struct.turno);
      }
      if (struct.isSetDataHoraInicialAtendimento()) {
        oprot.writeI64(struct.dataHoraInicialAtendimento);
      }
      if (struct.isSetDataHoraFinalAtendimento()) {
        oprot.writeI64(struct.dataHoraFinalAtendimento);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FichaAtendimentoOdontologicoChildThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.dtNascimento = iprot.readI64();
        struct.setDtNascimentoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cnsCidadao = iprot.readString();
        struct.setCnsCidadaoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.numProntuario = iprot.readString();
        struct.setNumProntuarioIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gestante = iprot.readBool();
        struct.setGestanteIsSet(true);
      }
      if (incoming.get(4)) {
        struct.necessidadesEspeciais = iprot.readBool();
        struct.setNecessidadesEspeciaisIsSet(true);
      }
      if (incoming.get(5)) {
        struct.localAtendimento = iprot.readI64();
        struct.setLocalAtendimentoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tipoAtendimento = iprot.readI64();
        struct.setTipoAtendimentoIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.tiposEncamOdonto = new ArrayList<Long>(_list25.size);
          long _elem26;
          for (int _i27 = 0; _i27 < _list25.size; ++_i27)
          {
            _elem26 = iprot.readI64();
            struct.tiposEncamOdonto.add(_elem26);
          }
        }
        struct.setTiposEncamOdontoIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.tiposFornecimOdonto = new ArrayList<Long>(_list28.size);
          long _elem29;
          for (int _i30 = 0; _i30 < _list28.size; ++_i30)
          {
            _elem29 = iprot.readI64();
            struct.tiposFornecimOdonto.add(_elem29);
          }
        }
        struct.setTiposFornecimOdontoIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.tiposVigilanciaSaudeBucal = new ArrayList<Long>(_list31.size);
          long _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = iprot.readI64();
            struct.tiposVigilanciaSaudeBucal.add(_elem32);
          }
        }
        struct.setTiposVigilanciaSaudeBucalIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.tiposConsultaOdonto = new ArrayList<Long>(_list34.size);
          long _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = iprot.readI64();
            struct.tiposConsultaOdonto.add(_elem35);
          }
        }
        struct.setTiposConsultaOdontoIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.procedimentosRealizados = new ArrayList<ProcedimentoQuantidadeThrift>(_list37.size);
          ProcedimentoQuantidadeThrift _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new ProcedimentoQuantidadeThrift();
            _elem38.read(iprot);
            struct.procedimentosRealizados.add(_elem38);
          }
        }
        struct.setProcedimentosRealizadosIsSet(true);
      }
      if (incoming.get(12)) {
        struct.sexo = iprot.readI64();
        struct.setSexoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.turno = iprot.readI64();
        struct.setTurnoIsSet(true);
      }
      if (incoming.get(14)) {
        struct.dataHoraInicialAtendimento = iprot.readI64();
        struct.setDataHoraInicialAtendimentoIsSet(true);
      }
      if (incoming.get(15)) {
        struct.dataHoraFinalAtendimento = iprot.readI64();
        struct.setDataHoraFinalAtendimentoIsSet(true);
      }
    }
  }

}

