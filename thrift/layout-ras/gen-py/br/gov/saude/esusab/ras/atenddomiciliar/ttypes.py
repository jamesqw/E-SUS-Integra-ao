#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import br.gov.saude.esusab.ras.common.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class FichaAtendimentoDomiciliarChildThrift:
  """
  Attributes:
   - turno
   - cnsCidadao
   - dataNascimento
   - sexo
   - localAtendimento
   - atencaoDomiciliarModalidade
   - tipoAtendimento
   - condicoesAvaliadas
   - cid
   - ciap
   - procedimentos
   - condutaDesfecho
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'turno', None, None, ), # 1
    (2, TType.STRING, 'cnsCidadao', None, None, ), # 2
    (3, TType.I64, 'dataNascimento', None, None, ), # 3
    (4, TType.I64, 'sexo', None, None, ), # 4
    (5, TType.I64, 'localAtendimento', None, None, ), # 5
    (6, TType.I64, 'atencaoDomiciliarModalidade', None, None, ), # 6
    (7, TType.I64, 'tipoAtendimento', None, None, ), # 7
    (8, TType.LIST, 'condicoesAvaliadas', (TType.I64,None), None, ), # 8
    (9, TType.STRING, 'cid', None, None, ), # 9
    (10, TType.STRING, 'ciap', None, None, ), # 10
    (11, TType.LIST, 'procedimentos', (TType.STRING,None), None, ), # 11
    None, # 12
    (13, TType.I64, 'condutaDesfecho', None, None, ), # 13
  )

  def __init__(self, turno=None, cnsCidadao=None, dataNascimento=None, sexo=None, localAtendimento=None, atencaoDomiciliarModalidade=None, tipoAtendimento=None, condicoesAvaliadas=None, cid=None, ciap=None, procedimentos=None, condutaDesfecho=None,):
    self.turno = turno
    self.cnsCidadao = cnsCidadao
    self.dataNascimento = dataNascimento
    self.sexo = sexo
    self.localAtendimento = localAtendimento
    self.atencaoDomiciliarModalidade = atencaoDomiciliarModalidade
    self.tipoAtendimento = tipoAtendimento
    self.condicoesAvaliadas = condicoesAvaliadas
    self.cid = cid
    self.ciap = ciap
    self.procedimentos = procedimentos
    self.condutaDesfecho = condutaDesfecho

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.turno = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cnsCidadao = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.dataNascimento = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.sexo = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.localAtendimento = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.atencaoDomiciliarModalidade = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.tipoAtendimento = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.condicoesAvaliadas = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64()
            self.condicoesAvaliadas.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.cid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.ciap = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.procedimentos = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString()
            self.procedimentos.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.condutaDesfecho = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FichaAtendimentoDomiciliarChildThrift')
    if self.turno is not None:
      oprot.writeFieldBegin('turno', TType.I64, 1)
      oprot.writeI64(self.turno)
      oprot.writeFieldEnd()
    if self.cnsCidadao is not None:
      oprot.writeFieldBegin('cnsCidadao', TType.STRING, 2)
      oprot.writeString(self.cnsCidadao)
      oprot.writeFieldEnd()
    if self.dataNascimento is not None:
      oprot.writeFieldBegin('dataNascimento', TType.I64, 3)
      oprot.writeI64(self.dataNascimento)
      oprot.writeFieldEnd()
    if self.sexo is not None:
      oprot.writeFieldBegin('sexo', TType.I64, 4)
      oprot.writeI64(self.sexo)
      oprot.writeFieldEnd()
    if self.localAtendimento is not None:
      oprot.writeFieldBegin('localAtendimento', TType.I64, 5)
      oprot.writeI64(self.localAtendimento)
      oprot.writeFieldEnd()
    if self.atencaoDomiciliarModalidade is not None:
      oprot.writeFieldBegin('atencaoDomiciliarModalidade', TType.I64, 6)
      oprot.writeI64(self.atencaoDomiciliarModalidade)
      oprot.writeFieldEnd()
    if self.tipoAtendimento is not None:
      oprot.writeFieldBegin('tipoAtendimento', TType.I64, 7)
      oprot.writeI64(self.tipoAtendimento)
      oprot.writeFieldEnd()
    if self.condicoesAvaliadas is not None:
      oprot.writeFieldBegin('condicoesAvaliadas', TType.LIST, 8)
      oprot.writeListBegin(TType.I64, len(self.condicoesAvaliadas))
      for iter12 in self.condicoesAvaliadas:
        oprot.writeI64(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.STRING, 9)
      oprot.writeString(self.cid)
      oprot.writeFieldEnd()
    if self.ciap is not None:
      oprot.writeFieldBegin('ciap', TType.STRING, 10)
      oprot.writeString(self.ciap)
      oprot.writeFieldEnd()
    if self.procedimentos is not None:
      oprot.writeFieldBegin('procedimentos', TType.LIST, 11)
      oprot.writeListBegin(TType.STRING, len(self.procedimentos))
      for iter13 in self.procedimentos:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.condutaDesfecho is not None:
      oprot.writeFieldBegin('condutaDesfecho', TType.I64, 13)
      oprot.writeI64(self.condutaDesfecho)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.turno)
    value = (value * 31) ^ hash(self.cnsCidadao)
    value = (value * 31) ^ hash(self.dataNascimento)
    value = (value * 31) ^ hash(self.sexo)
    value = (value * 31) ^ hash(self.localAtendimento)
    value = (value * 31) ^ hash(self.atencaoDomiciliarModalidade)
    value = (value * 31) ^ hash(self.tipoAtendimento)
    value = (value * 31) ^ hash(self.condicoesAvaliadas)
    value = (value * 31) ^ hash(self.cid)
    value = (value * 31) ^ hash(self.ciap)
    value = (value * 31) ^ hash(self.procedimentos)
    value = (value * 31) ^ hash(self.condutaDesfecho)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FichaAtendimentoDomiciliarMasterThrift:
  """
  Attributes:
   - uuidFicha
   - tpCdsOrigem
   - atendimentosDomiciliares
   - headerTransport
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuidFicha', None, None, ), # 1
    (2, TType.I32, 'tpCdsOrigem', None, None, ), # 2
    None, # 3
    (4, TType.LIST, 'atendimentosDomiciliares', (TType.STRUCT,(FichaAtendimentoDomiciliarChildThrift, FichaAtendimentoDomiciliarChildThrift.thrift_spec)), None, ), # 4
    (5, TType.STRUCT, 'headerTransport', (br.gov.saude.esusab.ras.common.ttypes.VariasLotacoesHeaderThrift, br.gov.saude.esusab.ras.common.ttypes.VariasLotacoesHeaderThrift.thrift_spec), None, ), # 5
  )

  def __init__(self, uuidFicha=None, tpCdsOrigem=None, atendimentosDomiciliares=None, headerTransport=None,):
    self.uuidFicha = uuidFicha
    self.tpCdsOrigem = tpCdsOrigem
    self.atendimentosDomiciliares = atendimentosDomiciliares
    self.headerTransport = headerTransport

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uuidFicha = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.tpCdsOrigem = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.atendimentosDomiciliares = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = FichaAtendimentoDomiciliarChildThrift()
            _elem19.read(iprot)
            self.atendimentosDomiciliares.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.headerTransport = br.gov.saude.esusab.ras.common.ttypes.VariasLotacoesHeaderThrift()
          self.headerTransport.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FichaAtendimentoDomiciliarMasterThrift')
    if self.uuidFicha is not None:
      oprot.writeFieldBegin('uuidFicha', TType.STRING, 1)
      oprot.writeString(self.uuidFicha)
      oprot.writeFieldEnd()
    if self.tpCdsOrigem is not None:
      oprot.writeFieldBegin('tpCdsOrigem', TType.I32, 2)
      oprot.writeI32(self.tpCdsOrigem)
      oprot.writeFieldEnd()
    if self.atendimentosDomiciliares is not None:
      oprot.writeFieldBegin('atendimentosDomiciliares', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.atendimentosDomiciliares))
      for iter20 in self.atendimentosDomiciliares:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.headerTransport is not None:
      oprot.writeFieldBegin('headerTransport', TType.STRUCT, 5)
      self.headerTransport.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.uuidFicha is None:
      raise TProtocol.TProtocolException(message='Required field uuidFicha is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uuidFicha)
    value = (value * 31) ^ hash(self.tpCdsOrigem)
    value = (value * 31) ^ hash(self.atendimentosDomiciliares)
    value = (value * 31) ^ hash(self.headerTransport)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
