#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import br.gov.saude.esusab.ras.common.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class PerguntaCriancasMenoresSeisMesesEnumThrift:
  A_CRIANCA_ONTEM_TOMOU_LEITE_DO_PEITO = 1
  MINGAU = 3
  AGUA_CHA = 4
  LEITE_VACA = 5
  FORMULA_INFANTIL = 6
  SUCO_FRUTA = 7
  FRUTA = 8
  COMIDA_DE_SAL = 9
  OUTROS_ALIMENTOS_BEBIDAS = 10

  _VALUES_TO_NAMES = {
    1: "A_CRIANCA_ONTEM_TOMOU_LEITE_DO_PEITO",
    3: "MINGAU",
    4: "AGUA_CHA",
    5: "LEITE_VACA",
    6: "FORMULA_INFANTIL",
    7: "SUCO_FRUTA",
    8: "FRUTA",
    9: "COMIDA_DE_SAL",
    10: "OUTROS_ALIMENTOS_BEBIDAS",
  }

  _NAMES_TO_VALUES = {
    "A_CRIANCA_ONTEM_TOMOU_LEITE_DO_PEITO": 1,
    "MINGAU": 3,
    "AGUA_CHA": 4,
    "LEITE_VACA": 5,
    "FORMULA_INFANTIL": 6,
    "SUCO_FRUTA": 7,
    "FRUTA": 8,
    "COMIDA_DE_SAL": 9,
    "OUTROS_ALIMENTOS_BEBIDAS": 10,
  }

class PerguntaCriancasDeSeisVinteTresMesesEnumThrift:
  A_CRIANCA_ONTEM_TOMOU_LEITE_PEITO = 21
  ONTEM_A_CRIANCA_COMEU_FRUTA_INTEIRA_PEDACO_AMASSADO = 22
  SE_SIM_QUANTAS_VEZES = 23
  ONTEM_A_CRIANCA_COMEU_COMIDA_DE_SAL = 24
  SE_COMEU_COMIDA_DE_SAL_QUANTAS_VEZES = 25
  SE_SIM_ESSA_COMIDA_FOI_OFERECIDA = 26
  OUTRO_LEITE_QUE_NAO_LEITE_DO_PEITO = 28
  MINGAU_COM_LEITE = 29
  IOGURTE = 30
  LEGUMES = 31
  VEGETAL_OU_FRUTAS_COR_ALARANJADA_OU_FOLHAS_ESCURAS = 32
  VERDURA_DE_FOLHA = 33
  CARNE = 34
  FIGADO = 35
  FEIJAO = 36
  ARROZ_BATATA_INHAME_MANDIOCA_FARINHA_MACARRAO = 37
  HAMBURGUER_E_OU_EMBUTIDOS = 38
  BEBIDAS_ADOCADAS = 39
  MACARRAO_INSTANTANEO_SALGADINHOS_BISCOITOS = 40
  BISCOITO_RECHEADO_DOCES_OU_GULOSEIMAS = 41

  _VALUES_TO_NAMES = {
    21: "A_CRIANCA_ONTEM_TOMOU_LEITE_PEITO",
    22: "ONTEM_A_CRIANCA_COMEU_FRUTA_INTEIRA_PEDACO_AMASSADO",
    23: "SE_SIM_QUANTAS_VEZES",
    24: "ONTEM_A_CRIANCA_COMEU_COMIDA_DE_SAL",
    25: "SE_COMEU_COMIDA_DE_SAL_QUANTAS_VEZES",
    26: "SE_SIM_ESSA_COMIDA_FOI_OFERECIDA",
    28: "OUTRO_LEITE_QUE_NAO_LEITE_DO_PEITO",
    29: "MINGAU_COM_LEITE",
    30: "IOGURTE",
    31: "LEGUMES",
    32: "VEGETAL_OU_FRUTAS_COR_ALARANJADA_OU_FOLHAS_ESCURAS",
    33: "VERDURA_DE_FOLHA",
    34: "CARNE",
    35: "FIGADO",
    36: "FEIJAO",
    37: "ARROZ_BATATA_INHAME_MANDIOCA_FARINHA_MACARRAO",
    38: "HAMBURGUER_E_OU_EMBUTIDOS",
    39: "BEBIDAS_ADOCADAS",
    40: "MACARRAO_INSTANTANEO_SALGADINHOS_BISCOITOS",
    41: "BISCOITO_RECHEADO_DOCES_OU_GULOSEIMAS",
  }

  _NAMES_TO_VALUES = {
    "A_CRIANCA_ONTEM_TOMOU_LEITE_PEITO": 21,
    "ONTEM_A_CRIANCA_COMEU_FRUTA_INTEIRA_PEDACO_AMASSADO": 22,
    "SE_SIM_QUANTAS_VEZES": 23,
    "ONTEM_A_CRIANCA_COMEU_COMIDA_DE_SAL": 24,
    "SE_COMEU_COMIDA_DE_SAL_QUANTAS_VEZES": 25,
    "SE_SIM_ESSA_COMIDA_FOI_OFERECIDA": 26,
    "OUTRO_LEITE_QUE_NAO_LEITE_DO_PEITO": 28,
    "MINGAU_COM_LEITE": 29,
    "IOGURTE": 30,
    "LEGUMES": 31,
    "VEGETAL_OU_FRUTAS_COR_ALARANJADA_OU_FOLHAS_ESCURAS": 32,
    "VERDURA_DE_FOLHA": 33,
    "CARNE": 34,
    "FIGADO": 35,
    "FEIJAO": 36,
    "ARROZ_BATATA_INHAME_MANDIOCA_FARINHA_MACARRAO": 37,
    "HAMBURGUER_E_OU_EMBUTIDOS": 38,
    "BEBIDAS_ADOCADAS": 39,
    "MACARRAO_INSTANTANEO_SALGADINHOS_BISCOITOS": 40,
    "BISCOITO_RECHEADO_DOCES_OU_GULOSEIMAS": 41,
  }

class PerguntaCriancasComMaisDoisAnosEnumThrift:
  VOCE_TEM_COSTUME_DE_REALIZAR_AS_REFEICOES_ASSISTINDO_TV_MEXENDO_NO_COMPUTADOR_E_OU_CELULAR = 11
  QUAIS_REFEICOES_VOCE_FAZ_AO_LONGO_DO_DIA = 12
  FEIJAO = 14
  FRUTAS_FRESCAS = 15
  VERDURAS_E_OU_LEGUMES = 16
  HAMBURGUER_E_OU_EMBUTIDOS = 17
  BEBIDAS_ADOCADAS = 18
  MACARRAO_INSTANTANEO_SALGADINHOS_BISCOITOS = 19
  BISCOITO_RECHEADO_DOCES_OU_GULOSEIMAS = 20

  _VALUES_TO_NAMES = {
    11: "VOCE_TEM_COSTUME_DE_REALIZAR_AS_REFEICOES_ASSISTINDO_TV_MEXENDO_NO_COMPUTADOR_E_OU_CELULAR",
    12: "QUAIS_REFEICOES_VOCE_FAZ_AO_LONGO_DO_DIA",
    14: "FEIJAO",
    15: "FRUTAS_FRESCAS",
    16: "VERDURAS_E_OU_LEGUMES",
    17: "HAMBURGUER_E_OU_EMBUTIDOS",
    18: "BEBIDAS_ADOCADAS",
    19: "MACARRAO_INSTANTANEO_SALGADINHOS_BISCOITOS",
    20: "BISCOITO_RECHEADO_DOCES_OU_GULOSEIMAS",
  }

  _NAMES_TO_VALUES = {
    "VOCE_TEM_COSTUME_DE_REALIZAR_AS_REFEICOES_ASSISTINDO_TV_MEXENDO_NO_COMPUTADOR_E_OU_CELULAR": 11,
    "QUAIS_REFEICOES_VOCE_FAZ_AO_LONGO_DO_DIA": 12,
    "FEIJAO": 14,
    "FRUTAS_FRESCAS": 15,
    "VERDURAS_E_OU_LEGUMES": 16,
    "HAMBURGUER_E_OU_EMBUTIDOS": 17,
    "BEBIDAS_ADOCADAS": 18,
    "MACARRAO_INSTANTANEO_SALGADINHOS_BISCOITOS": 19,
    "BISCOITO_RECHEADO_DOCES_OU_GULOSEIMAS": 20,
  }

class RespostaUnicaEscolhaEnumThrift:
  SIM = 1
  NAO = 2
  NAO_SABE = 3
  UMA_VEZ = 4
  DUAS_VEZES = 5
  TRES_VEZES_OU_MAIS = 6
  EM_PEDACOS = 7
  AMASSADA = 8
  PASSADA_NA_PENEIRA = 9
  LIQUIDIFICADA = 10
  SO_O_CALDO = 11

  _VALUES_TO_NAMES = {
    1: "SIM",
    2: "NAO",
    3: "NAO_SABE",
    4: "UMA_VEZ",
    5: "DUAS_VEZES",
    6: "TRES_VEZES_OU_MAIS",
    7: "EM_PEDACOS",
    8: "AMASSADA",
    9: "PASSADA_NA_PENEIRA",
    10: "LIQUIDIFICADA",
    11: "SO_O_CALDO",
  }

  _NAMES_TO_VALUES = {
    "SIM": 1,
    "NAO": 2,
    "NAO_SABE": 3,
    "UMA_VEZ": 4,
    "DUAS_VEZES": 5,
    "TRES_VEZES_OU_MAIS": 6,
    "EM_PEDACOS": 7,
    "AMASSADA": 8,
    "PASSADA_NA_PENEIRA": 9,
    "LIQUIDIFICADA": 10,
    "SO_O_CALDO": 11,
  }

class RespostaMultiplaEscolhaEnumThrift:
  CAFE_DA_MANHA = 12
  LANCHE_DA_MANHA = 13
  ALMOCO = 14
  LANCHE_DA_TARDE = 15
  JANTAR = 16
  CEIA = 17

  _VALUES_TO_NAMES = {
    12: "CAFE_DA_MANHA",
    13: "LANCHE_DA_MANHA",
    14: "ALMOCO",
    15: "LANCHE_DA_TARDE",
    16: "JANTAR",
    17: "CEIA",
  }

  _NAMES_TO_VALUES = {
    "CAFE_DA_MANHA": 12,
    "LANCHE_DA_MANHA": 13,
    "ALMOCO": 14,
    "LANCHE_DA_TARDE": 15,
    "JANTAR": 16,
    "CEIA": 17,
  }


class PerguntaQuestionarioCriancasMenoresSeisMesesThrift:
  """
  Attributes:
   - pergunta
   - respostaUnicaEscolha
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pergunta', None, None, ), # 1
    (2, TType.I32, 'respostaUnicaEscolha', None, None, ), # 2
  )

  def __init__(self, pergunta=None, respostaUnicaEscolha=None,):
    self.pergunta = pergunta
    self.respostaUnicaEscolha = respostaUnicaEscolha

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.pergunta = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.respostaUnicaEscolha = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PerguntaQuestionarioCriancasMenoresSeisMesesThrift')
    if self.pergunta is not None:
      oprot.writeFieldBegin('pergunta', TType.I32, 1)
      oprot.writeI32(self.pergunta)
      oprot.writeFieldEnd()
    if self.respostaUnicaEscolha is not None:
      oprot.writeFieldBegin('respostaUnicaEscolha', TType.I32, 2)
      oprot.writeI32(self.respostaUnicaEscolha)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pergunta)
    value = (value * 31) ^ hash(self.respostaUnicaEscolha)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PerguntaQuestionarioCriancasDeSeisVinteTresMesesThrift:
  """
  Attributes:
   - pergunta
   - respostaUnicaEscolha
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pergunta', None, None, ), # 1
    (2, TType.I32, 'respostaUnicaEscolha', None, None, ), # 2
  )

  def __init__(self, pergunta=None, respostaUnicaEscolha=None,):
    self.pergunta = pergunta
    self.respostaUnicaEscolha = respostaUnicaEscolha

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.pergunta = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.respostaUnicaEscolha = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PerguntaQuestionarioCriancasDeSeisVinteTresMesesThrift')
    if self.pergunta is not None:
      oprot.writeFieldBegin('pergunta', TType.I32, 1)
      oprot.writeI32(self.pergunta)
      oprot.writeFieldEnd()
    if self.respostaUnicaEscolha is not None:
      oprot.writeFieldBegin('respostaUnicaEscolha', TType.I32, 2)
      oprot.writeI32(self.respostaUnicaEscolha)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pergunta)
    value = (value * 31) ^ hash(self.respostaUnicaEscolha)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PerguntaQuestionarioCriancasComMaisDoisAnosThrift:
  """
  Attributes:
   - pergunta
   - respostaUnicaEscolha
   - respostaMultiplaEscolha
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pergunta', None, None, ), # 1
    (2, TType.I32, 'respostaUnicaEscolha', None, None, ), # 2
    (3, TType.LIST, 'respostaMultiplaEscolha', (TType.I32,None), None, ), # 3
  )

  def __init__(self, pergunta=None, respostaUnicaEscolha=None, respostaMultiplaEscolha=None,):
    self.pergunta = pergunta
    self.respostaUnicaEscolha = respostaUnicaEscolha
    self.respostaMultiplaEscolha = respostaMultiplaEscolha

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.pergunta = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.respostaUnicaEscolha = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.respostaMultiplaEscolha = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32();
            self.respostaMultiplaEscolha.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PerguntaQuestionarioCriancasComMaisDoisAnosThrift')
    if self.pergunta is not None:
      oprot.writeFieldBegin('pergunta', TType.I32, 1)
      oprot.writeI32(self.pergunta)
      oprot.writeFieldEnd()
    if self.respostaUnicaEscolha is not None:
      oprot.writeFieldBegin('respostaUnicaEscolha', TType.I32, 2)
      oprot.writeI32(self.respostaUnicaEscolha)
      oprot.writeFieldEnd()
    if self.respostaMultiplaEscolha is not None:
      oprot.writeFieldBegin('respostaMultiplaEscolha', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.respostaMultiplaEscolha))
      for iter6 in self.respostaMultiplaEscolha:
        oprot.writeI32(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pergunta)
    value = (value * 31) ^ hash(self.respostaUnicaEscolha)
    value = (value * 31) ^ hash(self.respostaMultiplaEscolha)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FichaConsumoAlimentarThrift:
  """
  Attributes:
   - headerTransport
   - cnsCidadao
   - identificacaoUsuario
   - dataNascimento
   - sexo
   - localAtendimento
   - perguntasQuestionarioCriancasMenoresSeisMeses
   - perguntasQuestionarioCriancasDeSeisVinteTresMeses
   - perguntasQuestionarioCriancasComMaisDoisAnos
   - uuidFicha
   - tpCdsOrigem
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'headerTransport', (br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift, br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift.thrift_spec), None, ), # 1
    (2, TType.STRING, 'cnsCidadao', None, None, ), # 2
    (3, TType.STRING, 'identificacaoUsuario', None, None, ), # 3
    (4, TType.I64, 'dataNascimento', None, None, ), # 4
    (5, TType.I64, 'sexo', None, None, ), # 5
    (6, TType.I64, 'localAtendimento', None, None, ), # 6
    (7, TType.LIST, 'perguntasQuestionarioCriancasMenoresSeisMeses', (TType.STRUCT,(PerguntaQuestionarioCriancasMenoresSeisMesesThrift, PerguntaQuestionarioCriancasMenoresSeisMesesThrift.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'perguntasQuestionarioCriancasDeSeisVinteTresMeses', (TType.STRUCT,(PerguntaQuestionarioCriancasDeSeisVinteTresMesesThrift, PerguntaQuestionarioCriancasDeSeisVinteTresMesesThrift.thrift_spec)), None, ), # 8
    (9, TType.LIST, 'perguntasQuestionarioCriancasComMaisDoisAnos', (TType.STRUCT,(PerguntaQuestionarioCriancasComMaisDoisAnosThrift, PerguntaQuestionarioCriancasComMaisDoisAnosThrift.thrift_spec)), None, ), # 9
    (10, TType.STRING, 'uuidFicha', None, None, ), # 10
    (11, TType.I32, 'tpCdsOrigem', None, None, ), # 11
  )

  def __init__(self, headerTransport=None, cnsCidadao=None, identificacaoUsuario=None, dataNascimento=None, sexo=None, localAtendimento=None, perguntasQuestionarioCriancasMenoresSeisMeses=None, perguntasQuestionarioCriancasDeSeisVinteTresMeses=None, perguntasQuestionarioCriancasComMaisDoisAnos=None, uuidFicha=None, tpCdsOrigem=None,):
    self.headerTransport = headerTransport
    self.cnsCidadao = cnsCidadao
    self.identificacaoUsuario = identificacaoUsuario
    self.dataNascimento = dataNascimento
    self.sexo = sexo
    self.localAtendimento = localAtendimento
    self.perguntasQuestionarioCriancasMenoresSeisMeses = perguntasQuestionarioCriancasMenoresSeisMeses
    self.perguntasQuestionarioCriancasDeSeisVinteTresMeses = perguntasQuestionarioCriancasDeSeisVinteTresMeses
    self.perguntasQuestionarioCriancasComMaisDoisAnos = perguntasQuestionarioCriancasComMaisDoisAnos
    self.uuidFicha = uuidFicha
    self.tpCdsOrigem = tpCdsOrigem

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.headerTransport = br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift()
          self.headerTransport.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cnsCidadao = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.identificacaoUsuario = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.dataNascimento = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.sexo = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.localAtendimento = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.perguntasQuestionarioCriancasMenoresSeisMeses = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = PerguntaQuestionarioCriancasMenoresSeisMesesThrift()
            _elem12.read(iprot)
            self.perguntasQuestionarioCriancasMenoresSeisMeses.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.perguntasQuestionarioCriancasDeSeisVinteTresMeses = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = PerguntaQuestionarioCriancasDeSeisVinteTresMesesThrift()
            _elem18.read(iprot)
            self.perguntasQuestionarioCriancasDeSeisVinteTresMeses.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.perguntasQuestionarioCriancasComMaisDoisAnos = []
          (_etype22, _size19) = iprot.readListBegin()
          for _i23 in xrange(_size19):
            _elem24 = PerguntaQuestionarioCriancasComMaisDoisAnosThrift()
            _elem24.read(iprot)
            self.perguntasQuestionarioCriancasComMaisDoisAnos.append(_elem24)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.uuidFicha = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.tpCdsOrigem = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FichaConsumoAlimentarThrift')
    if self.headerTransport is not None:
      oprot.writeFieldBegin('headerTransport', TType.STRUCT, 1)
      self.headerTransport.write(oprot)
      oprot.writeFieldEnd()
    if self.cnsCidadao is not None:
      oprot.writeFieldBegin('cnsCidadao', TType.STRING, 2)
      oprot.writeString(self.cnsCidadao)
      oprot.writeFieldEnd()
    if self.identificacaoUsuario is not None:
      oprot.writeFieldBegin('identificacaoUsuario', TType.STRING, 3)
      oprot.writeString(self.identificacaoUsuario)
      oprot.writeFieldEnd()
    if self.dataNascimento is not None:
      oprot.writeFieldBegin('dataNascimento', TType.I64, 4)
      oprot.writeI64(self.dataNascimento)
      oprot.writeFieldEnd()
    if self.sexo is not None:
      oprot.writeFieldBegin('sexo', TType.I64, 5)
      oprot.writeI64(self.sexo)
      oprot.writeFieldEnd()
    if self.localAtendimento is not None:
      oprot.writeFieldBegin('localAtendimento', TType.I64, 6)
      oprot.writeI64(self.localAtendimento)
      oprot.writeFieldEnd()
    if self.perguntasQuestionarioCriancasMenoresSeisMeses is not None:
      oprot.writeFieldBegin('perguntasQuestionarioCriancasMenoresSeisMeses', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.perguntasQuestionarioCriancasMenoresSeisMeses))
      for iter25 in self.perguntasQuestionarioCriancasMenoresSeisMeses:
        iter25.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.perguntasQuestionarioCriancasDeSeisVinteTresMeses is not None:
      oprot.writeFieldBegin('perguntasQuestionarioCriancasDeSeisVinteTresMeses', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.perguntasQuestionarioCriancasDeSeisVinteTresMeses))
      for iter26 in self.perguntasQuestionarioCriancasDeSeisVinteTresMeses:
        iter26.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.perguntasQuestionarioCriancasComMaisDoisAnos is not None:
      oprot.writeFieldBegin('perguntasQuestionarioCriancasComMaisDoisAnos', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.perguntasQuestionarioCriancasComMaisDoisAnos))
      for iter27 in self.perguntasQuestionarioCriancasComMaisDoisAnos:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.uuidFicha is not None:
      oprot.writeFieldBegin('uuidFicha', TType.STRING, 10)
      oprot.writeString(self.uuidFicha)
      oprot.writeFieldEnd()
    if self.tpCdsOrigem is not None:
      oprot.writeFieldBegin('tpCdsOrigem', TType.I32, 11)
      oprot.writeI32(self.tpCdsOrigem)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.uuidFicha is None:
      raise TProtocol.TProtocolException(message='Required field uuidFicha is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.headerTransport)
    value = (value * 31) ^ hash(self.cnsCidadao)
    value = (value * 31) ^ hash(self.identificacaoUsuario)
    value = (value * 31) ^ hash(self.dataNascimento)
    value = (value * 31) ^ hash(self.sexo)
    value = (value * 31) ^ hash(self.localAtendimento)
    value = (value * 31) ^ hash(self.perguntasQuestionarioCriancasMenoresSeisMeses)
    value = (value * 31) ^ hash(self.perguntasQuestionarioCriancasDeSeisVinteTresMeses)
    value = (value * 31) ^ hash(self.perguntasQuestionarioCriancasComMaisDoisAnos)
    value = (value * 31) ^ hash(self.uuidFicha)
    value = (value * 31) ^ hash(self.tpCdsOrigem)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
