#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import br.gov.saude.esusab.ras.common.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class CondicoesDeSaudeThrift:
  """
  Attributes:
   - descricaoCausaInternacaoEm12Meses
   - descricaoOutraCondicao1
   - descricaoOutraCondicao2
   - descricaoOutraCondicao3
   - descricaoPlantasMedicinaisUsadas
   - doencaCardiaca
   - doencaRespiratoria
   - doencaRins
   - maternidadeDeReferencia
   - situacaoPeso
   - statusEhDependenteAlcool
   - statusEhDependenteOutrasDrogas
   - statusEhFumante
   - statusEhGestante
   - statusEstaAcamado
   - statusEstaDomiciliado
   - statusTemDiabetes
   - statusTemDoencaRespiratoria
   - statusTemHanseniase
   - statusTemHipertensaoArterial
   - statusTemTeveCancer
   - statusTemTeveDoencasRins
   - statusTemTuberculose
   - statusTeveAvcDerrame
   - statusTeveDoencaCardiaca
   - statusTeveInfarto
   - statusTeveInternadoEm12Meses
   - statusUsaOutrasPraticasIntegrativasOuComplementares
   - statusUsaPlantaMedicinais
   - statusDiagnosticoMental
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'descricaoCausaInternacaoEm12Meses', None, None, ), # 1
    (2, TType.STRING, 'descricaoOutraCondicao1', None, None, ), # 2
    (3, TType.STRING, 'descricaoOutraCondicao2', None, None, ), # 3
    (4, TType.STRING, 'descricaoOutraCondicao3', None, None, ), # 4
    (5, TType.STRING, 'descricaoPlantasMedicinaisUsadas', None, None, ), # 5
    (6, TType.LIST, 'doencaCardiaca', (TType.I64,None), None, ), # 6
    (7, TType.LIST, 'doencaRespiratoria', (TType.I64,None), None, ), # 7
    (8, TType.LIST, 'doencaRins', (TType.I64,None), None, ), # 8
    (9, TType.STRING, 'maternidadeDeReferencia', None, None, ), # 9
    (10, TType.I64, 'situacaoPeso', None, None, ), # 10
    (11, TType.BOOL, 'statusEhDependenteAlcool', None, None, ), # 11
    (12, TType.BOOL, 'statusEhDependenteOutrasDrogas', None, None, ), # 12
    (13, TType.BOOL, 'statusEhFumante', None, None, ), # 13
    (14, TType.BOOL, 'statusEhGestante', None, None, ), # 14
    (15, TType.BOOL, 'statusEstaAcamado', None, None, ), # 15
    (16, TType.BOOL, 'statusEstaDomiciliado', None, None, ), # 16
    (17, TType.BOOL, 'statusTemDiabetes', None, None, ), # 17
    (18, TType.BOOL, 'statusTemDoencaRespiratoria', None, None, ), # 18
    (19, TType.BOOL, 'statusTemHanseniase', None, None, ), # 19
    (20, TType.BOOL, 'statusTemHipertensaoArterial', None, None, ), # 20
    (21, TType.BOOL, 'statusTemTeveCancer', None, None, ), # 21
    (22, TType.BOOL, 'statusTemTeveDoencasRins', None, None, ), # 22
    (23, TType.BOOL, 'statusTemTuberculose', None, None, ), # 23
    (24, TType.BOOL, 'statusTeveAvcDerrame', None, None, ), # 24
    (25, TType.BOOL, 'statusTeveDoencaCardiaca', None, None, ), # 25
    (26, TType.BOOL, 'statusTeveInfarto', None, None, ), # 26
    (27, TType.BOOL, 'statusTeveInternadoEm12Meses', None, None, ), # 27
    None, # 28
    (29, TType.BOOL, 'statusUsaOutrasPraticasIntegrativasOuComplementares', None, None, ), # 29
    (30, TType.BOOL, 'statusUsaPlantaMedicinais', None, None, ), # 30
    (31, TType.BOOL, 'statusDiagnosticoMental', None, None, ), # 31
  )

  def __init__(self, descricaoCausaInternacaoEm12Meses=None, descricaoOutraCondicao1=None, descricaoOutraCondicao2=None, descricaoOutraCondicao3=None, descricaoPlantasMedicinaisUsadas=None, doencaCardiaca=None, doencaRespiratoria=None, doencaRins=None, maternidadeDeReferencia=None, situacaoPeso=None, statusEhDependenteAlcool=None, statusEhDependenteOutrasDrogas=None, statusEhFumante=None, statusEhGestante=None, statusEstaAcamado=None, statusEstaDomiciliado=None, statusTemDiabetes=None, statusTemDoencaRespiratoria=None, statusTemHanseniase=None, statusTemHipertensaoArterial=None, statusTemTeveCancer=None, statusTemTeveDoencasRins=None, statusTemTuberculose=None, statusTeveAvcDerrame=None, statusTeveDoencaCardiaca=None, statusTeveInfarto=None, statusTeveInternadoEm12Meses=None, statusUsaOutrasPraticasIntegrativasOuComplementares=None, statusUsaPlantaMedicinais=None, statusDiagnosticoMental=None,):
    self.descricaoCausaInternacaoEm12Meses = descricaoCausaInternacaoEm12Meses
    self.descricaoOutraCondicao1 = descricaoOutraCondicao1
    self.descricaoOutraCondicao2 = descricaoOutraCondicao2
    self.descricaoOutraCondicao3 = descricaoOutraCondicao3
    self.descricaoPlantasMedicinaisUsadas = descricaoPlantasMedicinaisUsadas
    self.doencaCardiaca = doencaCardiaca
    self.doencaRespiratoria = doencaRespiratoria
    self.doencaRins = doencaRins
    self.maternidadeDeReferencia = maternidadeDeReferencia
    self.situacaoPeso = situacaoPeso
    self.statusEhDependenteAlcool = statusEhDependenteAlcool
    self.statusEhDependenteOutrasDrogas = statusEhDependenteOutrasDrogas
    self.statusEhFumante = statusEhFumante
    self.statusEhGestante = statusEhGestante
    self.statusEstaAcamado = statusEstaAcamado
    self.statusEstaDomiciliado = statusEstaDomiciliado
    self.statusTemDiabetes = statusTemDiabetes
    self.statusTemDoencaRespiratoria = statusTemDoencaRespiratoria
    self.statusTemHanseniase = statusTemHanseniase
    self.statusTemHipertensaoArterial = statusTemHipertensaoArterial
    self.statusTemTeveCancer = statusTemTeveCancer
    self.statusTemTeveDoencasRins = statusTemTeveDoencasRins
    self.statusTemTuberculose = statusTemTuberculose
    self.statusTeveAvcDerrame = statusTeveAvcDerrame
    self.statusTeveDoencaCardiaca = statusTeveDoencaCardiaca
    self.statusTeveInfarto = statusTeveInfarto
    self.statusTeveInternadoEm12Meses = statusTeveInternadoEm12Meses
    self.statusUsaOutrasPraticasIntegrativasOuComplementares = statusUsaOutrasPraticasIntegrativasOuComplementares
    self.statusUsaPlantaMedicinais = statusUsaPlantaMedicinais
    self.statusDiagnosticoMental = statusDiagnosticoMental

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.descricaoCausaInternacaoEm12Meses = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.descricaoOutraCondicao1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.descricaoOutraCondicao2 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.descricaoOutraCondicao3 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.descricaoPlantasMedicinaisUsadas = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.doencaCardiaca = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.doencaCardiaca.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.doencaRespiratoria = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.doencaRespiratoria.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.doencaRins = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readI64();
            self.doencaRins.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.maternidadeDeReferencia = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.situacaoPeso = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.statusEhDependenteAlcool = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.statusEhDependenteOutrasDrogas = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.statusEhFumante = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BOOL:
          self.statusEhGestante = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.BOOL:
          self.statusEstaAcamado = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.BOOL:
          self.statusEstaDomiciliado = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.BOOL:
          self.statusTemDiabetes = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.BOOL:
          self.statusTemDoencaRespiratoria = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.BOOL:
          self.statusTemHanseniase = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.BOOL:
          self.statusTemHipertensaoArterial = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.BOOL:
          self.statusTemTeveCancer = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.BOOL:
          self.statusTemTeveDoencasRins = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.BOOL:
          self.statusTemTuberculose = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.BOOL:
          self.statusTeveAvcDerrame = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.BOOL:
          self.statusTeveDoencaCardiaca = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.BOOL:
          self.statusTeveInfarto = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.BOOL:
          self.statusTeveInternadoEm12Meses = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.BOOL:
          self.statusUsaOutrasPraticasIntegrativasOuComplementares = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.BOOL:
          self.statusUsaPlantaMedicinais = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.BOOL:
          self.statusDiagnosticoMental = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CondicoesDeSaudeThrift')
    if self.descricaoCausaInternacaoEm12Meses is not None:
      oprot.writeFieldBegin('descricaoCausaInternacaoEm12Meses', TType.STRING, 1)
      oprot.writeString(self.descricaoCausaInternacaoEm12Meses)
      oprot.writeFieldEnd()
    if self.descricaoOutraCondicao1 is not None:
      oprot.writeFieldBegin('descricaoOutraCondicao1', TType.STRING, 2)
      oprot.writeString(self.descricaoOutraCondicao1)
      oprot.writeFieldEnd()
    if self.descricaoOutraCondicao2 is not None:
      oprot.writeFieldBegin('descricaoOutraCondicao2', TType.STRING, 3)
      oprot.writeString(self.descricaoOutraCondicao2)
      oprot.writeFieldEnd()
    if self.descricaoOutraCondicao3 is not None:
      oprot.writeFieldBegin('descricaoOutraCondicao3', TType.STRING, 4)
      oprot.writeString(self.descricaoOutraCondicao3)
      oprot.writeFieldEnd()
    if self.descricaoPlantasMedicinaisUsadas is not None:
      oprot.writeFieldBegin('descricaoPlantasMedicinaisUsadas', TType.STRING, 5)
      oprot.writeString(self.descricaoPlantasMedicinaisUsadas)
      oprot.writeFieldEnd()
    if self.doencaCardiaca is not None:
      oprot.writeFieldBegin('doencaCardiaca', TType.LIST, 6)
      oprot.writeListBegin(TType.I64, len(self.doencaCardiaca))
      for iter18 in self.doencaCardiaca:
        oprot.writeI64(iter18)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.doencaRespiratoria is not None:
      oprot.writeFieldBegin('doencaRespiratoria', TType.LIST, 7)
      oprot.writeListBegin(TType.I64, len(self.doencaRespiratoria))
      for iter19 in self.doencaRespiratoria:
        oprot.writeI64(iter19)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.doencaRins is not None:
      oprot.writeFieldBegin('doencaRins', TType.LIST, 8)
      oprot.writeListBegin(TType.I64, len(self.doencaRins))
      for iter20 in self.doencaRins:
        oprot.writeI64(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.maternidadeDeReferencia is not None:
      oprot.writeFieldBegin('maternidadeDeReferencia', TType.STRING, 9)
      oprot.writeString(self.maternidadeDeReferencia)
      oprot.writeFieldEnd()
    if self.situacaoPeso is not None:
      oprot.writeFieldBegin('situacaoPeso', TType.I64, 10)
      oprot.writeI64(self.situacaoPeso)
      oprot.writeFieldEnd()
    if self.statusEhDependenteAlcool is not None:
      oprot.writeFieldBegin('statusEhDependenteAlcool', TType.BOOL, 11)
      oprot.writeBool(self.statusEhDependenteAlcool)
      oprot.writeFieldEnd()
    if self.statusEhDependenteOutrasDrogas is not None:
      oprot.writeFieldBegin('statusEhDependenteOutrasDrogas', TType.BOOL, 12)
      oprot.writeBool(self.statusEhDependenteOutrasDrogas)
      oprot.writeFieldEnd()
    if self.statusEhFumante is not None:
      oprot.writeFieldBegin('statusEhFumante', TType.BOOL, 13)
      oprot.writeBool(self.statusEhFumante)
      oprot.writeFieldEnd()
    if self.statusEhGestante is not None:
      oprot.writeFieldBegin('statusEhGestante', TType.BOOL, 14)
      oprot.writeBool(self.statusEhGestante)
      oprot.writeFieldEnd()
    if self.statusEstaAcamado is not None:
      oprot.writeFieldBegin('statusEstaAcamado', TType.BOOL, 15)
      oprot.writeBool(self.statusEstaAcamado)
      oprot.writeFieldEnd()
    if self.statusEstaDomiciliado is not None:
      oprot.writeFieldBegin('statusEstaDomiciliado', TType.BOOL, 16)
      oprot.writeBool(self.statusEstaDomiciliado)
      oprot.writeFieldEnd()
    if self.statusTemDiabetes is not None:
      oprot.writeFieldBegin('statusTemDiabetes', TType.BOOL, 17)
      oprot.writeBool(self.statusTemDiabetes)
      oprot.writeFieldEnd()
    if self.statusTemDoencaRespiratoria is not None:
      oprot.writeFieldBegin('statusTemDoencaRespiratoria', TType.BOOL, 18)
      oprot.writeBool(self.statusTemDoencaRespiratoria)
      oprot.writeFieldEnd()
    if self.statusTemHanseniase is not None:
      oprot.writeFieldBegin('statusTemHanseniase', TType.BOOL, 19)
      oprot.writeBool(self.statusTemHanseniase)
      oprot.writeFieldEnd()
    if self.statusTemHipertensaoArterial is not None:
      oprot.writeFieldBegin('statusTemHipertensaoArterial', TType.BOOL, 20)
      oprot.writeBool(self.statusTemHipertensaoArterial)
      oprot.writeFieldEnd()
    if self.statusTemTeveCancer is not None:
      oprot.writeFieldBegin('statusTemTeveCancer', TType.BOOL, 21)
      oprot.writeBool(self.statusTemTeveCancer)
      oprot.writeFieldEnd()
    if self.statusTemTeveDoencasRins is not None:
      oprot.writeFieldBegin('statusTemTeveDoencasRins', TType.BOOL, 22)
      oprot.writeBool(self.statusTemTeveDoencasRins)
      oprot.writeFieldEnd()
    if self.statusTemTuberculose is not None:
      oprot.writeFieldBegin('statusTemTuberculose', TType.BOOL, 23)
      oprot.writeBool(self.statusTemTuberculose)
      oprot.writeFieldEnd()
    if self.statusTeveAvcDerrame is not None:
      oprot.writeFieldBegin('statusTeveAvcDerrame', TType.BOOL, 24)
      oprot.writeBool(self.statusTeveAvcDerrame)
      oprot.writeFieldEnd()
    if self.statusTeveDoencaCardiaca is not None:
      oprot.writeFieldBegin('statusTeveDoencaCardiaca', TType.BOOL, 25)
      oprot.writeBool(self.statusTeveDoencaCardiaca)
      oprot.writeFieldEnd()
    if self.statusTeveInfarto is not None:
      oprot.writeFieldBegin('statusTeveInfarto', TType.BOOL, 26)
      oprot.writeBool(self.statusTeveInfarto)
      oprot.writeFieldEnd()
    if self.statusTeveInternadoEm12Meses is not None:
      oprot.writeFieldBegin('statusTeveInternadoEm12Meses', TType.BOOL, 27)
      oprot.writeBool(self.statusTeveInternadoEm12Meses)
      oprot.writeFieldEnd()
    if self.statusUsaOutrasPraticasIntegrativasOuComplementares is not None:
      oprot.writeFieldBegin('statusUsaOutrasPraticasIntegrativasOuComplementares', TType.BOOL, 29)
      oprot.writeBool(self.statusUsaOutrasPraticasIntegrativasOuComplementares)
      oprot.writeFieldEnd()
    if self.statusUsaPlantaMedicinais is not None:
      oprot.writeFieldBegin('statusUsaPlantaMedicinais', TType.BOOL, 30)
      oprot.writeBool(self.statusUsaPlantaMedicinais)
      oprot.writeFieldEnd()
    if self.statusDiagnosticoMental is not None:
      oprot.writeFieldBegin('statusDiagnosticoMental', TType.BOOL, 31)
      oprot.writeBool(self.statusDiagnosticoMental)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.descricaoCausaInternacaoEm12Meses)
    value = (value * 31) ^ hash(self.descricaoOutraCondicao1)
    value = (value * 31) ^ hash(self.descricaoOutraCondicao2)
    value = (value * 31) ^ hash(self.descricaoOutraCondicao3)
    value = (value * 31) ^ hash(self.descricaoPlantasMedicinaisUsadas)
    value = (value * 31) ^ hash(self.doencaCardiaca)
    value = (value * 31) ^ hash(self.doencaRespiratoria)
    value = (value * 31) ^ hash(self.doencaRins)
    value = (value * 31) ^ hash(self.maternidadeDeReferencia)
    value = (value * 31) ^ hash(self.situacaoPeso)
    value = (value * 31) ^ hash(self.statusEhDependenteAlcool)
    value = (value * 31) ^ hash(self.statusEhDependenteOutrasDrogas)
    value = (value * 31) ^ hash(self.statusEhFumante)
    value = (value * 31) ^ hash(self.statusEhGestante)
    value = (value * 31) ^ hash(self.statusEstaAcamado)
    value = (value * 31) ^ hash(self.statusEstaDomiciliado)
    value = (value * 31) ^ hash(self.statusTemDiabetes)
    value = (value * 31) ^ hash(self.statusTemDoencaRespiratoria)
    value = (value * 31) ^ hash(self.statusTemHanseniase)
    value = (value * 31) ^ hash(self.statusTemHipertensaoArterial)
    value = (value * 31) ^ hash(self.statusTemTeveCancer)
    value = (value * 31) ^ hash(self.statusTemTeveDoencasRins)
    value = (value * 31) ^ hash(self.statusTemTuberculose)
    value = (value * 31) ^ hash(self.statusTeveAvcDerrame)
    value = (value * 31) ^ hash(self.statusTeveDoencaCardiaca)
    value = (value * 31) ^ hash(self.statusTeveInfarto)
    value = (value * 31) ^ hash(self.statusTeveInternadoEm12Meses)
    value = (value * 31) ^ hash(self.statusUsaOutrasPraticasIntegrativasOuComplementares)
    value = (value * 31) ^ hash(self.statusUsaPlantaMedicinais)
    value = (value * 31) ^ hash(self.statusDiagnosticoMental)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EmSituacaoDeRuaThrift:
  """
  Attributes:
   - grauParentescoFamiliarFrequentado
   - higienePessoalSituacaoRua
   - origemAlimentoSituacaoRua
   - outraInstituicaoQueAcompanha
   - quantidadeAlimentacoesAoDiaSituacaoRua
   - statusAcompanhadoPorOutraInstituicao
   - statusPossuiReferenciaFamiliar
   - statusRecebeBeneficio
   - statusSituacaoRua
   - statusTemAcessoHigienePessoalSituacaoRua
   - statusVisitaFamiliarFrequentemente
   - tempoSituacaoRua
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'grauParentescoFamiliarFrequentado', None, None, ), # 1
    (2, TType.LIST, 'higienePessoalSituacaoRua', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'origemAlimentoSituacaoRua', (TType.I64,None), None, ), # 3
    (4, TType.STRING, 'outraInstituicaoQueAcompanha', None, None, ), # 4
    (5, TType.I64, 'quantidadeAlimentacoesAoDiaSituacaoRua', None, None, ), # 5
    (6, TType.BOOL, 'statusAcompanhadoPorOutraInstituicao', None, None, ), # 6
    (7, TType.BOOL, 'statusPossuiReferenciaFamiliar', None, None, ), # 7
    (8, TType.BOOL, 'statusRecebeBeneficio', None, None, ), # 8
    (9, TType.BOOL, 'statusSituacaoRua', None, None, ), # 9
    (10, TType.BOOL, 'statusTemAcessoHigienePessoalSituacaoRua', None, None, ), # 10
    (11, TType.BOOL, 'statusVisitaFamiliarFrequentemente', None, None, ), # 11
    (12, TType.I64, 'tempoSituacaoRua', None, None, ), # 12
  )

  def __init__(self, grauParentescoFamiliarFrequentado=None, higienePessoalSituacaoRua=None, origemAlimentoSituacaoRua=None, outraInstituicaoQueAcompanha=None, quantidadeAlimentacoesAoDiaSituacaoRua=None, statusAcompanhadoPorOutraInstituicao=None, statusPossuiReferenciaFamiliar=None, statusRecebeBeneficio=None, statusSituacaoRua=None, statusTemAcessoHigienePessoalSituacaoRua=None, statusVisitaFamiliarFrequentemente=None, tempoSituacaoRua=None,):
    self.grauParentescoFamiliarFrequentado = grauParentescoFamiliarFrequentado
    self.higienePessoalSituacaoRua = higienePessoalSituacaoRua
    self.origemAlimentoSituacaoRua = origemAlimentoSituacaoRua
    self.outraInstituicaoQueAcompanha = outraInstituicaoQueAcompanha
    self.quantidadeAlimentacoesAoDiaSituacaoRua = quantidadeAlimentacoesAoDiaSituacaoRua
    self.statusAcompanhadoPorOutraInstituicao = statusAcompanhadoPorOutraInstituicao
    self.statusPossuiReferenciaFamiliar = statusPossuiReferenciaFamiliar
    self.statusRecebeBeneficio = statusRecebeBeneficio
    self.statusSituacaoRua = statusSituacaoRua
    self.statusTemAcessoHigienePessoalSituacaoRua = statusTemAcessoHigienePessoalSituacaoRua
    self.statusVisitaFamiliarFrequentemente = statusVisitaFamiliarFrequentemente
    self.tempoSituacaoRua = tempoSituacaoRua

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.grauParentescoFamiliarFrequentado = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.higienePessoalSituacaoRua = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI64();
            self.higienePessoalSituacaoRua.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.origemAlimentoSituacaoRua = []
          (_etype30, _size27) = iprot.readListBegin()
          for _i31 in xrange(_size27):
            _elem32 = iprot.readI64();
            self.origemAlimentoSituacaoRua.append(_elem32)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.outraInstituicaoQueAcompanha = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.quantidadeAlimentacoesAoDiaSituacaoRua = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.statusAcompanhadoPorOutraInstituicao = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.statusPossuiReferenciaFamiliar = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.statusRecebeBeneficio = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.statusSituacaoRua = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.statusTemAcessoHigienePessoalSituacaoRua = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.statusVisitaFamiliarFrequentemente = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.tempoSituacaoRua = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EmSituacaoDeRuaThrift')
    if self.grauParentescoFamiliarFrequentado is not None:
      oprot.writeFieldBegin('grauParentescoFamiliarFrequentado', TType.STRING, 1)
      oprot.writeString(self.grauParentescoFamiliarFrequentado)
      oprot.writeFieldEnd()
    if self.higienePessoalSituacaoRua is not None:
      oprot.writeFieldBegin('higienePessoalSituacaoRua', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.higienePessoalSituacaoRua))
      for iter33 in self.higienePessoalSituacaoRua:
        oprot.writeI64(iter33)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.origemAlimentoSituacaoRua is not None:
      oprot.writeFieldBegin('origemAlimentoSituacaoRua', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.origemAlimentoSituacaoRua))
      for iter34 in self.origemAlimentoSituacaoRua:
        oprot.writeI64(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.outraInstituicaoQueAcompanha is not None:
      oprot.writeFieldBegin('outraInstituicaoQueAcompanha', TType.STRING, 4)
      oprot.writeString(self.outraInstituicaoQueAcompanha)
      oprot.writeFieldEnd()
    if self.quantidadeAlimentacoesAoDiaSituacaoRua is not None:
      oprot.writeFieldBegin('quantidadeAlimentacoesAoDiaSituacaoRua', TType.I64, 5)
      oprot.writeI64(self.quantidadeAlimentacoesAoDiaSituacaoRua)
      oprot.writeFieldEnd()
    if self.statusAcompanhadoPorOutraInstituicao is not None:
      oprot.writeFieldBegin('statusAcompanhadoPorOutraInstituicao', TType.BOOL, 6)
      oprot.writeBool(self.statusAcompanhadoPorOutraInstituicao)
      oprot.writeFieldEnd()
    if self.statusPossuiReferenciaFamiliar is not None:
      oprot.writeFieldBegin('statusPossuiReferenciaFamiliar', TType.BOOL, 7)
      oprot.writeBool(self.statusPossuiReferenciaFamiliar)
      oprot.writeFieldEnd()
    if self.statusRecebeBeneficio is not None:
      oprot.writeFieldBegin('statusRecebeBeneficio', TType.BOOL, 8)
      oprot.writeBool(self.statusRecebeBeneficio)
      oprot.writeFieldEnd()
    if self.statusSituacaoRua is not None:
      oprot.writeFieldBegin('statusSituacaoRua', TType.BOOL, 9)
      oprot.writeBool(self.statusSituacaoRua)
      oprot.writeFieldEnd()
    if self.statusTemAcessoHigienePessoalSituacaoRua is not None:
      oprot.writeFieldBegin('statusTemAcessoHigienePessoalSituacaoRua', TType.BOOL, 10)
      oprot.writeBool(self.statusTemAcessoHigienePessoalSituacaoRua)
      oprot.writeFieldEnd()
    if self.statusVisitaFamiliarFrequentemente is not None:
      oprot.writeFieldBegin('statusVisitaFamiliarFrequentemente', TType.BOOL, 11)
      oprot.writeBool(self.statusVisitaFamiliarFrequentemente)
      oprot.writeFieldEnd()
    if self.tempoSituacaoRua is not None:
      oprot.writeFieldBegin('tempoSituacaoRua', TType.I64, 12)
      oprot.writeI64(self.tempoSituacaoRua)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.grauParentescoFamiliarFrequentado)
    value = (value * 31) ^ hash(self.higienePessoalSituacaoRua)
    value = (value * 31) ^ hash(self.origemAlimentoSituacaoRua)
    value = (value * 31) ^ hash(self.outraInstituicaoQueAcompanha)
    value = (value * 31) ^ hash(self.quantidadeAlimentacoesAoDiaSituacaoRua)
    value = (value * 31) ^ hash(self.statusAcompanhadoPorOutraInstituicao)
    value = (value * 31) ^ hash(self.statusPossuiReferenciaFamiliar)
    value = (value * 31) ^ hash(self.statusRecebeBeneficio)
    value = (value * 31) ^ hash(self.statusSituacaoRua)
    value = (value * 31) ^ hash(self.statusTemAcessoHigienePessoalSituacaoRua)
    value = (value * 31) ^ hash(self.statusVisitaFamiliarFrequentemente)
    value = (value * 31) ^ hash(self.tempoSituacaoRua)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IdentificacaoUsuarioCidadaoThrift:
  """
  Attributes:
   - nomeSocial
   - codigoIbgeMunicipioNascimento
   - dataNascimentoCidadao
   - desconheceNomeMae
   - emailCidadao
   - nacionalidadeCidadao
   - nomeCidadao
   - nomeMaeCidadao
   - cnsCidadao
   - cnsResponsavelFamiliar
   - telefoneCelular
   - numeroNisPisPasep
   - paisNascimento
   - racaCorCidadao
   - sexoCidadao
   - statusEhResponsavel
   - etnia
   - nomePaiCidadao
   - desconheceNomePai
   - dtNaturalizacao
   - portariaNaturalizacao
   - dtEntradaBrasil
   - microArea
   - stForaArea
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nomeSocial', None, None, ), # 1
    (2, TType.STRING, 'codigoIbgeMunicipioNascimento', None, None, ), # 2
    (3, TType.I64, 'dataNascimentoCidadao', None, None, ), # 3
    None, # 4
    (5, TType.BOOL, 'desconheceNomeMae', None, None, ), # 5
    (6, TType.STRING, 'emailCidadao', None, None, ), # 6
    (7, TType.I64, 'nacionalidadeCidadao', None, None, ), # 7
    (8, TType.STRING, 'nomeCidadao', None, None, ), # 8
    (9, TType.STRING, 'nomeMaeCidadao', None, None, ), # 9
    (10, TType.STRING, 'cnsCidadao', None, None, ), # 10
    (11, TType.STRING, 'cnsResponsavelFamiliar', None, None, ), # 11
    (12, TType.STRING, 'telefoneCelular', None, None, ), # 12
    (13, TType.STRING, 'numeroNisPisPasep', None, None, ), # 13
    (14, TType.I64, 'paisNascimento', None, None, ), # 14
    (15, TType.I64, 'racaCorCidadao', None, None, ), # 15
    (16, TType.I64, 'sexoCidadao', None, None, ), # 16
    (17, TType.BOOL, 'statusEhResponsavel', None, None, ), # 17
    (18, TType.I64, 'etnia', None, None, ), # 18
    (19, TType.STRING, 'nomePaiCidadao', None, None, ), # 19
    (20, TType.BOOL, 'desconheceNomePai', None, None, ), # 20
    (21, TType.I64, 'dtNaturalizacao', None, None, ), # 21
    (22, TType.STRING, 'portariaNaturalizacao', None, None, ), # 22
    (23, TType.I64, 'dtEntradaBrasil', None, None, ), # 23
    (24, TType.STRING, 'microArea', None, None, ), # 24
    (25, TType.BOOL, 'stForaArea', None, None, ), # 25
  )

  def __init__(self, nomeSocial=None, codigoIbgeMunicipioNascimento=None, dataNascimentoCidadao=None, desconheceNomeMae=None, emailCidadao=None, nacionalidadeCidadao=None, nomeCidadao=None, nomeMaeCidadao=None, cnsCidadao=None, cnsResponsavelFamiliar=None, telefoneCelular=None, numeroNisPisPasep=None, paisNascimento=None, racaCorCidadao=None, sexoCidadao=None, statusEhResponsavel=None, etnia=None, nomePaiCidadao=None, desconheceNomePai=None, dtNaturalizacao=None, portariaNaturalizacao=None, dtEntradaBrasil=None, microArea=None, stForaArea=None,):
    self.nomeSocial = nomeSocial
    self.codigoIbgeMunicipioNascimento = codigoIbgeMunicipioNascimento
    self.dataNascimentoCidadao = dataNascimentoCidadao
    self.desconheceNomeMae = desconheceNomeMae
    self.emailCidadao = emailCidadao
    self.nacionalidadeCidadao = nacionalidadeCidadao
    self.nomeCidadao = nomeCidadao
    self.nomeMaeCidadao = nomeMaeCidadao
    self.cnsCidadao = cnsCidadao
    self.cnsResponsavelFamiliar = cnsResponsavelFamiliar
    self.telefoneCelular = telefoneCelular
    self.numeroNisPisPasep = numeroNisPisPasep
    self.paisNascimento = paisNascimento
    self.racaCorCidadao = racaCorCidadao
    self.sexoCidadao = sexoCidadao
    self.statusEhResponsavel = statusEhResponsavel
    self.etnia = etnia
    self.nomePaiCidadao = nomePaiCidadao
    self.desconheceNomePai = desconheceNomePai
    self.dtNaturalizacao = dtNaturalizacao
    self.portariaNaturalizacao = portariaNaturalizacao
    self.dtEntradaBrasil = dtEntradaBrasil
    self.microArea = microArea
    self.stForaArea = stForaArea

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nomeSocial = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.codigoIbgeMunicipioNascimento = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.dataNascimentoCidadao = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.desconheceNomeMae = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.emailCidadao = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.nacionalidadeCidadao = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.nomeCidadao = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.nomeMaeCidadao = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.cnsCidadao = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.cnsResponsavelFamiliar = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.telefoneCelular = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.numeroNisPisPasep = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.paisNascimento = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.racaCorCidadao = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.sexoCidadao = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.BOOL:
          self.statusEhResponsavel = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.etnia = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.nomePaiCidadao = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.BOOL:
          self.desconheceNomePai = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.dtNaturalizacao = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.portariaNaturalizacao = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I64:
          self.dtEntradaBrasil = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.microArea = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.BOOL:
          self.stForaArea = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IdentificacaoUsuarioCidadaoThrift')
    if self.nomeSocial is not None:
      oprot.writeFieldBegin('nomeSocial', TType.STRING, 1)
      oprot.writeString(self.nomeSocial)
      oprot.writeFieldEnd()
    if self.codigoIbgeMunicipioNascimento is not None:
      oprot.writeFieldBegin('codigoIbgeMunicipioNascimento', TType.STRING, 2)
      oprot.writeString(self.codigoIbgeMunicipioNascimento)
      oprot.writeFieldEnd()
    if self.dataNascimentoCidadao is not None:
      oprot.writeFieldBegin('dataNascimentoCidadao', TType.I64, 3)
      oprot.writeI64(self.dataNascimentoCidadao)
      oprot.writeFieldEnd()
    if self.desconheceNomeMae is not None:
      oprot.writeFieldBegin('desconheceNomeMae', TType.BOOL, 5)
      oprot.writeBool(self.desconheceNomeMae)
      oprot.writeFieldEnd()
    if self.emailCidadao is not None:
      oprot.writeFieldBegin('emailCidadao', TType.STRING, 6)
      oprot.writeString(self.emailCidadao)
      oprot.writeFieldEnd()
    if self.nacionalidadeCidadao is not None:
      oprot.writeFieldBegin('nacionalidadeCidadao', TType.I64, 7)
      oprot.writeI64(self.nacionalidadeCidadao)
      oprot.writeFieldEnd()
    if self.nomeCidadao is not None:
      oprot.writeFieldBegin('nomeCidadao', TType.STRING, 8)
      oprot.writeString(self.nomeCidadao)
      oprot.writeFieldEnd()
    if self.nomeMaeCidadao is not None:
      oprot.writeFieldBegin('nomeMaeCidadao', TType.STRING, 9)
      oprot.writeString(self.nomeMaeCidadao)
      oprot.writeFieldEnd()
    if self.cnsCidadao is not None:
      oprot.writeFieldBegin('cnsCidadao', TType.STRING, 10)
      oprot.writeString(self.cnsCidadao)
      oprot.writeFieldEnd()
    if self.cnsResponsavelFamiliar is not None:
      oprot.writeFieldBegin('cnsResponsavelFamiliar', TType.STRING, 11)
      oprot.writeString(self.cnsResponsavelFamiliar)
      oprot.writeFieldEnd()
    if self.telefoneCelular is not None:
      oprot.writeFieldBegin('telefoneCelular', TType.STRING, 12)
      oprot.writeString(self.telefoneCelular)
      oprot.writeFieldEnd()
    if self.numeroNisPisPasep is not None:
      oprot.writeFieldBegin('numeroNisPisPasep', TType.STRING, 13)
      oprot.writeString(self.numeroNisPisPasep)
      oprot.writeFieldEnd()
    if self.paisNascimento is not None:
      oprot.writeFieldBegin('paisNascimento', TType.I64, 14)
      oprot.writeI64(self.paisNascimento)
      oprot.writeFieldEnd()
    if self.racaCorCidadao is not None:
      oprot.writeFieldBegin('racaCorCidadao', TType.I64, 15)
      oprot.writeI64(self.racaCorCidadao)
      oprot.writeFieldEnd()
    if self.sexoCidadao is not None:
      oprot.writeFieldBegin('sexoCidadao', TType.I64, 16)
      oprot.writeI64(self.sexoCidadao)
      oprot.writeFieldEnd()
    if self.statusEhResponsavel is not None:
      oprot.writeFieldBegin('statusEhResponsavel', TType.BOOL, 17)
      oprot.writeBool(self.statusEhResponsavel)
      oprot.writeFieldEnd()
    if self.etnia is not None:
      oprot.writeFieldBegin('etnia', TType.I64, 18)
      oprot.writeI64(self.etnia)
      oprot.writeFieldEnd()
    if self.nomePaiCidadao is not None:
      oprot.writeFieldBegin('nomePaiCidadao', TType.STRING, 19)
      oprot.writeString(self.nomePaiCidadao)
      oprot.writeFieldEnd()
    if self.desconheceNomePai is not None:
      oprot.writeFieldBegin('desconheceNomePai', TType.BOOL, 20)
      oprot.writeBool(self.desconheceNomePai)
      oprot.writeFieldEnd()
    if self.dtNaturalizacao is not None:
      oprot.writeFieldBegin('dtNaturalizacao', TType.I64, 21)
      oprot.writeI64(self.dtNaturalizacao)
      oprot.writeFieldEnd()
    if self.portariaNaturalizacao is not None:
      oprot.writeFieldBegin('portariaNaturalizacao', TType.STRING, 22)
      oprot.writeString(self.portariaNaturalizacao)
      oprot.writeFieldEnd()
    if self.dtEntradaBrasil is not None:
      oprot.writeFieldBegin('dtEntradaBrasil', TType.I64, 23)
      oprot.writeI64(self.dtEntradaBrasil)
      oprot.writeFieldEnd()
    if self.microArea is not None:
      oprot.writeFieldBegin('microArea', TType.STRING, 24)
      oprot.writeString(self.microArea)
      oprot.writeFieldEnd()
    if self.stForaArea is not None:
      oprot.writeFieldBegin('stForaArea', TType.BOOL, 25)
      oprot.writeBool(self.stForaArea)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nomeSocial)
    value = (value * 31) ^ hash(self.codigoIbgeMunicipioNascimento)
    value = (value * 31) ^ hash(self.dataNascimentoCidadao)
    value = (value * 31) ^ hash(self.desconheceNomeMae)
    value = (value * 31) ^ hash(self.emailCidadao)
    value = (value * 31) ^ hash(self.nacionalidadeCidadao)
    value = (value * 31) ^ hash(self.nomeCidadao)
    value = (value * 31) ^ hash(self.nomeMaeCidadao)
    value = (value * 31) ^ hash(self.cnsCidadao)
    value = (value * 31) ^ hash(self.cnsResponsavelFamiliar)
    value = (value * 31) ^ hash(self.telefoneCelular)
    value = (value * 31) ^ hash(self.numeroNisPisPasep)
    value = (value * 31) ^ hash(self.paisNascimento)
    value = (value * 31) ^ hash(self.racaCorCidadao)
    value = (value * 31) ^ hash(self.sexoCidadao)
    value = (value * 31) ^ hash(self.statusEhResponsavel)
    value = (value * 31) ^ hash(self.etnia)
    value = (value * 31) ^ hash(self.nomePaiCidadao)
    value = (value * 31) ^ hash(self.desconheceNomePai)
    value = (value * 31) ^ hash(self.dtNaturalizacao)
    value = (value * 31) ^ hash(self.portariaNaturalizacao)
    value = (value * 31) ^ hash(self.dtEntradaBrasil)
    value = (value * 31) ^ hash(self.microArea)
    value = (value * 31) ^ hash(self.stForaArea)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InformacoesSocioDemograficasThrift:
  """
  Attributes:
   - deficienciasCidadao
   - grauInstrucaoCidadao
   - ocupacaoCodigoCbo2002
   - orientacaoSexualCidadao
   - povoComunidadeTradicional
   - relacaoParentescoCidadao
   - situacaoMercadoTrabalhoCidadao
   - statusDesejaInformarOrientacaoSexual
   - statusFrequentaBenzedeira
   - statusFrequentaEscola
   - statusMembroPovoComunidadeTradicional
   - statusParticipaGrupoComunitario
   - statusPossuiPlanoSaudePrivado
   - statusTemAlgumaDeficiencia
   - identidadeGeneroCidadao
   - statusDesejaInformarIdentidadeGenero
   - responsavelPorCrianca
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'deficienciasCidadao', (TType.I64,None), None, ), # 1
    (2, TType.I64, 'grauInstrucaoCidadao', None, None, ), # 2
    None, # 3
    (4, TType.STRING, 'ocupacaoCodigoCbo2002', None, None, ), # 4
    (5, TType.I64, 'orientacaoSexualCidadao', None, None, ), # 5
    (6, TType.STRING, 'povoComunidadeTradicional', None, None, ), # 6
    (7, TType.I64, 'relacaoParentescoCidadao', None, None, ), # 7
    None, # 8
    (9, TType.I64, 'situacaoMercadoTrabalhoCidadao', None, None, ), # 9
    (10, TType.BOOL, 'statusDesejaInformarOrientacaoSexual', None, None, ), # 10
    (11, TType.BOOL, 'statusFrequentaBenzedeira', None, None, ), # 11
    (12, TType.BOOL, 'statusFrequentaEscola', None, None, ), # 12
    (13, TType.BOOL, 'statusMembroPovoComunidadeTradicional', None, None, ), # 13
    (14, TType.BOOL, 'statusParticipaGrupoComunitario', None, None, ), # 14
    (15, TType.BOOL, 'statusPossuiPlanoSaudePrivado', None, None, ), # 15
    (16, TType.BOOL, 'statusTemAlgumaDeficiencia', None, None, ), # 16
    (17, TType.I64, 'identidadeGeneroCidadao', None, None, ), # 17
    (18, TType.BOOL, 'statusDesejaInformarIdentidadeGenero', None, None, ), # 18
    (19, TType.LIST, 'responsavelPorCrianca', (TType.I64,None), None, ), # 19
  )

  def __init__(self, deficienciasCidadao=None, grauInstrucaoCidadao=None, ocupacaoCodigoCbo2002=None, orientacaoSexualCidadao=None, povoComunidadeTradicional=None, relacaoParentescoCidadao=None, situacaoMercadoTrabalhoCidadao=None, statusDesejaInformarOrientacaoSexual=None, statusFrequentaBenzedeira=None, statusFrequentaEscola=None, statusMembroPovoComunidadeTradicional=None, statusParticipaGrupoComunitario=None, statusPossuiPlanoSaudePrivado=None, statusTemAlgumaDeficiencia=None, identidadeGeneroCidadao=None, statusDesejaInformarIdentidadeGenero=None, responsavelPorCrianca=None,):
    self.deficienciasCidadao = deficienciasCidadao
    self.grauInstrucaoCidadao = grauInstrucaoCidadao
    self.ocupacaoCodigoCbo2002 = ocupacaoCodigoCbo2002
    self.orientacaoSexualCidadao = orientacaoSexualCidadao
    self.povoComunidadeTradicional = povoComunidadeTradicional
    self.relacaoParentescoCidadao = relacaoParentescoCidadao
    self.situacaoMercadoTrabalhoCidadao = situacaoMercadoTrabalhoCidadao
    self.statusDesejaInformarOrientacaoSexual = statusDesejaInformarOrientacaoSexual
    self.statusFrequentaBenzedeira = statusFrequentaBenzedeira
    self.statusFrequentaEscola = statusFrequentaEscola
    self.statusMembroPovoComunidadeTradicional = statusMembroPovoComunidadeTradicional
    self.statusParticipaGrupoComunitario = statusParticipaGrupoComunitario
    self.statusPossuiPlanoSaudePrivado = statusPossuiPlanoSaudePrivado
    self.statusTemAlgumaDeficiencia = statusTemAlgumaDeficiencia
    self.identidadeGeneroCidadao = identidadeGeneroCidadao
    self.statusDesejaInformarIdentidadeGenero = statusDesejaInformarIdentidadeGenero
    self.responsavelPorCrianca = responsavelPorCrianca

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.deficienciasCidadao = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readI64();
            self.deficienciasCidadao.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.grauInstrucaoCidadao = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ocupacaoCodigoCbo2002 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.orientacaoSexualCidadao = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.povoComunidadeTradicional = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.relacaoParentescoCidadao = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.situacaoMercadoTrabalhoCidadao = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.statusDesejaInformarOrientacaoSexual = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.statusFrequentaBenzedeira = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.statusFrequentaEscola = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.statusMembroPovoComunidadeTradicional = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BOOL:
          self.statusParticipaGrupoComunitario = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.BOOL:
          self.statusPossuiPlanoSaudePrivado = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.BOOL:
          self.statusTemAlgumaDeficiencia = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.identidadeGeneroCidadao = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.BOOL:
          self.statusDesejaInformarIdentidadeGenero = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.LIST:
          self.responsavelPorCrianca = []
          (_etype44, _size41) = iprot.readListBegin()
          for _i45 in xrange(_size41):
            _elem46 = iprot.readI64();
            self.responsavelPorCrianca.append(_elem46)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InformacoesSocioDemograficasThrift')
    if self.deficienciasCidadao is not None:
      oprot.writeFieldBegin('deficienciasCidadao', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.deficienciasCidadao))
      for iter47 in self.deficienciasCidadao:
        oprot.writeI64(iter47)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.grauInstrucaoCidadao is not None:
      oprot.writeFieldBegin('grauInstrucaoCidadao', TType.I64, 2)
      oprot.writeI64(self.grauInstrucaoCidadao)
      oprot.writeFieldEnd()
    if self.ocupacaoCodigoCbo2002 is not None:
      oprot.writeFieldBegin('ocupacaoCodigoCbo2002', TType.STRING, 4)
      oprot.writeString(self.ocupacaoCodigoCbo2002)
      oprot.writeFieldEnd()
    if self.orientacaoSexualCidadao is not None:
      oprot.writeFieldBegin('orientacaoSexualCidadao', TType.I64, 5)
      oprot.writeI64(self.orientacaoSexualCidadao)
      oprot.writeFieldEnd()
    if self.povoComunidadeTradicional is not None:
      oprot.writeFieldBegin('povoComunidadeTradicional', TType.STRING, 6)
      oprot.writeString(self.povoComunidadeTradicional)
      oprot.writeFieldEnd()
    if self.relacaoParentescoCidadao is not None:
      oprot.writeFieldBegin('relacaoParentescoCidadao', TType.I64, 7)
      oprot.writeI64(self.relacaoParentescoCidadao)
      oprot.writeFieldEnd()
    if self.situacaoMercadoTrabalhoCidadao is not None:
      oprot.writeFieldBegin('situacaoMercadoTrabalhoCidadao', TType.I64, 9)
      oprot.writeI64(self.situacaoMercadoTrabalhoCidadao)
      oprot.writeFieldEnd()
    if self.statusDesejaInformarOrientacaoSexual is not None:
      oprot.writeFieldBegin('statusDesejaInformarOrientacaoSexual', TType.BOOL, 10)
      oprot.writeBool(self.statusDesejaInformarOrientacaoSexual)
      oprot.writeFieldEnd()
    if self.statusFrequentaBenzedeira is not None:
      oprot.writeFieldBegin('statusFrequentaBenzedeira', TType.BOOL, 11)
      oprot.writeBool(self.statusFrequentaBenzedeira)
      oprot.writeFieldEnd()
    if self.statusFrequentaEscola is not None:
      oprot.writeFieldBegin('statusFrequentaEscola', TType.BOOL, 12)
      oprot.writeBool(self.statusFrequentaEscola)
      oprot.writeFieldEnd()
    if self.statusMembroPovoComunidadeTradicional is not None:
      oprot.writeFieldBegin('statusMembroPovoComunidadeTradicional', TType.BOOL, 13)
      oprot.writeBool(self.statusMembroPovoComunidadeTradicional)
      oprot.writeFieldEnd()
    if self.statusParticipaGrupoComunitario is not None:
      oprot.writeFieldBegin('statusParticipaGrupoComunitario', TType.BOOL, 14)
      oprot.writeBool(self.statusParticipaGrupoComunitario)
      oprot.writeFieldEnd()
    if self.statusPossuiPlanoSaudePrivado is not None:
      oprot.writeFieldBegin('statusPossuiPlanoSaudePrivado', TType.BOOL, 15)
      oprot.writeBool(self.statusPossuiPlanoSaudePrivado)
      oprot.writeFieldEnd()
    if self.statusTemAlgumaDeficiencia is not None:
      oprot.writeFieldBegin('statusTemAlgumaDeficiencia', TType.BOOL, 16)
      oprot.writeBool(self.statusTemAlgumaDeficiencia)
      oprot.writeFieldEnd()
    if self.identidadeGeneroCidadao is not None:
      oprot.writeFieldBegin('identidadeGeneroCidadao', TType.I64, 17)
      oprot.writeI64(self.identidadeGeneroCidadao)
      oprot.writeFieldEnd()
    if self.statusDesejaInformarIdentidadeGenero is not None:
      oprot.writeFieldBegin('statusDesejaInformarIdentidadeGenero', TType.BOOL, 18)
      oprot.writeBool(self.statusDesejaInformarIdentidadeGenero)
      oprot.writeFieldEnd()
    if self.responsavelPorCrianca is not None:
      oprot.writeFieldBegin('responsavelPorCrianca', TType.LIST, 19)
      oprot.writeListBegin(TType.I64, len(self.responsavelPorCrianca))
      for iter48 in self.responsavelPorCrianca:
        oprot.writeI64(iter48)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.deficienciasCidadao)
    value = (value * 31) ^ hash(self.grauInstrucaoCidadao)
    value = (value * 31) ^ hash(self.ocupacaoCodigoCbo2002)
    value = (value * 31) ^ hash(self.orientacaoSexualCidadao)
    value = (value * 31) ^ hash(self.povoComunidadeTradicional)
    value = (value * 31) ^ hash(self.relacaoParentescoCidadao)
    value = (value * 31) ^ hash(self.situacaoMercadoTrabalhoCidadao)
    value = (value * 31) ^ hash(self.statusDesejaInformarOrientacaoSexual)
    value = (value * 31) ^ hash(self.statusFrequentaBenzedeira)
    value = (value * 31) ^ hash(self.statusFrequentaEscola)
    value = (value * 31) ^ hash(self.statusMembroPovoComunidadeTradicional)
    value = (value * 31) ^ hash(self.statusParticipaGrupoComunitario)
    value = (value * 31) ^ hash(self.statusPossuiPlanoSaudePrivado)
    value = (value * 31) ^ hash(self.statusTemAlgumaDeficiencia)
    value = (value * 31) ^ hash(self.identidadeGeneroCidadao)
    value = (value * 31) ^ hash(self.statusDesejaInformarIdentidadeGenero)
    value = (value * 31) ^ hash(self.responsavelPorCrianca)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SaidaCidadaoCadastroThrift:
  """
  Attributes:
   - motivoSaidaCidadao
   - dataObito
   - numeroDO
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'motivoSaidaCidadao', None, None, ), # 1
    (2, TType.I64, 'dataObito', None, None, ), # 2
    (3, TType.STRING, 'numeroDO', None, None, ), # 3
  )

  def __init__(self, motivoSaidaCidadao=None, dataObito=None, numeroDO=None,):
    self.motivoSaidaCidadao = motivoSaidaCidadao
    self.dataObito = dataObito
    self.numeroDO = numeroDO

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.motivoSaidaCidadao = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.dataObito = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.numeroDO = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SaidaCidadaoCadastroThrift')
    if self.motivoSaidaCidadao is not None:
      oprot.writeFieldBegin('motivoSaidaCidadao', TType.I64, 1)
      oprot.writeI64(self.motivoSaidaCidadao)
      oprot.writeFieldEnd()
    if self.dataObito is not None:
      oprot.writeFieldBegin('dataObito', TType.I64, 2)
      oprot.writeI64(self.dataObito)
      oprot.writeFieldEnd()
    if self.numeroDO is not None:
      oprot.writeFieldBegin('numeroDO', TType.STRING, 3)
      oprot.writeString(self.numeroDO)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.motivoSaidaCidadao)
    value = (value * 31) ^ hash(self.dataObito)
    value = (value * 31) ^ hash(self.numeroDO)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CadastroIndividualThrift:
  """
  Attributes:
   - condicoesDeSaude
   - emSituacaoDeRua
   - fichaAtualizada
   - identificacaoUsuarioCidadao
   - informacoesSocioDemograficas
   - statusTermoRecusaCadastroIndividualAtencaoBasica
   - tpCdsOrigem
   - uuid
   - uuidFichaOriginadora
   - uuidCidadao
   - saidaCidadaoCadastro
   - headerTransport
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'condicoesDeSaude', (CondicoesDeSaudeThrift, CondicoesDeSaudeThrift.thrift_spec), None, ), # 1
    None, # 2
    (3, TType.STRUCT, 'emSituacaoDeRua', (EmSituacaoDeRuaThrift, EmSituacaoDeRuaThrift.thrift_spec), None, ), # 3
    (4, TType.BOOL, 'fichaAtualizada', None, None, ), # 4
    (5, TType.STRUCT, 'identificacaoUsuarioCidadao', (IdentificacaoUsuarioCidadaoThrift, IdentificacaoUsuarioCidadaoThrift.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'informacoesSocioDemograficas', (InformacoesSocioDemograficasThrift, InformacoesSocioDemograficasThrift.thrift_spec), None, ), # 6
    (7, TType.BOOL, 'statusTermoRecusaCadastroIndividualAtencaoBasica', None, None, ), # 7
    (8, TType.I32, 'tpCdsOrigem', None, None, ), # 8
    (9, TType.STRING, 'uuid', None, None, ), # 9
    (10, TType.STRING, 'uuidFichaOriginadora', None, None, ), # 10
    (11, TType.STRING, 'uuidCidadao', None, None, ), # 11
    (12, TType.STRUCT, 'saidaCidadaoCadastro', (SaidaCidadaoCadastroThrift, SaidaCidadaoCadastroThrift.thrift_spec), None, ), # 12
    (13, TType.STRUCT, 'headerTransport', (br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift, br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift.thrift_spec), None, ), # 13
  )

  def __init__(self, condicoesDeSaude=None, emSituacaoDeRua=None, fichaAtualizada=None, identificacaoUsuarioCidadao=None, informacoesSocioDemograficas=None, statusTermoRecusaCadastroIndividualAtencaoBasica=None, tpCdsOrigem=None, uuid=None, uuidFichaOriginadora=None, uuidCidadao=None, saidaCidadaoCadastro=None, headerTransport=None,):
    self.condicoesDeSaude = condicoesDeSaude
    self.emSituacaoDeRua = emSituacaoDeRua
    self.fichaAtualizada = fichaAtualizada
    self.identificacaoUsuarioCidadao = identificacaoUsuarioCidadao
    self.informacoesSocioDemograficas = informacoesSocioDemograficas
    self.statusTermoRecusaCadastroIndividualAtencaoBasica = statusTermoRecusaCadastroIndividualAtencaoBasica
    self.tpCdsOrigem = tpCdsOrigem
    self.uuid = uuid
    self.uuidFichaOriginadora = uuidFichaOriginadora
    self.uuidCidadao = uuidCidadao
    self.saidaCidadaoCadastro = saidaCidadaoCadastro
    self.headerTransport = headerTransport

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.condicoesDeSaude = CondicoesDeSaudeThrift()
          self.condicoesDeSaude.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.emSituacaoDeRua = EmSituacaoDeRuaThrift()
          self.emSituacaoDeRua.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.fichaAtualizada = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.identificacaoUsuarioCidadao = IdentificacaoUsuarioCidadaoThrift()
          self.identificacaoUsuarioCidadao.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.informacoesSocioDemograficas = InformacoesSocioDemograficasThrift()
          self.informacoesSocioDemograficas.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.statusTermoRecusaCadastroIndividualAtencaoBasica = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.tpCdsOrigem = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.uuidFichaOriginadora = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.uuidCidadao = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.saidaCidadaoCadastro = SaidaCidadaoCadastroThrift()
          self.saidaCidadaoCadastro.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.headerTransport = br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift()
          self.headerTransport.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CadastroIndividualThrift')
    if self.condicoesDeSaude is not None:
      oprot.writeFieldBegin('condicoesDeSaude', TType.STRUCT, 1)
      self.condicoesDeSaude.write(oprot)
      oprot.writeFieldEnd()
    if self.emSituacaoDeRua is not None:
      oprot.writeFieldBegin('emSituacaoDeRua', TType.STRUCT, 3)
      self.emSituacaoDeRua.write(oprot)
      oprot.writeFieldEnd()
    if self.fichaAtualizada is not None:
      oprot.writeFieldBegin('fichaAtualizada', TType.BOOL, 4)
      oprot.writeBool(self.fichaAtualizada)
      oprot.writeFieldEnd()
    if self.identificacaoUsuarioCidadao is not None:
      oprot.writeFieldBegin('identificacaoUsuarioCidadao', TType.STRUCT, 5)
      self.identificacaoUsuarioCidadao.write(oprot)
      oprot.writeFieldEnd()
    if self.informacoesSocioDemograficas is not None:
      oprot.writeFieldBegin('informacoesSocioDemograficas', TType.STRUCT, 6)
      self.informacoesSocioDemograficas.write(oprot)
      oprot.writeFieldEnd()
    if self.statusTermoRecusaCadastroIndividualAtencaoBasica is not None:
      oprot.writeFieldBegin('statusTermoRecusaCadastroIndividualAtencaoBasica', TType.BOOL, 7)
      oprot.writeBool(self.statusTermoRecusaCadastroIndividualAtencaoBasica)
      oprot.writeFieldEnd()
    if self.tpCdsOrigem is not None:
      oprot.writeFieldBegin('tpCdsOrigem', TType.I32, 8)
      oprot.writeI32(self.tpCdsOrigem)
      oprot.writeFieldEnd()
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 9)
      oprot.writeString(self.uuid)
      oprot.writeFieldEnd()
    if self.uuidFichaOriginadora is not None:
      oprot.writeFieldBegin('uuidFichaOriginadora', TType.STRING, 10)
      oprot.writeString(self.uuidFichaOriginadora)
      oprot.writeFieldEnd()
    if self.uuidCidadao is not None:
      oprot.writeFieldBegin('uuidCidadao', TType.STRING, 11)
      oprot.writeString(self.uuidCidadao)
      oprot.writeFieldEnd()
    if self.saidaCidadaoCadastro is not None:
      oprot.writeFieldBegin('saidaCidadaoCadastro', TType.STRUCT, 12)
      self.saidaCidadaoCadastro.write(oprot)
      oprot.writeFieldEnd()
    if self.headerTransport is not None:
      oprot.writeFieldBegin('headerTransport', TType.STRUCT, 13)
      self.headerTransport.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.uuid is None:
      raise TProtocol.TProtocolException(message='Required field uuid is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.condicoesDeSaude)
    value = (value * 31) ^ hash(self.emSituacaoDeRua)
    value = (value * 31) ^ hash(self.fichaAtualizada)
    value = (value * 31) ^ hash(self.identificacaoUsuarioCidadao)
    value = (value * 31) ^ hash(self.informacoesSocioDemograficas)
    value = (value * 31) ^ hash(self.statusTermoRecusaCadastroIndividualAtencaoBasica)
    value = (value * 31) ^ hash(self.tpCdsOrigem)
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.uuidFichaOriginadora)
    value = (value * 31) ^ hash(self.uuidCidadao)
    value = (value * 31) ^ hash(self.saidaCidadaoCadastro)
    value = (value * 31) ^ hash(self.headerTransport)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
