#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import br.gov.saude.esusab.ras.common.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class FichaComplementarZikaMicrocefaliaThrift:
  """
  Attributes:
   - headerTransport
   - uuidFicha
   - tpCdsOrigem
   - turno
   - cnsCidadao
   - cnsResponsavelFamiliar
   - dataRealizacaoTesteOlhinho
   - coResultadoTesteOlhinho
   - dataRealizacaoExameFundoOlho
   - coResultadoExameFundoOlho
   - dataRealizacaoTesteOrelhinha
   - coResultadoTesteOrelhinha
   - dataRealizacaoUSTransfontanela
   - coResultadoUsTransfontanela
   - dataRealizacaoTomografiaComputadorizada
   - coResultadoTomografiaComputadorizada
   - dataRealizacaoRessonanciaMagnetica
   - coResultadoRessonanciaMagnetica
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'headerTransport', (br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift, br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift.thrift_spec), None, ), # 1
    (2, TType.STRING, 'uuidFicha', None, None, ), # 2
    (3, TType.I32, 'tpCdsOrigem', None, None, ), # 3
    (4, TType.I64, 'turno', None, None, ), # 4
    (5, TType.STRING, 'cnsCidadao', None, None, ), # 5
    (6, TType.STRING, 'cnsResponsavelFamiliar', None, None, ), # 6
    (7, TType.I64, 'dataRealizacaoTesteOlhinho', None, None, ), # 7
    (8, TType.I64, 'coResultadoTesteOlhinho', None, None, ), # 8
    (9, TType.I64, 'dataRealizacaoExameFundoOlho', None, None, ), # 9
    (10, TType.I64, 'coResultadoExameFundoOlho', None, None, ), # 10
    (11, TType.I64, 'dataRealizacaoTesteOrelhinha', None, None, ), # 11
    (12, TType.I64, 'coResultadoTesteOrelhinha', None, None, ), # 12
    (13, TType.I64, 'dataRealizacaoUSTransfontanela', None, None, ), # 13
    (14, TType.I64, 'coResultadoUsTransfontanela', None, None, ), # 14
    (15, TType.I64, 'dataRealizacaoTomografiaComputadorizada', None, None, ), # 15
    (16, TType.I64, 'coResultadoTomografiaComputadorizada', None, None, ), # 16
    (17, TType.I64, 'dataRealizacaoRessonanciaMagnetica', None, None, ), # 17
    (18, TType.I64, 'coResultadoRessonanciaMagnetica', None, None, ), # 18
  )

  def __init__(self, headerTransport=None, uuidFicha=None, tpCdsOrigem=None, turno=None, cnsCidadao=None, cnsResponsavelFamiliar=None, dataRealizacaoTesteOlhinho=None, coResultadoTesteOlhinho=None, dataRealizacaoExameFundoOlho=None, coResultadoExameFundoOlho=None, dataRealizacaoTesteOrelhinha=None, coResultadoTesteOrelhinha=None, dataRealizacaoUSTransfontanela=None, coResultadoUsTransfontanela=None, dataRealizacaoTomografiaComputadorizada=None, coResultadoTomografiaComputadorizada=None, dataRealizacaoRessonanciaMagnetica=None, coResultadoRessonanciaMagnetica=None,):
    self.headerTransport = headerTransport
    self.uuidFicha = uuidFicha
    self.tpCdsOrigem = tpCdsOrigem
    self.turno = turno
    self.cnsCidadao = cnsCidadao
    self.cnsResponsavelFamiliar = cnsResponsavelFamiliar
    self.dataRealizacaoTesteOlhinho = dataRealizacaoTesteOlhinho
    self.coResultadoTesteOlhinho = coResultadoTesteOlhinho
    self.dataRealizacaoExameFundoOlho = dataRealizacaoExameFundoOlho
    self.coResultadoExameFundoOlho = coResultadoExameFundoOlho
    self.dataRealizacaoTesteOrelhinha = dataRealizacaoTesteOrelhinha
    self.coResultadoTesteOrelhinha = coResultadoTesteOrelhinha
    self.dataRealizacaoUSTransfontanela = dataRealizacaoUSTransfontanela
    self.coResultadoUsTransfontanela = coResultadoUsTransfontanela
    self.dataRealizacaoTomografiaComputadorizada = dataRealizacaoTomografiaComputadorizada
    self.coResultadoTomografiaComputadorizada = coResultadoTomografiaComputadorizada
    self.dataRealizacaoRessonanciaMagnetica = dataRealizacaoRessonanciaMagnetica
    self.coResultadoRessonanciaMagnetica = coResultadoRessonanciaMagnetica

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.headerTransport = br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift()
          self.headerTransport.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.uuidFicha = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.tpCdsOrigem = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.turno = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.cnsCidadao = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.cnsResponsavelFamiliar = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.dataRealizacaoTesteOlhinho = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.coResultadoTesteOlhinho = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.dataRealizacaoExameFundoOlho = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.coResultadoExameFundoOlho = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.dataRealizacaoTesteOrelhinha = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.coResultadoTesteOrelhinha = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.dataRealizacaoUSTransfontanela = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.coResultadoUsTransfontanela = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.dataRealizacaoTomografiaComputadorizada = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.coResultadoTomografiaComputadorizada = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.dataRealizacaoRessonanciaMagnetica = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.coResultadoRessonanciaMagnetica = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FichaComplementarZikaMicrocefaliaThrift')
    if self.headerTransport is not None:
      oprot.writeFieldBegin('headerTransport', TType.STRUCT, 1)
      self.headerTransport.write(oprot)
      oprot.writeFieldEnd()
    if self.uuidFicha is not None:
      oprot.writeFieldBegin('uuidFicha', TType.STRING, 2)
      oprot.writeString(self.uuidFicha)
      oprot.writeFieldEnd()
    if self.tpCdsOrigem is not None:
      oprot.writeFieldBegin('tpCdsOrigem', TType.I32, 3)
      oprot.writeI32(self.tpCdsOrigem)
      oprot.writeFieldEnd()
    if self.turno is not None:
      oprot.writeFieldBegin('turno', TType.I64, 4)
      oprot.writeI64(self.turno)
      oprot.writeFieldEnd()
    if self.cnsCidadao is not None:
      oprot.writeFieldBegin('cnsCidadao', TType.STRING, 5)
      oprot.writeString(self.cnsCidadao)
      oprot.writeFieldEnd()
    if self.cnsResponsavelFamiliar is not None:
      oprot.writeFieldBegin('cnsResponsavelFamiliar', TType.STRING, 6)
      oprot.writeString(self.cnsResponsavelFamiliar)
      oprot.writeFieldEnd()
    if self.dataRealizacaoTesteOlhinho is not None:
      oprot.writeFieldBegin('dataRealizacaoTesteOlhinho', TType.I64, 7)
      oprot.writeI64(self.dataRealizacaoTesteOlhinho)
      oprot.writeFieldEnd()
    if self.coResultadoTesteOlhinho is not None:
      oprot.writeFieldBegin('coResultadoTesteOlhinho', TType.I64, 8)
      oprot.writeI64(self.coResultadoTesteOlhinho)
      oprot.writeFieldEnd()
    if self.dataRealizacaoExameFundoOlho is not None:
      oprot.writeFieldBegin('dataRealizacaoExameFundoOlho', TType.I64, 9)
      oprot.writeI64(self.dataRealizacaoExameFundoOlho)
      oprot.writeFieldEnd()
    if self.coResultadoExameFundoOlho is not None:
      oprot.writeFieldBegin('coResultadoExameFundoOlho', TType.I64, 10)
      oprot.writeI64(self.coResultadoExameFundoOlho)
      oprot.writeFieldEnd()
    if self.dataRealizacaoTesteOrelhinha is not None:
      oprot.writeFieldBegin('dataRealizacaoTesteOrelhinha', TType.I64, 11)
      oprot.writeI64(self.dataRealizacaoTesteOrelhinha)
      oprot.writeFieldEnd()
    if self.coResultadoTesteOrelhinha is not None:
      oprot.writeFieldBegin('coResultadoTesteOrelhinha', TType.I64, 12)
      oprot.writeI64(self.coResultadoTesteOrelhinha)
      oprot.writeFieldEnd()
    if self.dataRealizacaoUSTransfontanela is not None:
      oprot.writeFieldBegin('dataRealizacaoUSTransfontanela', TType.I64, 13)
      oprot.writeI64(self.dataRealizacaoUSTransfontanela)
      oprot.writeFieldEnd()
    if self.coResultadoUsTransfontanela is not None:
      oprot.writeFieldBegin('coResultadoUsTransfontanela', TType.I64, 14)
      oprot.writeI64(self.coResultadoUsTransfontanela)
      oprot.writeFieldEnd()
    if self.dataRealizacaoTomografiaComputadorizada is not None:
      oprot.writeFieldBegin('dataRealizacaoTomografiaComputadorizada', TType.I64, 15)
      oprot.writeI64(self.dataRealizacaoTomografiaComputadorizada)
      oprot.writeFieldEnd()
    if self.coResultadoTomografiaComputadorizada is not None:
      oprot.writeFieldBegin('coResultadoTomografiaComputadorizada', TType.I64, 16)
      oprot.writeI64(self.coResultadoTomografiaComputadorizada)
      oprot.writeFieldEnd()
    if self.dataRealizacaoRessonanciaMagnetica is not None:
      oprot.writeFieldBegin('dataRealizacaoRessonanciaMagnetica', TType.I64, 17)
      oprot.writeI64(self.dataRealizacaoRessonanciaMagnetica)
      oprot.writeFieldEnd()
    if self.coResultadoRessonanciaMagnetica is not None:
      oprot.writeFieldBegin('coResultadoRessonanciaMagnetica', TType.I64, 18)
      oprot.writeI64(self.coResultadoRessonanciaMagnetica)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.uuidFicha is None:
      raise TProtocol.TProtocolException(message='Required field uuidFicha is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.headerTransport)
    value = (value * 31) ^ hash(self.uuidFicha)
    value = (value * 31) ^ hash(self.tpCdsOrigem)
    value = (value * 31) ^ hash(self.turno)
    value = (value * 31) ^ hash(self.cnsCidadao)
    value = (value * 31) ^ hash(self.cnsResponsavelFamiliar)
    value = (value * 31) ^ hash(self.dataRealizacaoTesteOlhinho)
    value = (value * 31) ^ hash(self.coResultadoTesteOlhinho)
    value = (value * 31) ^ hash(self.dataRealizacaoExameFundoOlho)
    value = (value * 31) ^ hash(self.coResultadoExameFundoOlho)
    value = (value * 31) ^ hash(self.dataRealizacaoTesteOrelhinha)
    value = (value * 31) ^ hash(self.coResultadoTesteOrelhinha)
    value = (value * 31) ^ hash(self.dataRealizacaoUSTransfontanela)
    value = (value * 31) ^ hash(self.coResultadoUsTransfontanela)
    value = (value * 31) ^ hash(self.dataRealizacaoTomografiaComputadorizada)
    value = (value * 31) ^ hash(self.coResultadoTomografiaComputadorizada)
    value = (value * 31) ^ hash(self.dataRealizacaoRessonanciaMagnetica)
    value = (value * 31) ^ hash(self.coResultadoRessonanciaMagnetica)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
