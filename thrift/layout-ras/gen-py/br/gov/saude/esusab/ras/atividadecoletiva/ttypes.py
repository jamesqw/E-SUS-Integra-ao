#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import br.gov.saude.esusab.ras.common.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ParticipanteRowItemThrift:
  """
  Attributes:
   - cnsParticipante
   - dataNascimento
   - avaliacaoAlterada
   - peso
   - altura
   - cessouHabitoFumar
   - abandonouGrupo
   - sexo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cnsParticipante', None, None, ), # 1
    (2, TType.I64, 'dataNascimento', None, None, ), # 2
    (3, TType.BOOL, 'avaliacaoAlterada', None, None, ), # 3
    (4, TType.DOUBLE, 'peso', None, None, ), # 4
    (5, TType.DOUBLE, 'altura', None, None, ), # 5
    (6, TType.BOOL, 'cessouHabitoFumar', None, None, ), # 6
    (7, TType.BOOL, 'abandonouGrupo', None, None, ), # 7
    (8, TType.I64, 'sexo', None, None, ), # 8
  )

  def __init__(self, cnsParticipante=None, dataNascimento=None, avaliacaoAlterada=None, peso=None, altura=None, cessouHabitoFumar=None, abandonouGrupo=None, sexo=None,):
    self.cnsParticipante = cnsParticipante
    self.dataNascimento = dataNascimento
    self.avaliacaoAlterada = avaliacaoAlterada
    self.peso = peso
    self.altura = altura
    self.cessouHabitoFumar = cessouHabitoFumar
    self.abandonouGrupo = abandonouGrupo
    self.sexo = sexo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cnsParticipante = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.dataNascimento = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.avaliacaoAlterada = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.peso = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.altura = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.cessouHabitoFumar = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.abandonouGrupo = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.sexo = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ParticipanteRowItemThrift')
    if self.cnsParticipante is not None:
      oprot.writeFieldBegin('cnsParticipante', TType.STRING, 1)
      oprot.writeString(self.cnsParticipante)
      oprot.writeFieldEnd()
    if self.dataNascimento is not None:
      oprot.writeFieldBegin('dataNascimento', TType.I64, 2)
      oprot.writeI64(self.dataNascimento)
      oprot.writeFieldEnd()
    if self.avaliacaoAlterada is not None:
      oprot.writeFieldBegin('avaliacaoAlterada', TType.BOOL, 3)
      oprot.writeBool(self.avaliacaoAlterada)
      oprot.writeFieldEnd()
    if self.peso is not None:
      oprot.writeFieldBegin('peso', TType.DOUBLE, 4)
      oprot.writeDouble(self.peso)
      oprot.writeFieldEnd()
    if self.altura is not None:
      oprot.writeFieldBegin('altura', TType.DOUBLE, 5)
      oprot.writeDouble(self.altura)
      oprot.writeFieldEnd()
    if self.cessouHabitoFumar is not None:
      oprot.writeFieldBegin('cessouHabitoFumar', TType.BOOL, 6)
      oprot.writeBool(self.cessouHabitoFumar)
      oprot.writeFieldEnd()
    if self.abandonouGrupo is not None:
      oprot.writeFieldBegin('abandonouGrupo', TType.BOOL, 7)
      oprot.writeBool(self.abandonouGrupo)
      oprot.writeFieldEnd()
    if self.sexo is not None:
      oprot.writeFieldBegin('sexo', TType.I64, 8)
      oprot.writeI64(self.sexo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cnsParticipante)
    value = (value * 31) ^ hash(self.dataNascimento)
    value = (value * 31) ^ hash(self.avaliacaoAlterada)
    value = (value * 31) ^ hash(self.peso)
    value = (value * 31) ^ hash(self.altura)
    value = (value * 31) ^ hash(self.cessouHabitoFumar)
    value = (value * 31) ^ hash(self.abandonouGrupo)
    value = (value * 31) ^ hash(self.sexo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProfissionalCboRowItemThrift:
  """
  Attributes:
   - cnsProfissional
   - codigoCbo2002
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cnsProfissional', None, None, ), # 1
    (2, TType.STRING, 'codigoCbo2002', None, None, ), # 2
  )

  def __init__(self, cnsProfissional=None, codigoCbo2002=None,):
    self.cnsProfissional = cnsProfissional
    self.codigoCbo2002 = codigoCbo2002

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cnsProfissional = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.codigoCbo2002 = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProfissionalCboRowItemThrift')
    if self.cnsProfissional is not None:
      oprot.writeFieldBegin('cnsProfissional', TType.STRING, 1)
      oprot.writeString(self.cnsProfissional)
      oprot.writeFieldEnd()
    if self.codigoCbo2002 is not None:
      oprot.writeFieldBegin('codigoCbo2002', TType.STRING, 2)
      oprot.writeString(self.codigoCbo2002)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cnsProfissional)
    value = (value * 31) ^ hash(self.codigoCbo2002)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FichaAtividadeColetivaThrift:
  """
  Attributes:
   - uuidFicha
   - outraLocalidade
   - inep
   - numParticipantes
   - numAvaliacoesAlteradas
   - profissionais
   - atividadeTipo
   - temasParaReuniao
   - publicoAlvo
   - participantes
   - tbCdsOrigem
   - cnesLocalAtividade
   - procedimento
   - turno
   - headerTransport
   - temasParaSaude
   - praticasEmSaude
   - pseEducacao
   - pseSaude
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuidFicha', None, None, ), # 1
    None, # 2
    None, # 3
    (4, TType.STRING, 'outraLocalidade', None, None, ), # 4
    None, # 5
    None, # 6
    (7, TType.I64, 'inep', None, None, ), # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.I32, 'numParticipantes', None, None, ), # 11
    (12, TType.I32, 'numAvaliacoesAlteradas', None, None, ), # 12
    (13, TType.LIST, 'profissionais', (TType.STRUCT,(ProfissionalCboRowItemThrift, ProfissionalCboRowItemThrift.thrift_spec)), None, ), # 13
    (14, TType.I64, 'atividadeTipo', None, None, ), # 14
    (15, TType.LIST, 'temasParaReuniao', (TType.I64,None), None, ), # 15
    (16, TType.LIST, 'publicoAlvo', (TType.I64,None), None, ), # 16
    None, # 17
    (18, TType.LIST, 'participantes', (TType.STRUCT,(ParticipanteRowItemThrift, ParticipanteRowItemThrift.thrift_spec)), None, ), # 18
    (19, TType.I32, 'tbCdsOrigem', None, None, ), # 19
    None, # 20
    (21, TType.STRING, 'cnesLocalAtividade', None, None, ), # 21
    (22, TType.STRING, 'procedimento', None, None, ), # 22
    (23, TType.I64, 'turno', None, None, ), # 23
    (24, TType.STRUCT, 'headerTransport', (br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift, br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift.thrift_spec), None, ), # 24
    (25, TType.LIST, 'temasParaSaude', (TType.I64,None), None, ), # 25
    (26, TType.LIST, 'praticasEmSaude', (TType.I64,None), None, ), # 26
    (27, TType.BOOL, 'pseEducacao', None, None, ), # 27
    (28, TType.BOOL, 'pseSaude', None, None, ), # 28
  )

  def __init__(self, uuidFicha=None, outraLocalidade=None, inep=None, numParticipantes=None, numAvaliacoesAlteradas=None, profissionais=None, atividadeTipo=None, temasParaReuniao=None, publicoAlvo=None, participantes=None, tbCdsOrigem=None, cnesLocalAtividade=None, procedimento=None, turno=None, headerTransport=None, temasParaSaude=None, praticasEmSaude=None, pseEducacao=None, pseSaude=None,):
    self.uuidFicha = uuidFicha
    self.outraLocalidade = outraLocalidade
    self.inep = inep
    self.numParticipantes = numParticipantes
    self.numAvaliacoesAlteradas = numAvaliacoesAlteradas
    self.profissionais = profissionais
    self.atividadeTipo = atividadeTipo
    self.temasParaReuniao = temasParaReuniao
    self.publicoAlvo = publicoAlvo
    self.participantes = participantes
    self.tbCdsOrigem = tbCdsOrigem
    self.cnesLocalAtividade = cnesLocalAtividade
    self.procedimento = procedimento
    self.turno = turno
    self.headerTransport = headerTransport
    self.temasParaSaude = temasParaSaude
    self.praticasEmSaude = praticasEmSaude
    self.pseEducacao = pseEducacao
    self.pseSaude = pseSaude

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uuidFicha = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.outraLocalidade = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.inep = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.numParticipantes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.numAvaliacoesAlteradas = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.profissionais = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ProfissionalCboRowItemThrift()
            _elem5.read(iprot)
            self.profissionais.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.atividadeTipo = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.temasParaReuniao = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.temasParaReuniao.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.publicoAlvo = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readI64();
            self.publicoAlvo.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.LIST:
          self.participantes = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = ParticipanteRowItemThrift()
            _elem23.read(iprot)
            self.participantes.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.tbCdsOrigem = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.cnesLocalAtividade = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.procedimento = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I64:
          self.turno = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRUCT:
          self.headerTransport = br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift()
          self.headerTransport.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.LIST:
          self.temasParaSaude = []
          (_etype27, _size24) = iprot.readListBegin()
          for _i28 in xrange(_size24):
            _elem29 = iprot.readI64();
            self.temasParaSaude.append(_elem29)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.LIST:
          self.praticasEmSaude = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = iprot.readI64();
            self.praticasEmSaude.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.BOOL:
          self.pseEducacao = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.BOOL:
          self.pseSaude = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FichaAtividadeColetivaThrift')
    if self.uuidFicha is not None:
      oprot.writeFieldBegin('uuidFicha', TType.STRING, 1)
      oprot.writeString(self.uuidFicha)
      oprot.writeFieldEnd()
    if self.outraLocalidade is not None:
      oprot.writeFieldBegin('outraLocalidade', TType.STRING, 4)
      oprot.writeString(self.outraLocalidade)
      oprot.writeFieldEnd()
    if self.inep is not None:
      oprot.writeFieldBegin('inep', TType.I64, 7)
      oprot.writeI64(self.inep)
      oprot.writeFieldEnd()
    if self.numParticipantes is not None:
      oprot.writeFieldBegin('numParticipantes', TType.I32, 11)
      oprot.writeI32(self.numParticipantes)
      oprot.writeFieldEnd()
    if self.numAvaliacoesAlteradas is not None:
      oprot.writeFieldBegin('numAvaliacoesAlteradas', TType.I32, 12)
      oprot.writeI32(self.numAvaliacoesAlteradas)
      oprot.writeFieldEnd()
    if self.profissionais is not None:
      oprot.writeFieldBegin('profissionais', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.profissionais))
      for iter36 in self.profissionais:
        iter36.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.atividadeTipo is not None:
      oprot.writeFieldBegin('atividadeTipo', TType.I64, 14)
      oprot.writeI64(self.atividadeTipo)
      oprot.writeFieldEnd()
    if self.temasParaReuniao is not None:
      oprot.writeFieldBegin('temasParaReuniao', TType.LIST, 15)
      oprot.writeListBegin(TType.I64, len(self.temasParaReuniao))
      for iter37 in self.temasParaReuniao:
        oprot.writeI64(iter37)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.publicoAlvo is not None:
      oprot.writeFieldBegin('publicoAlvo', TType.LIST, 16)
      oprot.writeListBegin(TType.I64, len(self.publicoAlvo))
      for iter38 in self.publicoAlvo:
        oprot.writeI64(iter38)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.participantes is not None:
      oprot.writeFieldBegin('participantes', TType.LIST, 18)
      oprot.writeListBegin(TType.STRUCT, len(self.participantes))
      for iter39 in self.participantes:
        iter39.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tbCdsOrigem is not None:
      oprot.writeFieldBegin('tbCdsOrigem', TType.I32, 19)
      oprot.writeI32(self.tbCdsOrigem)
      oprot.writeFieldEnd()
    if self.cnesLocalAtividade is not None:
      oprot.writeFieldBegin('cnesLocalAtividade', TType.STRING, 21)
      oprot.writeString(self.cnesLocalAtividade)
      oprot.writeFieldEnd()
    if self.procedimento is not None:
      oprot.writeFieldBegin('procedimento', TType.STRING, 22)
      oprot.writeString(self.procedimento)
      oprot.writeFieldEnd()
    if self.turno is not None:
      oprot.writeFieldBegin('turno', TType.I64, 23)
      oprot.writeI64(self.turno)
      oprot.writeFieldEnd()
    if self.headerTransport is not None:
      oprot.writeFieldBegin('headerTransport', TType.STRUCT, 24)
      self.headerTransport.write(oprot)
      oprot.writeFieldEnd()
    if self.temasParaSaude is not None:
      oprot.writeFieldBegin('temasParaSaude', TType.LIST, 25)
      oprot.writeListBegin(TType.I64, len(self.temasParaSaude))
      for iter40 in self.temasParaSaude:
        oprot.writeI64(iter40)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.praticasEmSaude is not None:
      oprot.writeFieldBegin('praticasEmSaude', TType.LIST, 26)
      oprot.writeListBegin(TType.I64, len(self.praticasEmSaude))
      for iter41 in self.praticasEmSaude:
        oprot.writeI64(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.pseEducacao is not None:
      oprot.writeFieldBegin('pseEducacao', TType.BOOL, 27)
      oprot.writeBool(self.pseEducacao)
      oprot.writeFieldEnd()
    if self.pseSaude is not None:
      oprot.writeFieldBegin('pseSaude', TType.BOOL, 28)
      oprot.writeBool(self.pseSaude)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.uuidFicha is None:
      raise TProtocol.TProtocolException(message='Required field uuidFicha is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uuidFicha)
    value = (value * 31) ^ hash(self.outraLocalidade)
    value = (value * 31) ^ hash(self.inep)
    value = (value * 31) ^ hash(self.numParticipantes)
    value = (value * 31) ^ hash(self.numAvaliacoesAlteradas)
    value = (value * 31) ^ hash(self.profissionais)
    value = (value * 31) ^ hash(self.atividadeTipo)
    value = (value * 31) ^ hash(self.temasParaReuniao)
    value = (value * 31) ^ hash(self.publicoAlvo)
    value = (value * 31) ^ hash(self.participantes)
    value = (value * 31) ^ hash(self.tbCdsOrigem)
    value = (value * 31) ^ hash(self.cnesLocalAtividade)
    value = (value * 31) ^ hash(self.procedimento)
    value = (value * 31) ^ hash(self.turno)
    value = (value * 31) ^ hash(self.headerTransport)
    value = (value * 31) ^ hash(self.temasParaSaude)
    value = (value * 31) ^ hash(self.praticasEmSaude)
    value = (value * 31) ^ hash(self.pseEducacao)
    value = (value * 31) ^ hash(self.pseSaude)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
