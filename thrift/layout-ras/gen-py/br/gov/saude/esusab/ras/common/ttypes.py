#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class LotacaoHeaderThrift:
  """
  Attributes:
   - profissionalCNS
   - cboCodigo_2002
   - cnes
   - ine
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'profissionalCNS', None, None, ), # 1
    (2, TType.STRING, 'cboCodigo_2002', None, None, ), # 2
    (3, TType.STRING, 'cnes', None, None, ), # 3
    (4, TType.STRING, 'ine', None, None, ), # 4
  )

  def __init__(self, profissionalCNS=None, cboCodigo_2002=None, cnes=None, ine=None,):
    self.profissionalCNS = profissionalCNS
    self.cboCodigo_2002 = cboCodigo_2002
    self.cnes = cnes
    self.ine = ine

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.profissionalCNS = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cboCodigo_2002 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cnes = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ine = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LotacaoHeaderThrift')
    if self.profissionalCNS is not None:
      oprot.writeFieldBegin('profissionalCNS', TType.STRING, 1)
      oprot.writeString(self.profissionalCNS)
      oprot.writeFieldEnd()
    if self.cboCodigo_2002 is not None:
      oprot.writeFieldBegin('cboCodigo_2002', TType.STRING, 2)
      oprot.writeString(self.cboCodigo_2002)
      oprot.writeFieldEnd()
    if self.cnes is not None:
      oprot.writeFieldBegin('cnes', TType.STRING, 3)
      oprot.writeString(self.cnes)
      oprot.writeFieldEnd()
    if self.ine is not None:
      oprot.writeFieldBegin('ine', TType.STRING, 4)
      oprot.writeString(self.ine)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.profissionalCNS)
    value = (value * 31) ^ hash(self.cboCodigo_2002)
    value = (value * 31) ^ hash(self.cnes)
    value = (value * 31) ^ hash(self.ine)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UnicaLotacaoHeaderThrift:
  """
  Attributes:
   - profissionalCNS
   - cboCodigo_2002
   - cnes
   - ine
   - dataAtendimento
   - codigoIbgeMunicipio
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'profissionalCNS', None, None, ), # 1
    (2, TType.STRING, 'cboCodigo_2002', None, None, ), # 2
    (3, TType.STRING, 'cnes', None, None, ), # 3
    (4, TType.STRING, 'ine', None, None, ), # 4
    (5, TType.I64, 'dataAtendimento', None, None, ), # 5
    (6, TType.STRING, 'codigoIbgeMunicipio', None, None, ), # 6
  )

  def __init__(self, profissionalCNS=None, cboCodigo_2002=None, cnes=None, ine=None, dataAtendimento=None, codigoIbgeMunicipio=None,):
    self.profissionalCNS = profissionalCNS
    self.cboCodigo_2002 = cboCodigo_2002
    self.cnes = cnes
    self.ine = ine
    self.dataAtendimento = dataAtendimento
    self.codigoIbgeMunicipio = codigoIbgeMunicipio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.profissionalCNS = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cboCodigo_2002 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cnes = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ine = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.dataAtendimento = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.codigoIbgeMunicipio = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UnicaLotacaoHeaderThrift')
    if self.profissionalCNS is not None:
      oprot.writeFieldBegin('profissionalCNS', TType.STRING, 1)
      oprot.writeString(self.profissionalCNS)
      oprot.writeFieldEnd()
    if self.cboCodigo_2002 is not None:
      oprot.writeFieldBegin('cboCodigo_2002', TType.STRING, 2)
      oprot.writeString(self.cboCodigo_2002)
      oprot.writeFieldEnd()
    if self.cnes is not None:
      oprot.writeFieldBegin('cnes', TType.STRING, 3)
      oprot.writeString(self.cnes)
      oprot.writeFieldEnd()
    if self.ine is not None:
      oprot.writeFieldBegin('ine', TType.STRING, 4)
      oprot.writeString(self.ine)
      oprot.writeFieldEnd()
    if self.dataAtendimento is not None:
      oprot.writeFieldBegin('dataAtendimento', TType.I64, 5)
      oprot.writeI64(self.dataAtendimento)
      oprot.writeFieldEnd()
    if self.codigoIbgeMunicipio is not None:
      oprot.writeFieldBegin('codigoIbgeMunicipio', TType.STRING, 6)
      oprot.writeString(self.codigoIbgeMunicipio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.profissionalCNS)
    value = (value * 31) ^ hash(self.cboCodigo_2002)
    value = (value * 31) ^ hash(self.cnes)
    value = (value * 31) ^ hash(self.ine)
    value = (value * 31) ^ hash(self.dataAtendimento)
    value = (value * 31) ^ hash(self.codigoIbgeMunicipio)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VariasLotacoesHeaderThrift:
  """
  Attributes:
   - lotacaoFormPrincipal
   - lotacaoFormAtendimentoCompartilhado
   - dataAtendimento
   - codigoIbgeMunicipio
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    (6, TType.STRUCT, 'lotacaoFormPrincipal', (LotacaoHeaderThrift, LotacaoHeaderThrift.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'lotacaoFormAtendimentoCompartilhado', (LotacaoHeaderThrift, LotacaoHeaderThrift.thrift_spec), None, ), # 7
    (8, TType.I64, 'dataAtendimento', None, None, ), # 8
    (9, TType.STRING, 'codigoIbgeMunicipio', None, None, ), # 9
  )

  def __init__(self, lotacaoFormPrincipal=None, lotacaoFormAtendimentoCompartilhado=None, dataAtendimento=None, codigoIbgeMunicipio=None,):
    self.lotacaoFormPrincipal = lotacaoFormPrincipal
    self.lotacaoFormAtendimentoCompartilhado = lotacaoFormAtendimentoCompartilhado
    self.dataAtendimento = dataAtendimento
    self.codigoIbgeMunicipio = codigoIbgeMunicipio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 6:
        if ftype == TType.STRUCT:
          self.lotacaoFormPrincipal = LotacaoHeaderThrift()
          self.lotacaoFormPrincipal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.lotacaoFormAtendimentoCompartilhado = LotacaoHeaderThrift()
          self.lotacaoFormAtendimentoCompartilhado.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.dataAtendimento = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.codigoIbgeMunicipio = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VariasLotacoesHeaderThrift')
    if self.lotacaoFormPrincipal is not None:
      oprot.writeFieldBegin('lotacaoFormPrincipal', TType.STRUCT, 6)
      self.lotacaoFormPrincipal.write(oprot)
      oprot.writeFieldEnd()
    if self.lotacaoFormAtendimentoCompartilhado is not None:
      oprot.writeFieldBegin('lotacaoFormAtendimentoCompartilhado', TType.STRUCT, 7)
      self.lotacaoFormAtendimentoCompartilhado.write(oprot)
      oprot.writeFieldEnd()
    if self.dataAtendimento is not None:
      oprot.writeFieldBegin('dataAtendimento', TType.I64, 8)
      oprot.writeI64(self.dataAtendimento)
      oprot.writeFieldEnd()
    if self.codigoIbgeMunicipio is not None:
      oprot.writeFieldBegin('codigoIbgeMunicipio', TType.STRING, 9)
      oprot.writeString(self.codigoIbgeMunicipio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.lotacaoFormPrincipal)
    value = (value * 31) ^ hash(self.lotacaoFormAtendimentoCompartilhado)
    value = (value * 31) ^ hash(self.dataAtendimento)
    value = (value * 31) ^ hash(self.codigoIbgeMunicipio)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EnderecoLocalPermanenciaThrift:
  """
  Attributes:
   - bairro
   - cep
   - codigoIbgeMunicipio
   - complemento
   - nomeLogradouro
   - numero
   - numeroDneUf
   - telefoneContato
   - telefoneResidencia
   - tipoLogradouroNumeroDne
   - stSemNumero
   - pontoReferencia
   - microArea
   - stForaArea
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'bairro', None, None, ), # 1
    (2, TType.STRING, 'cep', None, None, ), # 2
    (3, TType.STRING, 'codigoIbgeMunicipio', None, None, ), # 3
    (4, TType.STRING, 'complemento', None, None, ), # 4
    (5, TType.STRING, 'nomeLogradouro', None, None, ), # 5
    (6, TType.STRING, 'numero', None, None, ), # 6
    (7, TType.STRING, 'numeroDneUf', None, None, ), # 7
    (8, TType.STRING, 'telefoneContato', None, None, ), # 8
    (9, TType.STRING, 'telefoneResidencia', None, None, ), # 9
    (10, TType.STRING, 'tipoLogradouroNumeroDne', None, None, ), # 10
    (11, TType.BOOL, 'stSemNumero', None, None, ), # 11
    (12, TType.STRING, 'pontoReferencia', None, None, ), # 12
    (13, TType.STRING, 'microArea', None, None, ), # 13
    (14, TType.BOOL, 'stForaArea', None, None, ), # 14
  )

  def __init__(self, bairro=None, cep=None, codigoIbgeMunicipio=None, complemento=None, nomeLogradouro=None, numero=None, numeroDneUf=None, telefoneContato=None, telefoneResidencia=None, tipoLogradouroNumeroDne=None, stSemNumero=None, pontoReferencia=None, microArea=None, stForaArea=None,):
    self.bairro = bairro
    self.cep = cep
    self.codigoIbgeMunicipio = codigoIbgeMunicipio
    self.complemento = complemento
    self.nomeLogradouro = nomeLogradouro
    self.numero = numero
    self.numeroDneUf = numeroDneUf
    self.telefoneContato = telefoneContato
    self.telefoneResidencia = telefoneResidencia
    self.tipoLogradouroNumeroDne = tipoLogradouroNumeroDne
    self.stSemNumero = stSemNumero
    self.pontoReferencia = pontoReferencia
    self.microArea = microArea
    self.stForaArea = stForaArea

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.bairro = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cep = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.codigoIbgeMunicipio = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.complemento = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.nomeLogradouro = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.numero = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.numeroDneUf = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.telefoneContato = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.telefoneResidencia = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.tipoLogradouroNumeroDne = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.stSemNumero = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.pontoReferencia = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.microArea = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BOOL:
          self.stForaArea = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EnderecoLocalPermanenciaThrift')
    if self.bairro is not None:
      oprot.writeFieldBegin('bairro', TType.STRING, 1)
      oprot.writeString(self.bairro)
      oprot.writeFieldEnd()
    if self.cep is not None:
      oprot.writeFieldBegin('cep', TType.STRING, 2)
      oprot.writeString(self.cep)
      oprot.writeFieldEnd()
    if self.codigoIbgeMunicipio is not None:
      oprot.writeFieldBegin('codigoIbgeMunicipio', TType.STRING, 3)
      oprot.writeString(self.codigoIbgeMunicipio)
      oprot.writeFieldEnd()
    if self.complemento is not None:
      oprot.writeFieldBegin('complemento', TType.STRING, 4)
      oprot.writeString(self.complemento)
      oprot.writeFieldEnd()
    if self.nomeLogradouro is not None:
      oprot.writeFieldBegin('nomeLogradouro', TType.STRING, 5)
      oprot.writeString(self.nomeLogradouro)
      oprot.writeFieldEnd()
    if self.numero is not None:
      oprot.writeFieldBegin('numero', TType.STRING, 6)
      oprot.writeString(self.numero)
      oprot.writeFieldEnd()
    if self.numeroDneUf is not None:
      oprot.writeFieldBegin('numeroDneUf', TType.STRING, 7)
      oprot.writeString(self.numeroDneUf)
      oprot.writeFieldEnd()
    if self.telefoneContato is not None:
      oprot.writeFieldBegin('telefoneContato', TType.STRING, 8)
      oprot.writeString(self.telefoneContato)
      oprot.writeFieldEnd()
    if self.telefoneResidencia is not None:
      oprot.writeFieldBegin('telefoneResidencia', TType.STRING, 9)
      oprot.writeString(self.telefoneResidencia)
      oprot.writeFieldEnd()
    if self.tipoLogradouroNumeroDne is not None:
      oprot.writeFieldBegin('tipoLogradouroNumeroDne', TType.STRING, 10)
      oprot.writeString(self.tipoLogradouroNumeroDne)
      oprot.writeFieldEnd()
    if self.stSemNumero is not None:
      oprot.writeFieldBegin('stSemNumero', TType.BOOL, 11)
      oprot.writeBool(self.stSemNumero)
      oprot.writeFieldEnd()
    if self.pontoReferencia is not None:
      oprot.writeFieldBegin('pontoReferencia', TType.STRING, 12)
      oprot.writeString(self.pontoReferencia)
      oprot.writeFieldEnd()
    if self.microArea is not None:
      oprot.writeFieldBegin('microArea', TType.STRING, 13)
      oprot.writeString(self.microArea)
      oprot.writeFieldEnd()
    if self.stForaArea is not None:
      oprot.writeFieldBegin('stForaArea', TType.BOOL, 14)
      oprot.writeBool(self.stForaArea)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bairro)
    value = (value * 31) ^ hash(self.cep)
    value = (value * 31) ^ hash(self.codigoIbgeMunicipio)
    value = (value * 31) ^ hash(self.complemento)
    value = (value * 31) ^ hash(self.nomeLogradouro)
    value = (value * 31) ^ hash(self.numero)
    value = (value * 31) ^ hash(self.numeroDneUf)
    value = (value * 31) ^ hash(self.telefoneContato)
    value = (value * 31) ^ hash(self.telefoneResidencia)
    value = (value * 31) ^ hash(self.tipoLogradouroNumeroDne)
    value = (value * 31) ^ hash(self.stSemNumero)
    value = (value * 31) ^ hash(self.pontoReferencia)
    value = (value * 31) ^ hash(self.microArea)
    value = (value * 31) ^ hash(self.stForaArea)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
