#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import br.gov.saude.esusab.ras.common.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class InstituicaoPermanenciaThrift:
  """
  Attributes:
   - nomeInstituicaoPermanencia
   - stOutrosProfissionaisVinculados
   - nomeResponsavelTecnico
   - cnsResponsavelTecnico
   - cargoInstituicao
   - telefoneResponsavelTecnico
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nomeInstituicaoPermanencia', None, None, ), # 1
    (2, TType.BOOL, 'stOutrosProfissionaisVinculados', None, None, ), # 2
    (3, TType.STRING, 'nomeResponsavelTecnico', None, None, ), # 3
    (4, TType.STRING, 'cnsResponsavelTecnico', None, None, ), # 4
    (5, TType.STRING, 'cargoInstituicao', None, None, ), # 5
    (6, TType.STRING, 'telefoneResponsavelTecnico', None, None, ), # 6
  )

  def __init__(self, nomeInstituicaoPermanencia=None, stOutrosProfissionaisVinculados=None, nomeResponsavelTecnico=None, cnsResponsavelTecnico=None, cargoInstituicao=None, telefoneResponsavelTecnico=None,):
    self.nomeInstituicaoPermanencia = nomeInstituicaoPermanencia
    self.stOutrosProfissionaisVinculados = stOutrosProfissionaisVinculados
    self.nomeResponsavelTecnico = nomeResponsavelTecnico
    self.cnsResponsavelTecnico = cnsResponsavelTecnico
    self.cargoInstituicao = cargoInstituicao
    self.telefoneResponsavelTecnico = telefoneResponsavelTecnico

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nomeInstituicaoPermanencia = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.stOutrosProfissionaisVinculados = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.nomeResponsavelTecnico = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.cnsResponsavelTecnico = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.cargoInstituicao = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.telefoneResponsavelTecnico = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InstituicaoPermanenciaThrift')
    if self.nomeInstituicaoPermanencia is not None:
      oprot.writeFieldBegin('nomeInstituicaoPermanencia', TType.STRING, 1)
      oprot.writeString(self.nomeInstituicaoPermanencia)
      oprot.writeFieldEnd()
    if self.stOutrosProfissionaisVinculados is not None:
      oprot.writeFieldBegin('stOutrosProfissionaisVinculados', TType.BOOL, 2)
      oprot.writeBool(self.stOutrosProfissionaisVinculados)
      oprot.writeFieldEnd()
    if self.nomeResponsavelTecnico is not None:
      oprot.writeFieldBegin('nomeResponsavelTecnico', TType.STRING, 3)
      oprot.writeString(self.nomeResponsavelTecnico)
      oprot.writeFieldEnd()
    if self.cnsResponsavelTecnico is not None:
      oprot.writeFieldBegin('cnsResponsavelTecnico', TType.STRING, 4)
      oprot.writeString(self.cnsResponsavelTecnico)
      oprot.writeFieldEnd()
    if self.cargoInstituicao is not None:
      oprot.writeFieldBegin('cargoInstituicao', TType.STRING, 5)
      oprot.writeString(self.cargoInstituicao)
      oprot.writeFieldEnd()
    if self.telefoneResponsavelTecnico is not None:
      oprot.writeFieldBegin('telefoneResponsavelTecnico', TType.STRING, 6)
      oprot.writeString(self.telefoneResponsavelTecnico)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nomeInstituicaoPermanencia)
    value = (value * 31) ^ hash(self.stOutrosProfissionaisVinculados)
    value = (value * 31) ^ hash(self.nomeResponsavelTecnico)
    value = (value * 31) ^ hash(self.cnsResponsavelTecnico)
    value = (value * 31) ^ hash(self.cargoInstituicao)
    value = (value * 31) ^ hash(self.telefoneResponsavelTecnico)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CondicaoMoradiaThrift:
  """
  Attributes:
   - abastecimentoAgua
   - areaProducaoRural
   - destinoLixo
   - formaEscoamentoBanheiro
   - localizacao
   - materialPredominanteParedesExtDomicilio
   - nuComodos
   - nuMoradores
   - situacaoMoradiaPosseTerra
   - stDisponibilidadeEnergiaEletrica
   - tipoAcessoDomicilio
   - tipoDomicilio
   - aguaConsumoDomicilio
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'abastecimentoAgua', None, None, ), # 1
    (2, TType.I64, 'areaProducaoRural', None, None, ), # 2
    (3, TType.I64, 'destinoLixo', None, None, ), # 3
    (4, TType.I64, 'formaEscoamentoBanheiro', None, None, ), # 4
    (5, TType.I64, 'localizacao', None, None, ), # 5
    (6, TType.I64, 'materialPredominanteParedesExtDomicilio', None, None, ), # 6
    (7, TType.STRING, 'nuComodos', None, None, ), # 7
    (8, TType.STRING, 'nuMoradores', None, None, ), # 8
    (9, TType.I64, 'situacaoMoradiaPosseTerra', None, None, ), # 9
    (10, TType.BOOL, 'stDisponibilidadeEnergiaEletrica', None, None, ), # 10
    (11, TType.I64, 'tipoAcessoDomicilio', None, None, ), # 11
    (12, TType.I64, 'tipoDomicilio', None, None, ), # 12
    (13, TType.I64, 'aguaConsumoDomicilio', None, None, ), # 13
  )

  def __init__(self, abastecimentoAgua=None, areaProducaoRural=None, destinoLixo=None, formaEscoamentoBanheiro=None, localizacao=None, materialPredominanteParedesExtDomicilio=None, nuComodos=None, nuMoradores=None, situacaoMoradiaPosseTerra=None, stDisponibilidadeEnergiaEletrica=None, tipoAcessoDomicilio=None, tipoDomicilio=None, aguaConsumoDomicilio=None,):
    self.abastecimentoAgua = abastecimentoAgua
    self.areaProducaoRural = areaProducaoRural
    self.destinoLixo = destinoLixo
    self.formaEscoamentoBanheiro = formaEscoamentoBanheiro
    self.localizacao = localizacao
    self.materialPredominanteParedesExtDomicilio = materialPredominanteParedesExtDomicilio
    self.nuComodos = nuComodos
    self.nuMoradores = nuMoradores
    self.situacaoMoradiaPosseTerra = situacaoMoradiaPosseTerra
    self.stDisponibilidadeEnergiaEletrica = stDisponibilidadeEnergiaEletrica
    self.tipoAcessoDomicilio = tipoAcessoDomicilio
    self.tipoDomicilio = tipoDomicilio
    self.aguaConsumoDomicilio = aguaConsumoDomicilio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.abastecimentoAgua = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.areaProducaoRural = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.destinoLixo = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.formaEscoamentoBanheiro = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.localizacao = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.materialPredominanteParedesExtDomicilio = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.nuComodos = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.nuMoradores = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.situacaoMoradiaPosseTerra = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.stDisponibilidadeEnergiaEletrica = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.tipoAcessoDomicilio = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.tipoDomicilio = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.aguaConsumoDomicilio = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CondicaoMoradiaThrift')
    if self.abastecimentoAgua is not None:
      oprot.writeFieldBegin('abastecimentoAgua', TType.I64, 1)
      oprot.writeI64(self.abastecimentoAgua)
      oprot.writeFieldEnd()
    if self.areaProducaoRural is not None:
      oprot.writeFieldBegin('areaProducaoRural', TType.I64, 2)
      oprot.writeI64(self.areaProducaoRural)
      oprot.writeFieldEnd()
    if self.destinoLixo is not None:
      oprot.writeFieldBegin('destinoLixo', TType.I64, 3)
      oprot.writeI64(self.destinoLixo)
      oprot.writeFieldEnd()
    if self.formaEscoamentoBanheiro is not None:
      oprot.writeFieldBegin('formaEscoamentoBanheiro', TType.I64, 4)
      oprot.writeI64(self.formaEscoamentoBanheiro)
      oprot.writeFieldEnd()
    if self.localizacao is not None:
      oprot.writeFieldBegin('localizacao', TType.I64, 5)
      oprot.writeI64(self.localizacao)
      oprot.writeFieldEnd()
    if self.materialPredominanteParedesExtDomicilio is not None:
      oprot.writeFieldBegin('materialPredominanteParedesExtDomicilio', TType.I64, 6)
      oprot.writeI64(self.materialPredominanteParedesExtDomicilio)
      oprot.writeFieldEnd()
    if self.nuComodos is not None:
      oprot.writeFieldBegin('nuComodos', TType.STRING, 7)
      oprot.writeString(self.nuComodos)
      oprot.writeFieldEnd()
    if self.nuMoradores is not None:
      oprot.writeFieldBegin('nuMoradores', TType.STRING, 8)
      oprot.writeString(self.nuMoradores)
      oprot.writeFieldEnd()
    if self.situacaoMoradiaPosseTerra is not None:
      oprot.writeFieldBegin('situacaoMoradiaPosseTerra', TType.I64, 9)
      oprot.writeI64(self.situacaoMoradiaPosseTerra)
      oprot.writeFieldEnd()
    if self.stDisponibilidadeEnergiaEletrica is not None:
      oprot.writeFieldBegin('stDisponibilidadeEnergiaEletrica', TType.BOOL, 10)
      oprot.writeBool(self.stDisponibilidadeEnergiaEletrica)
      oprot.writeFieldEnd()
    if self.tipoAcessoDomicilio is not None:
      oprot.writeFieldBegin('tipoAcessoDomicilio', TType.I64, 11)
      oprot.writeI64(self.tipoAcessoDomicilio)
      oprot.writeFieldEnd()
    if self.tipoDomicilio is not None:
      oprot.writeFieldBegin('tipoDomicilio', TType.I64, 12)
      oprot.writeI64(self.tipoDomicilio)
      oprot.writeFieldEnd()
    if self.aguaConsumoDomicilio is not None:
      oprot.writeFieldBegin('aguaConsumoDomicilio', TType.I64, 13)
      oprot.writeI64(self.aguaConsumoDomicilio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.abastecimentoAgua)
    value = (value * 31) ^ hash(self.areaProducaoRural)
    value = (value * 31) ^ hash(self.destinoLixo)
    value = (value * 31) ^ hash(self.formaEscoamentoBanheiro)
    value = (value * 31) ^ hash(self.localizacao)
    value = (value * 31) ^ hash(self.materialPredominanteParedesExtDomicilio)
    value = (value * 31) ^ hash(self.nuComodos)
    value = (value * 31) ^ hash(self.nuMoradores)
    value = (value * 31) ^ hash(self.situacaoMoradiaPosseTerra)
    value = (value * 31) ^ hash(self.stDisponibilidadeEnergiaEletrica)
    value = (value * 31) ^ hash(self.tipoAcessoDomicilio)
    value = (value * 31) ^ hash(self.tipoDomicilio)
    value = (value * 31) ^ hash(self.aguaConsumoDomicilio)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FamiliaRowThrift:
  """
  Attributes:
   - dataNascimentoResponsavel
   - numeroCnsResponsavel
   - numeroMembrosFamilia
   - numeroProntuario
   - rendaFamiliar
   - resideDesde
   - stMudanca
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dataNascimentoResponsavel', None, None, ), # 1
    (2, TType.STRING, 'numeroCnsResponsavel', None, None, ), # 2
    (3, TType.I32, 'numeroMembrosFamilia', None, None, ), # 3
    (4, TType.STRING, 'numeroProntuario', None, None, ), # 4
    (5, TType.I64, 'rendaFamiliar', None, None, ), # 5
    (6, TType.I64, 'resideDesde', None, None, ), # 6
    (7, TType.BOOL, 'stMudanca', None, None, ), # 7
  )

  def __init__(self, dataNascimentoResponsavel=None, numeroCnsResponsavel=None, numeroMembrosFamilia=None, numeroProntuario=None, rendaFamiliar=None, resideDesde=None, stMudanca=None,):
    self.dataNascimentoResponsavel = dataNascimentoResponsavel
    self.numeroCnsResponsavel = numeroCnsResponsavel
    self.numeroMembrosFamilia = numeroMembrosFamilia
    self.numeroProntuario = numeroProntuario
    self.rendaFamiliar = rendaFamiliar
    self.resideDesde = resideDesde
    self.stMudanca = stMudanca

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dataNascimentoResponsavel = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.numeroCnsResponsavel = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.numeroMembrosFamilia = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.numeroProntuario = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.rendaFamiliar = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.resideDesde = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.stMudanca = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FamiliaRowThrift')
    if self.dataNascimentoResponsavel is not None:
      oprot.writeFieldBegin('dataNascimentoResponsavel', TType.I64, 1)
      oprot.writeI64(self.dataNascimentoResponsavel)
      oprot.writeFieldEnd()
    if self.numeroCnsResponsavel is not None:
      oprot.writeFieldBegin('numeroCnsResponsavel', TType.STRING, 2)
      oprot.writeString(self.numeroCnsResponsavel)
      oprot.writeFieldEnd()
    if self.numeroMembrosFamilia is not None:
      oprot.writeFieldBegin('numeroMembrosFamilia', TType.I32, 3)
      oprot.writeI32(self.numeroMembrosFamilia)
      oprot.writeFieldEnd()
    if self.numeroProntuario is not None:
      oprot.writeFieldBegin('numeroProntuario', TType.STRING, 4)
      oprot.writeString(self.numeroProntuario)
      oprot.writeFieldEnd()
    if self.rendaFamiliar is not None:
      oprot.writeFieldBegin('rendaFamiliar', TType.I64, 5)
      oprot.writeI64(self.rendaFamiliar)
      oprot.writeFieldEnd()
    if self.resideDesde is not None:
      oprot.writeFieldBegin('resideDesde', TType.I64, 6)
      oprot.writeI64(self.resideDesde)
      oprot.writeFieldEnd()
    if self.stMudanca is not None:
      oprot.writeFieldBegin('stMudanca', TType.BOOL, 7)
      oprot.writeBool(self.stMudanca)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dataNascimentoResponsavel)
    value = (value * 31) ^ hash(self.numeroCnsResponsavel)
    value = (value * 31) ^ hash(self.numeroMembrosFamilia)
    value = (value * 31) ^ hash(self.numeroProntuario)
    value = (value * 31) ^ hash(self.rendaFamiliar)
    value = (value * 31) ^ hash(self.resideDesde)
    value = (value * 31) ^ hash(self.stMudanca)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CadastroDomiciliarThrift:
  """
  Attributes:
   - animaisNoDomicilio
   - condicaoMoradia
   - enderecoLocalPermanencia
   - familias
   - fichaAtualizada
   - quantosAnimaisNoDomicilio
   - stAnimaisNoDomicilio
   - statusTermoRecusa
   - tpCdsOrigem
   - uuid
   - uuidFichaOriginadora
   - tipoDeImovel
   - instituicaoPermanencia
   - headerTransport
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'animaisNoDomicilio', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'condicaoMoradia', (CondicaoMoradiaThrift, CondicaoMoradiaThrift.thrift_spec), None, ), # 2
    None, # 3
    (4, TType.STRUCT, 'enderecoLocalPermanencia', (br.gov.saude.esusab.ras.common.ttypes.EnderecoLocalPermanenciaThrift, br.gov.saude.esusab.ras.common.ttypes.EnderecoLocalPermanenciaThrift.thrift_spec), None, ), # 4
    (5, TType.LIST, 'familias', (TType.STRUCT,(FamiliaRowThrift, FamiliaRowThrift.thrift_spec)), None, ), # 5
    (6, TType.BOOL, 'fichaAtualizada', None, None, ), # 6
    (7, TType.STRING, 'quantosAnimaisNoDomicilio', None, None, ), # 7
    (8, TType.BOOL, 'stAnimaisNoDomicilio', None, None, ), # 8
    (9, TType.BOOL, 'statusTermoRecusa', None, None, ), # 9
    (10, TType.I32, 'tpCdsOrigem', None, None, ), # 10
    (11, TType.STRING, 'uuid', None, None, ), # 11
    (12, TType.STRING, 'uuidFichaOriginadora', None, None, ), # 12
    (13, TType.I64, 'tipoDeImovel', None, None, ), # 13
    (14, TType.STRUCT, 'instituicaoPermanencia', (InstituicaoPermanenciaThrift, InstituicaoPermanenciaThrift.thrift_spec), None, ), # 14
    (15, TType.STRUCT, 'headerTransport', (br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift, br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift.thrift_spec), None, ), # 15
  )

  def __init__(self, animaisNoDomicilio=None, condicaoMoradia=None, enderecoLocalPermanencia=None, familias=None, fichaAtualizada=None, quantosAnimaisNoDomicilio=None, stAnimaisNoDomicilio=None, statusTermoRecusa=None, tpCdsOrigem=None, uuid=None, uuidFichaOriginadora=None, tipoDeImovel=None, instituicaoPermanencia=None, headerTransport=None,):
    self.animaisNoDomicilio = animaisNoDomicilio
    self.condicaoMoradia = condicaoMoradia
    self.enderecoLocalPermanencia = enderecoLocalPermanencia
    self.familias = familias
    self.fichaAtualizada = fichaAtualizada
    self.quantosAnimaisNoDomicilio = quantosAnimaisNoDomicilio
    self.stAnimaisNoDomicilio = stAnimaisNoDomicilio
    self.statusTermoRecusa = statusTermoRecusa
    self.tpCdsOrigem = tpCdsOrigem
    self.uuid = uuid
    self.uuidFichaOriginadora = uuidFichaOriginadora
    self.tipoDeImovel = tipoDeImovel
    self.instituicaoPermanencia = instituicaoPermanencia
    self.headerTransport = headerTransport

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.animaisNoDomicilio = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.animaisNoDomicilio.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.condicaoMoradia = CondicaoMoradiaThrift()
          self.condicaoMoradia.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.enderecoLocalPermanencia = br.gov.saude.esusab.ras.common.ttypes.EnderecoLocalPermanenciaThrift()
          self.enderecoLocalPermanencia.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.familias = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = FamiliaRowThrift()
            _elem11.read(iprot)
            self.familias.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.fichaAtualizada = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.quantosAnimaisNoDomicilio = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.stAnimaisNoDomicilio = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.statusTermoRecusa = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.tpCdsOrigem = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.uuidFichaOriginadora = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.tipoDeImovel = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.instituicaoPermanencia = InstituicaoPermanenciaThrift()
          self.instituicaoPermanencia.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.headerTransport = br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift()
          self.headerTransport.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CadastroDomiciliarThrift')
    if self.animaisNoDomicilio is not None:
      oprot.writeFieldBegin('animaisNoDomicilio', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.animaisNoDomicilio))
      for iter12 in self.animaisNoDomicilio:
        oprot.writeI64(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.condicaoMoradia is not None:
      oprot.writeFieldBegin('condicaoMoradia', TType.STRUCT, 2)
      self.condicaoMoradia.write(oprot)
      oprot.writeFieldEnd()
    if self.enderecoLocalPermanencia is not None:
      oprot.writeFieldBegin('enderecoLocalPermanencia', TType.STRUCT, 4)
      self.enderecoLocalPermanencia.write(oprot)
      oprot.writeFieldEnd()
    if self.familias is not None:
      oprot.writeFieldBegin('familias', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.familias))
      for iter13 in self.familias:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.fichaAtualizada is not None:
      oprot.writeFieldBegin('fichaAtualizada', TType.BOOL, 6)
      oprot.writeBool(self.fichaAtualizada)
      oprot.writeFieldEnd()
    if self.quantosAnimaisNoDomicilio is not None:
      oprot.writeFieldBegin('quantosAnimaisNoDomicilio', TType.STRING, 7)
      oprot.writeString(self.quantosAnimaisNoDomicilio)
      oprot.writeFieldEnd()
    if self.stAnimaisNoDomicilio is not None:
      oprot.writeFieldBegin('stAnimaisNoDomicilio', TType.BOOL, 8)
      oprot.writeBool(self.stAnimaisNoDomicilio)
      oprot.writeFieldEnd()
    if self.statusTermoRecusa is not None:
      oprot.writeFieldBegin('statusTermoRecusa', TType.BOOL, 9)
      oprot.writeBool(self.statusTermoRecusa)
      oprot.writeFieldEnd()
    if self.tpCdsOrigem is not None:
      oprot.writeFieldBegin('tpCdsOrigem', TType.I32, 10)
      oprot.writeI32(self.tpCdsOrigem)
      oprot.writeFieldEnd()
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 11)
      oprot.writeString(self.uuid)
      oprot.writeFieldEnd()
    if self.uuidFichaOriginadora is not None:
      oprot.writeFieldBegin('uuidFichaOriginadora', TType.STRING, 12)
      oprot.writeString(self.uuidFichaOriginadora)
      oprot.writeFieldEnd()
    if self.tipoDeImovel is not None:
      oprot.writeFieldBegin('tipoDeImovel', TType.I64, 13)
      oprot.writeI64(self.tipoDeImovel)
      oprot.writeFieldEnd()
    if self.instituicaoPermanencia is not None:
      oprot.writeFieldBegin('instituicaoPermanencia', TType.STRUCT, 14)
      self.instituicaoPermanencia.write(oprot)
      oprot.writeFieldEnd()
    if self.headerTransport is not None:
      oprot.writeFieldBegin('headerTransport', TType.STRUCT, 15)
      self.headerTransport.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.uuid is None:
      raise TProtocol.TProtocolException(message='Required field uuid is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.animaisNoDomicilio)
    value = (value * 31) ^ hash(self.condicaoMoradia)
    value = (value * 31) ^ hash(self.enderecoLocalPermanencia)
    value = (value * 31) ^ hash(self.familias)
    value = (value * 31) ^ hash(self.fichaAtualizada)
    value = (value * 31) ^ hash(self.quantosAnimaisNoDomicilio)
    value = (value * 31) ^ hash(self.stAnimaisNoDomicilio)
    value = (value * 31) ^ hash(self.statusTermoRecusa)
    value = (value * 31) ^ hash(self.tpCdsOrigem)
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.uuidFichaOriginadora)
    value = (value * 31) ^ hash(self.tipoDeImovel)
    value = (value * 31) ^ hash(self.instituicaoPermanencia)
    value = (value * 31) ^ hash(self.headerTransport)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
