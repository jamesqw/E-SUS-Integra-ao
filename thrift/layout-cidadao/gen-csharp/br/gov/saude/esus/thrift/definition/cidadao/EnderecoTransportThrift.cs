/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esus.thrift.definition.cidadao
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class EnderecoTransportThrift : TBase
  {
    private string _bairroNome;
    private string _bairroDne;
    private string _localidadeCep;
    private string _localidadeDne;
    private string _localidadeIbge;
    private string _complemento;
    private string _logradouro;
    private string _logradouroDne;
    private string _numero;
    private string _pontoReferencia;
    private bool _semNumero;
    private string _ufSigla;
    private string _area;
    private string _microArea;

    public string BairroNome
    {
      get
      {
        return _bairroNome;
      }
      set
      {
        __isset.bairroNome = true;
        this._bairroNome = value;
      }
    }

    public string BairroDne
    {
      get
      {
        return _bairroDne;
      }
      set
      {
        __isset.bairroDne = true;
        this._bairroDne = value;
      }
    }

    public string LocalidadeCep
    {
      get
      {
        return _localidadeCep;
      }
      set
      {
        __isset.localidadeCep = true;
        this._localidadeCep = value;
      }
    }

    public string LocalidadeDne
    {
      get
      {
        return _localidadeDne;
      }
      set
      {
        __isset.localidadeDne = true;
        this._localidadeDne = value;
      }
    }

    public string LocalidadeIbge
    {
      get
      {
        return _localidadeIbge;
      }
      set
      {
        __isset.localidadeIbge = true;
        this._localidadeIbge = value;
      }
    }

    public string Complemento
    {
      get
      {
        return _complemento;
      }
      set
      {
        __isset.complemento = true;
        this._complemento = value;
      }
    }

    public string Logradouro
    {
      get
      {
        return _logradouro;
      }
      set
      {
        __isset.logradouro = true;
        this._logradouro = value;
      }
    }

    public string LogradouroDne
    {
      get
      {
        return _logradouroDne;
      }
      set
      {
        __isset.logradouroDne = true;
        this._logradouroDne = value;
      }
    }

    public string Numero
    {
      get
      {
        return _numero;
      }
      set
      {
        __isset.numero = true;
        this._numero = value;
      }
    }

    public string PontoReferencia
    {
      get
      {
        return _pontoReferencia;
      }
      set
      {
        __isset.pontoReferencia = true;
        this._pontoReferencia = value;
      }
    }

    public bool SemNumero
    {
      get
      {
        return _semNumero;
      }
      set
      {
        __isset.semNumero = true;
        this._semNumero = value;
      }
    }

    public string UfSigla
    {
      get
      {
        return _ufSigla;
      }
      set
      {
        __isset.ufSigla = true;
        this._ufSigla = value;
      }
    }

    public string Area
    {
      get
      {
        return _area;
      }
      set
      {
        __isset.area = true;
        this._area = value;
      }
    }

    public string MicroArea
    {
      get
      {
        return _microArea;
      }
      set
      {
        __isset.microArea = true;
        this._microArea = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool bairroNome;
      public bool bairroDne;
      public bool localidadeCep;
      public bool localidadeDne;
      public bool localidadeIbge;
      public bool complemento;
      public bool logradouro;
      public bool logradouroDne;
      public bool numero;
      public bool pontoReferencia;
      public bool semNumero;
      public bool ufSigla;
      public bool area;
      public bool microArea;
    }

    public EnderecoTransportThrift() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              BairroNome = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              BairroDne = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              LocalidadeCep = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              LocalidadeDne = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              LocalidadeIbge = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Complemento = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Logradouro = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              LogradouroDne = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Numero = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              PontoReferencia = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              SemNumero = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              UfSigla = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              Area = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              MicroArea = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("EnderecoTransportThrift");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (BairroNome != null && __isset.bairroNome) {
        field.Name = "bairroNome";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BairroNome);
        oprot.WriteFieldEnd();
      }
      if (BairroDne != null && __isset.bairroDne) {
        field.Name = "bairroDne";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BairroDne);
        oprot.WriteFieldEnd();
      }
      if (LocalidadeCep != null && __isset.localidadeCep) {
        field.Name = "localidadeCep";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LocalidadeCep);
        oprot.WriteFieldEnd();
      }
      if (LocalidadeDne != null && __isset.localidadeDne) {
        field.Name = "localidadeDne";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LocalidadeDne);
        oprot.WriteFieldEnd();
      }
      if (LocalidadeIbge != null && __isset.localidadeIbge) {
        field.Name = "localidadeIbge";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LocalidadeIbge);
        oprot.WriteFieldEnd();
      }
      if (Complemento != null && __isset.complemento) {
        field.Name = "complemento";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Complemento);
        oprot.WriteFieldEnd();
      }
      if (Logradouro != null && __isset.logradouro) {
        field.Name = "logradouro";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Logradouro);
        oprot.WriteFieldEnd();
      }
      if (LogradouroDne != null && __isset.logradouroDne) {
        field.Name = "logradouroDne";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LogradouroDne);
        oprot.WriteFieldEnd();
      }
      if (Numero != null && __isset.numero) {
        field.Name = "numero";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Numero);
        oprot.WriteFieldEnd();
      }
      if (PontoReferencia != null && __isset.pontoReferencia) {
        field.Name = "pontoReferencia";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PontoReferencia);
        oprot.WriteFieldEnd();
      }
      if (__isset.semNumero) {
        field.Name = "semNumero";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(SemNumero);
        oprot.WriteFieldEnd();
      }
      if (UfSigla != null && __isset.ufSigla) {
        field.Name = "ufSigla";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UfSigla);
        oprot.WriteFieldEnd();
      }
      if (Area != null && __isset.area) {
        field.Name = "area";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Area);
        oprot.WriteFieldEnd();
      }
      if (MicroArea != null && __isset.microArea) {
        field.Name = "microArea";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MicroArea);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("EnderecoTransportThrift(");
      sb.Append("BairroNome: ");
      sb.Append(BairroNome);
      sb.Append(",BairroDne: ");
      sb.Append(BairroDne);
      sb.Append(",LocalidadeCep: ");
      sb.Append(LocalidadeCep);
      sb.Append(",LocalidadeDne: ");
      sb.Append(LocalidadeDne);
      sb.Append(",LocalidadeIbge: ");
      sb.Append(LocalidadeIbge);
      sb.Append(",Complemento: ");
      sb.Append(Complemento);
      sb.Append(",Logradouro: ");
      sb.Append(Logradouro);
      sb.Append(",LogradouroDne: ");
      sb.Append(LogradouroDne);
      sb.Append(",Numero: ");
      sb.Append(Numero);
      sb.Append(",PontoReferencia: ");
      sb.Append(PontoReferencia);
      sb.Append(",SemNumero: ");
      sb.Append(SemNumero);
      sb.Append(",UfSigla: ");
      sb.Append(UfSigla);
      sb.Append(",Area: ");
      sb.Append(Area);
      sb.Append(",MicroArea: ");
      sb.Append(MicroArea);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
