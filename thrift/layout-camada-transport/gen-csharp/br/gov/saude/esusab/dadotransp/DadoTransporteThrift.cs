/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esusab.dadotransp
{

  /// <summary>
  /// Objeto que encapsula uma ficha serializada com TBinaryProtocol e alguns de seus dados de identificação
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DadoTransporteThrift : TBase
  {
    private string _codIbge;
    private string _ineDadoSerializado;
    private long _numLote;
    private VersaoThrift _versao;

    /// <summary>
    /// UUID do dado (identificador "universal" gerado na criação do item)
    /// </summary>
    public string UuidDadoSerializado { get; set; }

    /// <summary>
    /// Tipo/classe do objeto serializado através do TBinaryProtocol.
    /// </summary>
    public long TipoDadoSerializado { get; set; }

    /// <summary>
    /// Código CNES da unidade de saúde.
    /// </summary>
    public string CnesDadoSerializado { get; set; }

    /// <summary>
    /// Código IBGE do dado serializado
    /// </summary>
    public string CodIbge
    {
      get
      {
        return _codIbge;
      }
      set
      {
        __isset.codIbge = true;
        this._codIbge = value;
      }
    }

    /// <summary>
    /// Código INE da equipe que gerou a ficha.
    /// </summary>
    public string IneDadoSerializado
    {
      get
      {
        return _ineDadoSerializado;
      }
      set
      {
        __isset.ineDadoSerializado = true;
        this._ineDadoSerializado = value;
      }
    }

    /// <summary>
    /// Numero do lote em {@link DadoTransporteThrift#originadora}
    /// </summary>
    public long NumLote
    {
      get
      {
        return _numLote;
      }
      set
      {
        __isset.numLote = true;
        this._numLote = value;
      }
    }

    /// <summary>
    /// Ficha serializado através do TBinaryProtocol.
    /// </summary>
    public byte[] DadoSerializado { get; set; }

    /// <summary>
    /// Identifica a instalação que enviou o dado
    /// @see DadoInstalacaoThrift
    /// </summary>
    public DadoInstalacaoThrift Remetente { get; set; }

    /// <summary>
    /// Identifica a instalação que cadastrou/digitou
    /// @see DadoInstalacaoThrift
    /// </summary>
    public DadoInstalacaoThrift Originadora { get; set; }

    /// <summary>
    /// Versão da ficha
    /// @see VersaoThrift
    /// </summary>
    public VersaoThrift Versao
    {
      get
      {
        return _versao;
      }
      set
      {
        __isset.versao = true;
        this._versao = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool codIbge;
      public bool ineDadoSerializado;
      public bool numLote;
      public bool versao;
    }

    public DadoTransporteThrift() {
    }

    public DadoTransporteThrift(string uuidDadoSerializado, long tipoDadoSerializado, string cnesDadoSerializado, byte[] dadoSerializado, DadoInstalacaoThrift remetente, DadoInstalacaoThrift originadora) : this() {
      this.UuidDadoSerializado = uuidDadoSerializado;
      this.TipoDadoSerializado = tipoDadoSerializado;
      this.CnesDadoSerializado = cnesDadoSerializado;
      this.DadoSerializado = dadoSerializado;
      this.Remetente = remetente;
      this.Originadora = originadora;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_uuidDadoSerializado = false;
      bool isset_tipoDadoSerializado = false;
      bool isset_cnesDadoSerializado = false;
      bool isset_dadoSerializado = false;
      bool isset_remetente = false;
      bool isset_originadora = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              UuidDadoSerializado = iprot.ReadString();
              isset_uuidDadoSerializado = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              TipoDadoSerializado = iprot.ReadI64();
              isset_tipoDadoSerializado = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              CnesDadoSerializado = iprot.ReadString();
              isset_cnesDadoSerializado = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              CodIbge = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              IneDadoSerializado = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              NumLote = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              DadoSerializado = iprot.ReadBinary();
              isset_dadoSerializado = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              Remetente = new DadoInstalacaoThrift();
              Remetente.Read(iprot);
              isset_remetente = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              Originadora = new DadoInstalacaoThrift();
              Originadora.Read(iprot);
              isset_originadora = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              Versao = new VersaoThrift();
              Versao.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_uuidDadoSerializado)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_tipoDadoSerializado)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_cnesDadoSerializado)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_dadoSerializado)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_remetente)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_originadora)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DadoTransporteThrift");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "uuidDadoSerializado";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(UuidDadoSerializado);
      oprot.WriteFieldEnd();
      field.Name = "tipoDadoSerializado";
      field.Type = TType.I64;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(TipoDadoSerializado);
      oprot.WriteFieldEnd();
      field.Name = "cnesDadoSerializado";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(CnesDadoSerializado);
      oprot.WriteFieldEnd();
      if (CodIbge != null && __isset.codIbge) {
        field.Name = "codIbge";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CodIbge);
        oprot.WriteFieldEnd();
      }
      if (IneDadoSerializado != null && __isset.ineDadoSerializado) {
        field.Name = "ineDadoSerializado";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IneDadoSerializado);
        oprot.WriteFieldEnd();
      }
      if (__isset.numLote) {
        field.Name = "numLote";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NumLote);
        oprot.WriteFieldEnd();
      }
      field.Name = "dadoSerializado";
      field.Type = TType.String;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(DadoSerializado);
      oprot.WriteFieldEnd();
      field.Name = "remetente";
      field.Type = TType.Struct;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      Remetente.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "originadora";
      field.Type = TType.Struct;
      field.ID = 9;
      oprot.WriteFieldBegin(field);
      Originadora.Write(oprot);
      oprot.WriteFieldEnd();
      if (Versao != null && __isset.versao) {
        field.Name = "versao";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        Versao.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DadoTransporteThrift(");
      __sb.Append(", UuidDadoSerializado: ");
      __sb.Append(UuidDadoSerializado);
      __sb.Append(", TipoDadoSerializado: ");
      __sb.Append(TipoDadoSerializado);
      __sb.Append(", CnesDadoSerializado: ");
      __sb.Append(CnesDadoSerializado);
      if (CodIbge != null && __isset.codIbge) {
        __sb.Append(", CodIbge: ");
        __sb.Append(CodIbge);
      }
      if (IneDadoSerializado != null && __isset.ineDadoSerializado) {
        __sb.Append(", IneDadoSerializado: ");
        __sb.Append(IneDadoSerializado);
      }
      if (__isset.numLote) {
        __sb.Append(", NumLote: ");
        __sb.Append(NumLote);
      }
      __sb.Append(", DadoSerializado: ");
      __sb.Append(DadoSerializado);
      __sb.Append(", Remetente: ");
      __sb.Append(Remetente== null ? "<null>" : Remetente.ToString());
      __sb.Append(", Originadora: ");
      __sb.Append(Originadora== null ? "<null>" : Originadora.ToString());
      if (Versao != null && __isset.versao) {
        __sb.Append(", Versao: ");
        __sb.Append(Versao== null ? "<null>" : Versao.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
