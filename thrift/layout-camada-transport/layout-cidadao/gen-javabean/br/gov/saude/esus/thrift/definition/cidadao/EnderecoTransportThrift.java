/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.gov.saude.esus.thrift.definition.cidadao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EnderecoTransportThrift implements org.apache.thrift.TBase<EnderecoTransportThrift, EnderecoTransportThrift._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EnderecoTransportThrift");

  private static final org.apache.thrift.protocol.TField BAIRRO_NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("bairroNome", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BAIRRO_DNE_FIELD_DESC = new org.apache.thrift.protocol.TField("bairroDne", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOCALIDADE_CEP_FIELD_DESC = new org.apache.thrift.protocol.TField("localidadeCep", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOCALIDADE_DNE_FIELD_DESC = new org.apache.thrift.protocol.TField("localidadeDne", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOCALIDADE_IBGE_FIELD_DESC = new org.apache.thrift.protocol.TField("localidadeIbge", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMPLEMENTO_FIELD_DESC = new org.apache.thrift.protocol.TField("complemento", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LOGRADOURO_FIELD_DESC = new org.apache.thrift.protocol.TField("logradouro", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LOGRADOURO_DNE_FIELD_DESC = new org.apache.thrift.protocol.TField("logradouroDne", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField NUMERO_FIELD_DESC = new org.apache.thrift.protocol.TField("numero", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PONTO_REFERENCIA_FIELD_DESC = new org.apache.thrift.protocol.TField("pontoReferencia", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SEM_NUMERO_FIELD_DESC = new org.apache.thrift.protocol.TField("semNumero", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField UF_SIGLA_FIELD_DESC = new org.apache.thrift.protocol.TField("ufSigla", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField MICRO_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("microArea", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EnderecoTransportThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EnderecoTransportThriftTupleSchemeFactory());
  }

  private String bairroNome; // optional
  private String bairroDne; // optional
  private String localidadeCep; // optional
  private String localidadeDne; // optional
  private String localidadeIbge; // optional
  private String complemento; // optional
  private String logradouro; // optional
  private String logradouroDne; // optional
  private String numero; // optional
  private String pontoReferencia; // optional
  private boolean semNumero; // required
  private String ufSigla; // optional
  private String area; // optional
  private String microArea; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BAIRRO_NOME((short)1, "bairroNome"),
    BAIRRO_DNE((short)2, "bairroDne"),
    LOCALIDADE_CEP((short)3, "localidadeCep"),
    LOCALIDADE_DNE((short)4, "localidadeDne"),
    LOCALIDADE_IBGE((short)5, "localidadeIbge"),
    COMPLEMENTO((short)6, "complemento"),
    LOGRADOURO((short)7, "logradouro"),
    LOGRADOURO_DNE((short)8, "logradouroDne"),
    NUMERO((short)9, "numero"),
    PONTO_REFERENCIA((short)10, "pontoReferencia"),
    SEM_NUMERO((short)11, "semNumero"),
    UF_SIGLA((short)12, "ufSigla"),
    AREA((short)13, "area"),
    MICRO_AREA((short)14, "microArea");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BAIRRO_NOME
          return BAIRRO_NOME;
        case 2: // BAIRRO_DNE
          return BAIRRO_DNE;
        case 3: // LOCALIDADE_CEP
          return LOCALIDADE_CEP;
        case 4: // LOCALIDADE_DNE
          return LOCALIDADE_DNE;
        case 5: // LOCALIDADE_IBGE
          return LOCALIDADE_IBGE;
        case 6: // COMPLEMENTO
          return COMPLEMENTO;
        case 7: // LOGRADOURO
          return LOGRADOURO;
        case 8: // LOGRADOURO_DNE
          return LOGRADOURO_DNE;
        case 9: // NUMERO
          return NUMERO;
        case 10: // PONTO_REFERENCIA
          return PONTO_REFERENCIA;
        case 11: // SEM_NUMERO
          return SEM_NUMERO;
        case 12: // UF_SIGLA
          return UF_SIGLA;
        case 13: // AREA
          return AREA;
        case 14: // MICRO_AREA
          return MICRO_AREA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEMNUMERO_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.BAIRRO_NOME,_Fields.BAIRRO_DNE,_Fields.LOCALIDADE_CEP,_Fields.LOCALIDADE_DNE,_Fields.LOCALIDADE_IBGE,_Fields.COMPLEMENTO,_Fields.LOGRADOURO,_Fields.LOGRADOURO_DNE,_Fields.NUMERO,_Fields.PONTO_REFERENCIA,_Fields.UF_SIGLA,_Fields.AREA,_Fields.MICRO_AREA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BAIRRO_NOME, new org.apache.thrift.meta_data.FieldMetaData("bairroNome", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BAIRRO_DNE, new org.apache.thrift.meta_data.FieldMetaData("bairroDne", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALIDADE_CEP, new org.apache.thrift.meta_data.FieldMetaData("localidadeCep", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALIDADE_DNE, new org.apache.thrift.meta_data.FieldMetaData("localidadeDne", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALIDADE_IBGE, new org.apache.thrift.meta_data.FieldMetaData("localidadeIbge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPLEMENTO, new org.apache.thrift.meta_data.FieldMetaData("complemento", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGRADOURO, new org.apache.thrift.meta_data.FieldMetaData("logradouro", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGRADOURO_DNE, new org.apache.thrift.meta_data.FieldMetaData("logradouroDne", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMERO, new org.apache.thrift.meta_data.FieldMetaData("numero", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PONTO_REFERENCIA, new org.apache.thrift.meta_data.FieldMetaData("pontoReferencia", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEM_NUMERO, new org.apache.thrift.meta_data.FieldMetaData("semNumero", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UF_SIGLA, new org.apache.thrift.meta_data.FieldMetaData("ufSigla", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MICRO_AREA, new org.apache.thrift.meta_data.FieldMetaData("microArea", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EnderecoTransportThrift.class, metaDataMap);
  }

  public EnderecoTransportThrift() {
  }

  public EnderecoTransportThrift(
    boolean semNumero)
  {
    this();
    this.semNumero = semNumero;
    setSemNumeroIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EnderecoTransportThrift(EnderecoTransportThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBairroNome()) {
      this.bairroNome = other.bairroNome;
    }
    if (other.isSetBairroDne()) {
      this.bairroDne = other.bairroDne;
    }
    if (other.isSetLocalidadeCep()) {
      this.localidadeCep = other.localidadeCep;
    }
    if (other.isSetLocalidadeDne()) {
      this.localidadeDne = other.localidadeDne;
    }
    if (other.isSetLocalidadeIbge()) {
      this.localidadeIbge = other.localidadeIbge;
    }
    if (other.isSetComplemento()) {
      this.complemento = other.complemento;
    }
    if (other.isSetLogradouro()) {
      this.logradouro = other.logradouro;
    }
    if (other.isSetLogradouroDne()) {
      this.logradouroDne = other.logradouroDne;
    }
    if (other.isSetNumero()) {
      this.numero = other.numero;
    }
    if (other.isSetPontoReferencia()) {
      this.pontoReferencia = other.pontoReferencia;
    }
    this.semNumero = other.semNumero;
    if (other.isSetUfSigla()) {
      this.ufSigla = other.ufSigla;
    }
    if (other.isSetArea()) {
      this.area = other.area;
    }
    if (other.isSetMicroArea()) {
      this.microArea = other.microArea;
    }
  }

  public EnderecoTransportThrift deepCopy() {
    return new EnderecoTransportThrift(this);
  }

  @Override
  public void clear() {
    this.bairroNome = null;
    this.bairroDne = null;
    this.localidadeCep = null;
    this.localidadeDne = null;
    this.localidadeIbge = null;
    this.complemento = null;
    this.logradouro = null;
    this.logradouroDne = null;
    this.numero = null;
    this.pontoReferencia = null;
    setSemNumeroIsSet(false);
    this.semNumero = false;
    this.ufSigla = null;
    this.area = null;
    this.microArea = null;
  }

  public String getBairroNome() {
    return this.bairroNome;
  }

  public void setBairroNome(String bairroNome) {
    this.bairroNome = bairroNome;
  }

  public void unsetBairroNome() {
    this.bairroNome = null;
  }

  /** Returns true if field bairroNome is set (has been assigned a value) and false otherwise */
  public boolean isSetBairroNome() {
    return this.bairroNome != null;
  }

  public void setBairroNomeIsSet(boolean value) {
    if (!value) {
      this.bairroNome = null;
    }
  }

  public String getBairroDne() {
    return this.bairroDne;
  }

  public void setBairroDne(String bairroDne) {
    this.bairroDne = bairroDne;
  }

  public void unsetBairroDne() {
    this.bairroDne = null;
  }

  /** Returns true if field bairroDne is set (has been assigned a value) and false otherwise */
  public boolean isSetBairroDne() {
    return this.bairroDne != null;
  }

  public void setBairroDneIsSet(boolean value) {
    if (!value) {
      this.bairroDne = null;
    }
  }

  public String getLocalidadeCep() {
    return this.localidadeCep;
  }

  public void setLocalidadeCep(String localidadeCep) {
    this.localidadeCep = localidadeCep;
  }

  public void unsetLocalidadeCep() {
    this.localidadeCep = null;
  }

  /** Returns true if field localidadeCep is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalidadeCep() {
    return this.localidadeCep != null;
  }

  public void setLocalidadeCepIsSet(boolean value) {
    if (!value) {
      this.localidadeCep = null;
    }
  }

  public String getLocalidadeDne() {
    return this.localidadeDne;
  }

  public void setLocalidadeDne(String localidadeDne) {
    this.localidadeDne = localidadeDne;
  }

  public void unsetLocalidadeDne() {
    this.localidadeDne = null;
  }

  /** Returns true if field localidadeDne is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalidadeDne() {
    return this.localidadeDne != null;
  }

  public void setLocalidadeDneIsSet(boolean value) {
    if (!value) {
      this.localidadeDne = null;
    }
  }

  public String getLocalidadeIbge() {
    return this.localidadeIbge;
  }

  public void setLocalidadeIbge(String localidadeIbge) {
    this.localidadeIbge = localidadeIbge;
  }

  public void unsetLocalidadeIbge() {
    this.localidadeIbge = null;
  }

  /** Returns true if field localidadeIbge is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalidadeIbge() {
    return this.localidadeIbge != null;
  }

  public void setLocalidadeIbgeIsSet(boolean value) {
    if (!value) {
      this.localidadeIbge = null;
    }
  }

  public String getComplemento() {
    return this.complemento;
  }

  public void setComplemento(String complemento) {
    this.complemento = complemento;
  }

  public void unsetComplemento() {
    this.complemento = null;
  }

  /** Returns true if field complemento is set (has been assigned a value) and false otherwise */
  public boolean isSetComplemento() {
    return this.complemento != null;
  }

  public void setComplementoIsSet(boolean value) {
    if (!value) {
      this.complemento = null;
    }
  }

  public String getLogradouro() {
    return this.logradouro;
  }

  public void setLogradouro(String logradouro) {
    this.logradouro = logradouro;
  }

  public void unsetLogradouro() {
    this.logradouro = null;
  }

  /** Returns true if field logradouro is set (has been assigned a value) and false otherwise */
  public boolean isSetLogradouro() {
    return this.logradouro != null;
  }

  public void setLogradouroIsSet(boolean value) {
    if (!value) {
      this.logradouro = null;
    }
  }

  public String getLogradouroDne() {
    return this.logradouroDne;
  }

  public void setLogradouroDne(String logradouroDne) {
    this.logradouroDne = logradouroDne;
  }

  public void unsetLogradouroDne() {
    this.logradouroDne = null;
  }

  /** Returns true if field logradouroDne is set (has been assigned a value) and false otherwise */
  public boolean isSetLogradouroDne() {
    return this.logradouroDne != null;
  }

  public void setLogradouroDneIsSet(boolean value) {
    if (!value) {
      this.logradouroDne = null;
    }
  }

  public String getNumero() {
    return this.numero;
  }

  public void setNumero(String numero) {
    this.numero = numero;
  }

  public void unsetNumero() {
    this.numero = null;
  }

  /** Returns true if field numero is set (has been assigned a value) and false otherwise */
  public boolean isSetNumero() {
    return this.numero != null;
  }

  public void setNumeroIsSet(boolean value) {
    if (!value) {
      this.numero = null;
    }
  }

  public String getPontoReferencia() {
    return this.pontoReferencia;
  }

  public void setPontoReferencia(String pontoReferencia) {
    this.pontoReferencia = pontoReferencia;
  }

  public void unsetPontoReferencia() {
    this.pontoReferencia = null;
  }

  /** Returns true if field pontoReferencia is set (has been assigned a value) and false otherwise */
  public boolean isSetPontoReferencia() {
    return this.pontoReferencia != null;
  }

  public void setPontoReferenciaIsSet(boolean value) {
    if (!value) {
      this.pontoReferencia = null;
    }
  }

  public boolean isSemNumero() {
    return this.semNumero;
  }

  public void setSemNumero(boolean semNumero) {
    this.semNumero = semNumero;
    setSemNumeroIsSet(true);
  }

  public void unsetSemNumero() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEMNUMERO_ISSET_ID);
  }

  /** Returns true if field semNumero is set (has been assigned a value) and false otherwise */
  public boolean isSetSemNumero() {
    return EncodingUtils.testBit(__isset_bitfield, __SEMNUMERO_ISSET_ID);
  }

  public void setSemNumeroIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEMNUMERO_ISSET_ID, value);
  }

  public String getUfSigla() {
    return this.ufSigla;
  }

  public void setUfSigla(String ufSigla) {
    this.ufSigla = ufSigla;
  }

  public void unsetUfSigla() {
    this.ufSigla = null;
  }

  /** Returns true if field ufSigla is set (has been assigned a value) and false otherwise */
  public boolean isSetUfSigla() {
    return this.ufSigla != null;
  }

  public void setUfSiglaIsSet(boolean value) {
    if (!value) {
      this.ufSigla = null;
    }
  }

  public String getArea() {
    return this.area;
  }

  public void setArea(String area) {
    this.area = area;
  }

  public void unsetArea() {
    this.area = null;
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean isSetArea() {
    return this.area != null;
  }

  public void setAreaIsSet(boolean value) {
    if (!value) {
      this.area = null;
    }
  }

  public String getMicroArea() {
    return this.microArea;
  }

  public void setMicroArea(String microArea) {
    this.microArea = microArea;
  }

  public void unsetMicroArea() {
    this.microArea = null;
  }

  /** Returns true if field microArea is set (has been assigned a value) and false otherwise */
  public boolean isSetMicroArea() {
    return this.microArea != null;
  }

  public void setMicroAreaIsSet(boolean value) {
    if (!value) {
      this.microArea = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BAIRRO_NOME:
      if (value == null) {
        unsetBairroNome();
      } else {
        setBairroNome((String)value);
      }
      break;

    case BAIRRO_DNE:
      if (value == null) {
        unsetBairroDne();
      } else {
        setBairroDne((String)value);
      }
      break;

    case LOCALIDADE_CEP:
      if (value == null) {
        unsetLocalidadeCep();
      } else {
        setLocalidadeCep((String)value);
      }
      break;

    case LOCALIDADE_DNE:
      if (value == null) {
        unsetLocalidadeDne();
      } else {
        setLocalidadeDne((String)value);
      }
      break;

    case LOCALIDADE_IBGE:
      if (value == null) {
        unsetLocalidadeIbge();
      } else {
        setLocalidadeIbge((String)value);
      }
      break;

    case COMPLEMENTO:
      if (value == null) {
        unsetComplemento();
      } else {
        setComplemento((String)value);
      }
      break;

    case LOGRADOURO:
      if (value == null) {
        unsetLogradouro();
      } else {
        setLogradouro((String)value);
      }
      break;

    case LOGRADOURO_DNE:
      if (value == null) {
        unsetLogradouroDne();
      } else {
        setLogradouroDne((String)value);
      }
      break;

    case NUMERO:
      if (value == null) {
        unsetNumero();
      } else {
        setNumero((String)value);
      }
      break;

    case PONTO_REFERENCIA:
      if (value == null) {
        unsetPontoReferencia();
      } else {
        setPontoReferencia((String)value);
      }
      break;

    case SEM_NUMERO:
      if (value == null) {
        unsetSemNumero();
      } else {
        setSemNumero((Boolean)value);
      }
      break;

    case UF_SIGLA:
      if (value == null) {
        unsetUfSigla();
      } else {
        setUfSigla((String)value);
      }
      break;

    case AREA:
      if (value == null) {
        unsetArea();
      } else {
        setArea((String)value);
      }
      break;

    case MICRO_AREA:
      if (value == null) {
        unsetMicroArea();
      } else {
        setMicroArea((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BAIRRO_NOME:
      return getBairroNome();

    case BAIRRO_DNE:
      return getBairroDne();

    case LOCALIDADE_CEP:
      return getLocalidadeCep();

    case LOCALIDADE_DNE:
      return getLocalidadeDne();

    case LOCALIDADE_IBGE:
      return getLocalidadeIbge();

    case COMPLEMENTO:
      return getComplemento();

    case LOGRADOURO:
      return getLogradouro();

    case LOGRADOURO_DNE:
      return getLogradouroDne();

    case NUMERO:
      return getNumero();

    case PONTO_REFERENCIA:
      return getPontoReferencia();

    case SEM_NUMERO:
      return Boolean.valueOf(isSemNumero());

    case UF_SIGLA:
      return getUfSigla();

    case AREA:
      return getArea();

    case MICRO_AREA:
      return getMicroArea();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BAIRRO_NOME:
      return isSetBairroNome();
    case BAIRRO_DNE:
      return isSetBairroDne();
    case LOCALIDADE_CEP:
      return isSetLocalidadeCep();
    case LOCALIDADE_DNE:
      return isSetLocalidadeDne();
    case LOCALIDADE_IBGE:
      return isSetLocalidadeIbge();
    case COMPLEMENTO:
      return isSetComplemento();
    case LOGRADOURO:
      return isSetLogradouro();
    case LOGRADOURO_DNE:
      return isSetLogradouroDne();
    case NUMERO:
      return isSetNumero();
    case PONTO_REFERENCIA:
      return isSetPontoReferencia();
    case SEM_NUMERO:
      return isSetSemNumero();
    case UF_SIGLA:
      return isSetUfSigla();
    case AREA:
      return isSetArea();
    case MICRO_AREA:
      return isSetMicroArea();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EnderecoTransportThrift)
      return this.equals((EnderecoTransportThrift)that);
    return false;
  }

  public boolean equals(EnderecoTransportThrift that) {
    if (that == null)
      return false;

    boolean this_present_bairroNome = true && this.isSetBairroNome();
    boolean that_present_bairroNome = true && that.isSetBairroNome();
    if (this_present_bairroNome || that_present_bairroNome) {
      if (!(this_present_bairroNome && that_present_bairroNome))
        return false;
      if (!this.bairroNome.equals(that.bairroNome))
        return false;
    }

    boolean this_present_bairroDne = true && this.isSetBairroDne();
    boolean that_present_bairroDne = true && that.isSetBairroDne();
    if (this_present_bairroDne || that_present_bairroDne) {
      if (!(this_present_bairroDne && that_present_bairroDne))
        return false;
      if (!this.bairroDne.equals(that.bairroDne))
        return false;
    }

    boolean this_present_localidadeCep = true && this.isSetLocalidadeCep();
    boolean that_present_localidadeCep = true && that.isSetLocalidadeCep();
    if (this_present_localidadeCep || that_present_localidadeCep) {
      if (!(this_present_localidadeCep && that_present_localidadeCep))
        return false;
      if (!this.localidadeCep.equals(that.localidadeCep))
        return false;
    }

    boolean this_present_localidadeDne = true && this.isSetLocalidadeDne();
    boolean that_present_localidadeDne = true && that.isSetLocalidadeDne();
    if (this_present_localidadeDne || that_present_localidadeDne) {
      if (!(this_present_localidadeDne && that_present_localidadeDne))
        return false;
      if (!this.localidadeDne.equals(that.localidadeDne))
        return false;
    }

    boolean this_present_localidadeIbge = true && this.isSetLocalidadeIbge();
    boolean that_present_localidadeIbge = true && that.isSetLocalidadeIbge();
    if (this_present_localidadeIbge || that_present_localidadeIbge) {
      if (!(this_present_localidadeIbge && that_present_localidadeIbge))
        return false;
      if (!this.localidadeIbge.equals(that.localidadeIbge))
        return false;
    }

    boolean this_present_complemento = true && this.isSetComplemento();
    boolean that_present_complemento = true && that.isSetComplemento();
    if (this_present_complemento || that_present_complemento) {
      if (!(this_present_complemento && that_present_complemento))
        return false;
      if (!this.complemento.equals(that.complemento))
        return false;
    }

    boolean this_present_logradouro = true && this.isSetLogradouro();
    boolean that_present_logradouro = true && that.isSetLogradouro();
    if (this_present_logradouro || that_present_logradouro) {
      if (!(this_present_logradouro && that_present_logradouro))
        return false;
      if (!this.logradouro.equals(that.logradouro))
        return false;
    }

    boolean this_present_logradouroDne = true && this.isSetLogradouroDne();
    boolean that_present_logradouroDne = true && that.isSetLogradouroDne();
    if (this_present_logradouroDne || that_present_logradouroDne) {
      if (!(this_present_logradouroDne && that_present_logradouroDne))
        return false;
      if (!this.logradouroDne.equals(that.logradouroDne))
        return false;
    }

    boolean this_present_numero = true && this.isSetNumero();
    boolean that_present_numero = true && that.isSetNumero();
    if (this_present_numero || that_present_numero) {
      if (!(this_present_numero && that_present_numero))
        return false;
      if (!this.numero.equals(that.numero))
        return false;
    }

    boolean this_present_pontoReferencia = true && this.isSetPontoReferencia();
    boolean that_present_pontoReferencia = true && that.isSetPontoReferencia();
    if (this_present_pontoReferencia || that_present_pontoReferencia) {
      if (!(this_present_pontoReferencia && that_present_pontoReferencia))
        return false;
      if (!this.pontoReferencia.equals(that.pontoReferencia))
        return false;
    }

    boolean this_present_semNumero = true;
    boolean that_present_semNumero = true;
    if (this_present_semNumero || that_present_semNumero) {
      if (!(this_present_semNumero && that_present_semNumero))
        return false;
      if (this.semNumero != that.semNumero)
        return false;
    }

    boolean this_present_ufSigla = true && this.isSetUfSigla();
    boolean that_present_ufSigla = true && that.isSetUfSigla();
    if (this_present_ufSigla || that_present_ufSigla) {
      if (!(this_present_ufSigla && that_present_ufSigla))
        return false;
      if (!this.ufSigla.equals(that.ufSigla))
        return false;
    }

    boolean this_present_area = true && this.isSetArea();
    boolean that_present_area = true && that.isSetArea();
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (!this.area.equals(that.area))
        return false;
    }

    boolean this_present_microArea = true && this.isSetMicroArea();
    boolean that_present_microArea = true && that.isSetMicroArea();
    if (this_present_microArea || that_present_microArea) {
      if (!(this_present_microArea && that_present_microArea))
        return false;
      if (!this.microArea.equals(that.microArea))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(EnderecoTransportThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    EnderecoTransportThrift typedOther = (EnderecoTransportThrift)other;

    lastComparison = Boolean.valueOf(isSetBairroNome()).compareTo(typedOther.isSetBairroNome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBairroNome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bairroNome, typedOther.bairroNome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBairroDne()).compareTo(typedOther.isSetBairroDne());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBairroDne()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bairroDne, typedOther.bairroDne);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalidadeCep()).compareTo(typedOther.isSetLocalidadeCep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalidadeCep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localidadeCep, typedOther.localidadeCep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalidadeDne()).compareTo(typedOther.isSetLocalidadeDne());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalidadeDne()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localidadeDne, typedOther.localidadeDne);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalidadeIbge()).compareTo(typedOther.isSetLocalidadeIbge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalidadeIbge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localidadeIbge, typedOther.localidadeIbge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComplemento()).compareTo(typedOther.isSetComplemento());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComplemento()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complemento, typedOther.complemento);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogradouro()).compareTo(typedOther.isSetLogradouro());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogradouro()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logradouro, typedOther.logradouro);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogradouroDne()).compareTo(typedOther.isSetLogradouroDne());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogradouroDne()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logradouroDne, typedOther.logradouroDne);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumero()).compareTo(typedOther.isSetNumero());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumero()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numero, typedOther.numero);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPontoReferencia()).compareTo(typedOther.isSetPontoReferencia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPontoReferencia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pontoReferencia, typedOther.pontoReferencia);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSemNumero()).compareTo(typedOther.isSetSemNumero());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSemNumero()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.semNumero, typedOther.semNumero);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUfSigla()).compareTo(typedOther.isSetUfSigla());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUfSigla()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ufSigla, typedOther.ufSigla);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArea()).compareTo(typedOther.isSetArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, typedOther.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMicroArea()).compareTo(typedOther.isSetMicroArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMicroArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.microArea, typedOther.microArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EnderecoTransportThrift(");
    boolean first = true;

    if (isSetBairroNome()) {
      sb.append("bairroNome:");
      if (this.bairroNome == null) {
        sb.append("null");
      } else {
        sb.append(this.bairroNome);
      }
      first = false;
    }
    if (isSetBairroDne()) {
      if (!first) sb.append(", ");
      sb.append("bairroDne:");
      if (this.bairroDne == null) {
        sb.append("null");
      } else {
        sb.append(this.bairroDne);
      }
      first = false;
    }
    if (isSetLocalidadeCep()) {
      if (!first) sb.append(", ");
      sb.append("localidadeCep:");
      if (this.localidadeCep == null) {
        sb.append("null");
      } else {
        sb.append(this.localidadeCep);
      }
      first = false;
    }
    if (isSetLocalidadeDne()) {
      if (!first) sb.append(", ");
      sb.append("localidadeDne:");
      if (this.localidadeDne == null) {
        sb.append("null");
      } else {
        sb.append(this.localidadeDne);
      }
      first = false;
    }
    if (isSetLocalidadeIbge()) {
      if (!first) sb.append(", ");
      sb.append("localidadeIbge:");
      if (this.localidadeIbge == null) {
        sb.append("null");
      } else {
        sb.append(this.localidadeIbge);
      }
      first = false;
    }
    if (isSetComplemento()) {
      if (!first) sb.append(", ");
      sb.append("complemento:");
      if (this.complemento == null) {
        sb.append("null");
      } else {
        sb.append(this.complemento);
      }
      first = false;
    }
    if (isSetLogradouro()) {
      if (!first) sb.append(", ");
      sb.append("logradouro:");
      if (this.logradouro == null) {
        sb.append("null");
      } else {
        sb.append(this.logradouro);
      }
      first = false;
    }
    if (isSetLogradouroDne()) {
      if (!first) sb.append(", ");
      sb.append("logradouroDne:");
      if (this.logradouroDne == null) {
        sb.append("null");
      } else {
        sb.append(this.logradouroDne);
      }
      first = false;
    }
    if (isSetNumero()) {
      if (!first) sb.append(", ");
      sb.append("numero:");
      if (this.numero == null) {
        sb.append("null");
      } else {
        sb.append(this.numero);
      }
      first = false;
    }
    if (isSetPontoReferencia()) {
      if (!first) sb.append(", ");
      sb.append("pontoReferencia:");
      if (this.pontoReferencia == null) {
        sb.append("null");
      } else {
        sb.append(this.pontoReferencia);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("semNumero:");
    sb.append(this.semNumero);
    first = false;
    if (isSetUfSigla()) {
      if (!first) sb.append(", ");
      sb.append("ufSigla:");
      if (this.ufSigla == null) {
        sb.append("null");
      } else {
        sb.append(this.ufSigla);
      }
      first = false;
    }
    if (isSetArea()) {
      if (!first) sb.append(", ");
      sb.append("area:");
      if (this.area == null) {
        sb.append("null");
      } else {
        sb.append(this.area);
      }
      first = false;
    }
    if (isSetMicroArea()) {
      if (!first) sb.append(", ");
      sb.append("microArea:");
      if (this.microArea == null) {
        sb.append("null");
      } else {
        sb.append(this.microArea);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EnderecoTransportThriftStandardSchemeFactory implements SchemeFactory {
    public EnderecoTransportThriftStandardScheme getScheme() {
      return new EnderecoTransportThriftStandardScheme();
    }
  }

  private static class EnderecoTransportThriftStandardScheme extends StandardScheme<EnderecoTransportThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EnderecoTransportThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BAIRRO_NOME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bairroNome = iprot.readString();
              struct.setBairroNomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BAIRRO_DNE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bairroDne = iprot.readString();
              struct.setBairroDneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCALIDADE_CEP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localidadeCep = iprot.readString();
              struct.setLocalidadeCepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOCALIDADE_DNE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localidadeDne = iprot.readString();
              struct.setLocalidadeDneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCALIDADE_IBGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localidadeIbge = iprot.readString();
              struct.setLocalidadeIbgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMPLEMENTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.complemento = iprot.readString();
              struct.setComplementoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOGRADOURO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logradouro = iprot.readString();
              struct.setLogradouroIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOGRADOURO_DNE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logradouroDne = iprot.readString();
              struct.setLogradouroDneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NUMERO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.numero = iprot.readString();
              struct.setNumeroIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PONTO_REFERENCIA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pontoReferencia = iprot.readString();
              struct.setPontoReferenciaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SEM_NUMERO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.semNumero = iprot.readBool();
              struct.setSemNumeroIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UF_SIGLA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ufSigla = iprot.readString();
              struct.setUfSiglaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.area = iprot.readString();
              struct.setAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MICRO_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.microArea = iprot.readString();
              struct.setMicroAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EnderecoTransportThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bairroNome != null) {
        if (struct.isSetBairroNome()) {
          oprot.writeFieldBegin(BAIRRO_NOME_FIELD_DESC);
          oprot.writeString(struct.bairroNome);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bairroDne != null) {
        if (struct.isSetBairroDne()) {
          oprot.writeFieldBegin(BAIRRO_DNE_FIELD_DESC);
          oprot.writeString(struct.bairroDne);
          oprot.writeFieldEnd();
        }
      }
      if (struct.localidadeCep != null) {
        if (struct.isSetLocalidadeCep()) {
          oprot.writeFieldBegin(LOCALIDADE_CEP_FIELD_DESC);
          oprot.writeString(struct.localidadeCep);
          oprot.writeFieldEnd();
        }
      }
      if (struct.localidadeDne != null) {
        if (struct.isSetLocalidadeDne()) {
          oprot.writeFieldBegin(LOCALIDADE_DNE_FIELD_DESC);
          oprot.writeString(struct.localidadeDne);
          oprot.writeFieldEnd();
        }
      }
      if (struct.localidadeIbge != null) {
        if (struct.isSetLocalidadeIbge()) {
          oprot.writeFieldBegin(LOCALIDADE_IBGE_FIELD_DESC);
          oprot.writeString(struct.localidadeIbge);
          oprot.writeFieldEnd();
        }
      }
      if (struct.complemento != null) {
        if (struct.isSetComplemento()) {
          oprot.writeFieldBegin(COMPLEMENTO_FIELD_DESC);
          oprot.writeString(struct.complemento);
          oprot.writeFieldEnd();
        }
      }
      if (struct.logradouro != null) {
        if (struct.isSetLogradouro()) {
          oprot.writeFieldBegin(LOGRADOURO_FIELD_DESC);
          oprot.writeString(struct.logradouro);
          oprot.writeFieldEnd();
        }
      }
      if (struct.logradouroDne != null) {
        if (struct.isSetLogradouroDne()) {
          oprot.writeFieldBegin(LOGRADOURO_DNE_FIELD_DESC);
          oprot.writeString(struct.logradouroDne);
          oprot.writeFieldEnd();
        }
      }
      if (struct.numero != null) {
        if (struct.isSetNumero()) {
          oprot.writeFieldBegin(NUMERO_FIELD_DESC);
          oprot.writeString(struct.numero);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pontoReferencia != null) {
        if (struct.isSetPontoReferencia()) {
          oprot.writeFieldBegin(PONTO_REFERENCIA_FIELD_DESC);
          oprot.writeString(struct.pontoReferencia);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SEM_NUMERO_FIELD_DESC);
      oprot.writeBool(struct.semNumero);
      oprot.writeFieldEnd();
      if (struct.ufSigla != null) {
        if (struct.isSetUfSigla()) {
          oprot.writeFieldBegin(UF_SIGLA_FIELD_DESC);
          oprot.writeString(struct.ufSigla);
          oprot.writeFieldEnd();
        }
      }
      if (struct.area != null) {
        if (struct.isSetArea()) {
          oprot.writeFieldBegin(AREA_FIELD_DESC);
          oprot.writeString(struct.area);
          oprot.writeFieldEnd();
        }
      }
      if (struct.microArea != null) {
        if (struct.isSetMicroArea()) {
          oprot.writeFieldBegin(MICRO_AREA_FIELD_DESC);
          oprot.writeString(struct.microArea);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EnderecoTransportThriftTupleSchemeFactory implements SchemeFactory {
    public EnderecoTransportThriftTupleScheme getScheme() {
      return new EnderecoTransportThriftTupleScheme();
    }
  }

  private static class EnderecoTransportThriftTupleScheme extends TupleScheme<EnderecoTransportThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EnderecoTransportThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBairroNome()) {
        optionals.set(0);
      }
      if (struct.isSetBairroDne()) {
        optionals.set(1);
      }
      if (struct.isSetLocalidadeCep()) {
        optionals.set(2);
      }
      if (struct.isSetLocalidadeDne()) {
        optionals.set(3);
      }
      if (struct.isSetLocalidadeIbge()) {
        optionals.set(4);
      }
      if (struct.isSetComplemento()) {
        optionals.set(5);
      }
      if (struct.isSetLogradouro()) {
        optionals.set(6);
      }
      if (struct.isSetLogradouroDne()) {
        optionals.set(7);
      }
      if (struct.isSetNumero()) {
        optionals.set(8);
      }
      if (struct.isSetPontoReferencia()) {
        optionals.set(9);
      }
      if (struct.isSetSemNumero()) {
        optionals.set(10);
      }
      if (struct.isSetUfSigla()) {
        optionals.set(11);
      }
      if (struct.isSetArea()) {
        optionals.set(12);
      }
      if (struct.isSetMicroArea()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetBairroNome()) {
        oprot.writeString(struct.bairroNome);
      }
      if (struct.isSetBairroDne()) {
        oprot.writeString(struct.bairroDne);
      }
      if (struct.isSetLocalidadeCep()) {
        oprot.writeString(struct.localidadeCep);
      }
      if (struct.isSetLocalidadeDne()) {
        oprot.writeString(struct.localidadeDne);
      }
      if (struct.isSetLocalidadeIbge()) {
        oprot.writeString(struct.localidadeIbge);
      }
      if (struct.isSetComplemento()) {
        oprot.writeString(struct.complemento);
      }
      if (struct.isSetLogradouro()) {
        oprot.writeString(struct.logradouro);
      }
      if (struct.isSetLogradouroDne()) {
        oprot.writeString(struct.logradouroDne);
      }
      if (struct.isSetNumero()) {
        oprot.writeString(struct.numero);
      }
      if (struct.isSetPontoReferencia()) {
        oprot.writeString(struct.pontoReferencia);
      }
      if (struct.isSetSemNumero()) {
        oprot.writeBool(struct.semNumero);
      }
      if (struct.isSetUfSigla()) {
        oprot.writeString(struct.ufSigla);
      }
      if (struct.isSetArea()) {
        oprot.writeString(struct.area);
      }
      if (struct.isSetMicroArea()) {
        oprot.writeString(struct.microArea);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EnderecoTransportThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.bairroNome = iprot.readString();
        struct.setBairroNomeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bairroDne = iprot.readString();
        struct.setBairroDneIsSet(true);
      }
      if (incoming.get(2)) {
        struct.localidadeCep = iprot.readString();
        struct.setLocalidadeCepIsSet(true);
      }
      if (incoming.get(3)) {
        struct.localidadeDne = iprot.readString();
        struct.setLocalidadeDneIsSet(true);
      }
      if (incoming.get(4)) {
        struct.localidadeIbge = iprot.readString();
        struct.setLocalidadeIbgeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.complemento = iprot.readString();
        struct.setComplementoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.logradouro = iprot.readString();
        struct.setLogradouroIsSet(true);
      }
      if (incoming.get(7)) {
        struct.logradouroDne = iprot.readString();
        struct.setLogradouroDneIsSet(true);
      }
      if (incoming.get(8)) {
        struct.numero = iprot.readString();
        struct.setNumeroIsSet(true);
      }
      if (incoming.get(9)) {
        struct.pontoReferencia = iprot.readString();
        struct.setPontoReferenciaIsSet(true);
      }
      if (incoming.get(10)) {
        struct.semNumero = iprot.readBool();
        struct.setSemNumeroIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ufSigla = iprot.readString();
        struct.setUfSiglaIsSet(true);
      }
      if (incoming.get(12)) {
        struct.area = iprot.readString();
        struct.setAreaIsSet(true);
      }
      if (incoming.get(13)) {
        struct.microArea = iprot.readString();
        struct.setMicroAreaIsSet(true);
      }
    }
  }

}

